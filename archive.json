{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2020-11-05T00:21:28.513890+00:00",
  "repo": "cfrg/draft-irtf-cfrg-voprf",
  "labels": [
    {
      "name": "bug",
      "description": null,
      "color": "ee0701"
    },
    {
      "name": "duplicate",
      "description": null,
      "color": "cccccc"
    },
    {
      "name": "enhancement",
      "description": null,
      "color": "84b6eb"
    },
    {
      "name": "help wanted",
      "description": null,
      "color": "33aa3f"
    },
    {
      "name": "good first issue",
      "description": null,
      "color": "7057ff"
    },
    {
      "name": "invalid",
      "description": null,
      "color": "e6e6e6"
    },
    {
      "name": "question",
      "description": null,
      "color": "cc317c"
    },
    {
      "name": "wontfix",
      "description": null,
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 3,
      "id": "MDU6SXNzdWUzMDYyMjQ2NjU=",
      "title": "Clean up DLEQ notation, adopt that of PrivacyPass",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/3",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "r & \\gets \\mathbb{Z}_p \\\\\r\nA &= rG \\\\\r\nB &= rM \\\\\r\nc &= H(G,Y,Z,A,B) \\\\\r\ns &= (r - ck) (\\text{mod} p) \\\\\r\n& \\mathsf{Output } \\; (c, s) \r\n\r\n\r\nA' &= sG + cY \\\\\r\nB' &= sM + cZ \\\\\r\nc' &= H(G,Y,Z,A',B') \\\\\r\n& \\mathsf{Output } \\; c == c'\r\n\r\n\\log_G(Y) =? \\log_M(Z)\r\nY = kG, Z = kM\r\n\r\n\\mathsf{DLEQVerify}(G, Y, M, Z, (c, s))\r\n\r\n\\mathsf{DLEQGenerate}(G, Y, M, Z)",
      "createdAt": "2018-03-18T09:15:06Z",
      "updatedAt": "2018-06-21T00:47:57Z",
      "closedAt": "2018-06-21T00:47:56Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm happy to have a go at doing this",
          "createdAt": "2018-06-16T02:38:39Z",
          "updatedAt": "2018-06-16T02:38:39Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed by #9.",
          "createdAt": "2018-06-21T00:47:56Z",
          "updatedAt": "2018-06-21T00:47:56Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "MDU6SXNzdWUzMDY1NTQ0ODk=",
      "title": "Document title should be \"ecvoprf,\" not \"voprf.\"",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/4",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-03-19T17:15:48Z",
      "updatedAt": "2018-06-05T21:28:40Z",
      "closedAt": "2018-06-05T21:28:39Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed",
          "createdAt": "2018-06-05T21:28:39Z",
          "updatedAt": "2018-06-05T21:28:39Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "MDU6SXNzdWUzMDcxNjI4Mzc=",
      "title": "Add \"parameter commitment\" support",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/5",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "In some cases, it may be desirable for P to force V to only redeem its PRF value for specific set of \"parameters.\" For example, imagine P and V could use the PRF output to derive an encryption key for encrypting data to the server, though V is free to use whatever encryption algorithm it likes. V tells P which algorithm it's using in its redemption+data message to P. Currently, P cannot restrict the algorithm V uses since the only thing P commits to is the keying material during the VOPRF protocol. \r\n\r\nOne way to address this problem is as follows. Let _params_ be the parameters that P wishes V to use when redeeming its PRF value. (In the example above, it might be a canonical representation of the encryption algorithm cipher suite.) When multiplying V's blinded message M by its scalar, P also mixes in t = H(_params_ || k2), where k2 is another secret scalar != k, and H is a full-domain hash function that maps to curve base field (e.g., Z_p). The resulting blinded and \"signed\" message is then Z = tkM = rkrX. \r\n\r\nWhen redeeming the PRF value, V supplies the PRF input *and* _params_. P can then recompute t as above and mix it into the computation. Moreover, since t is computed by appending a secret to the parameters and hashing the result, V cannot remove it from Z without knowledge of k2. ",
      "createdAt": "2018-03-21T09:03:04Z",
      "updatedAt": "2018-06-21T00:47:46Z",
      "closedAt": "2018-06-21T00:47:46Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Alternatively: Have a separate public set of commitments for each param value published somewhere and return the current VOPRF value plus a DLEQ with respect to the committed value.",
          "createdAt": "2018-06-05T21:29:27Z",
          "updatedAt": "2018-06-05T21:29:27Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not certain on how providing a DLEQ proof wrt the params forces V to redeem PRF values wrt these same params. The DLEQ proof certainly cannot be verified without using the same params, but it seems like the blinded tokens should also be signed in such a way that the params are implicitly embedded -- as in the first idea.\r\n\r\nMaybe I am mistaken though?",
          "createdAt": "2018-06-16T02:48:16Z",
          "updatedAt": "2018-06-16T02:48:37Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #7.",
          "createdAt": "2018-06-21T00:47:46Z",
          "updatedAt": "2018-06-21T00:47:46Z"
        }
      ]
    },
    {
      "number": 6,
      "id": "MDU6SXNzdWUzMzI5OTgxNjM=",
      "title": "Expand test vectors with DLEQ proof outputs",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/6",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2018-06-16T16:21:39Z",
      "updatedAt": "2019-03-06T16:50:26Z",
      "closedAt": "2019-03-06T14:19:41Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood I was planning to add the DLEQ test vectors as part of the work that I am doing and I was wondering how exactly SHA-512 is used for curves P-384 and P-256 (and likewise SHA-256 for P-384 and P-512)? If I'm not mistaken, if you just take the hash output mod p then this will be biased, or am I missing something?\r\n\r\nAlso do you happen to have the code that you used to generate these?",
          "createdAt": "2019-02-22T15:50:40Z",
          "updatedAt": "2019-02-22T15:50:40Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Think this is done now so I am going to close it.",
          "createdAt": "2019-03-06T14:19:40Z",
          "updatedAt": "2019-03-06T14:19:40Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Works for me!",
          "createdAt": "2019-03-06T16:50:26Z",
          "updatedAt": "2019-03-06T16:50:26Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "MDU6SXNzdWUzMzI5OTgxNzA=",
      "title": "Add a section on use cases",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/7",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-06-16T16:21:50Z",
      "updatedAt": "2018-06-21T00:47:12Z",
      "closedAt": "2018-06-21T00:47:12Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed by #5.",
          "createdAt": "2018-06-21T00:47:12Z",
          "updatedAt": "2018-06-21T00:47:12Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "MDU6SXNzdWUzMzMxMDIyNzI=",
      "title": "Add more references",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/10",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "https://eprint.iacr.org/2016/144\r\nhttp://webee.technion.ac.il/~hugo/sphinx.pdf",
      "createdAt": "2018-06-17T23:41:39Z",
      "updatedAt": "2018-09-25T00:26:52Z",
      "closedAt": "2018-09-25T00:26:52Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "https://eprint.iacr.org/2014/650",
          "createdAt": "2018-06-18T00:45:38Z",
          "updatedAt": "2018-06-18T00:45:38Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "will do this",
          "createdAt": "2018-06-18T00:45:57Z",
          "updatedAt": "2018-06-18T00:45:57Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "MDU6SXNzdWUzNzE4NTg4NDA=",
      "title": "Change \"curve\" to \"prime-order group\"",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/13",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "The VOPRF is generic and can be designed in any prime-order group so we should probably refer to it as such. We can then talk specifically about the various instantiations of prime-order groups including elliptic curves.\r\n\r\n@chris-wood If you're happy with this, then I am happy to make the change.",
      "createdAt": "2018-10-19T08:36:58Z",
      "updatedAt": "2018-10-22T13:27:16Z",
      "closedAt": "2018-10-22T13:27:16Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids Yep, please give it a go!",
          "createdAt": "2018-10-20T01:46:18Z",
          "updatedAt": "2018-10-20T01:46:18Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "This is merged so closing",
          "createdAt": "2018-10-22T13:27:16Z",
          "updatedAt": "2018-10-22T13:27:16Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "MDU6SXNzdWU0MDkzOTg2NjU=",
      "title": "Making verifiability optional",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/15",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "@chris-wood I spoke to Hugo Krawczyk at RWC and he mentioned being more general in this draft so that we cover OPRFs as well as VOPRFs (i.e. make verifiability optional). This would allow us to cover additional use-cases such as that of OPAQUE (https://eprint.iacr.org/2018/163.pdf) and SPHINCS (https://eprint.iacr.org/2018/695.pdf). It may also help to differentiate the techniques that we use from VRFs without obliviousness.\r\n\r\nWhat do you think? I would be happy to write up the necessary changes.",
      "createdAt": "2019-02-12T16:51:44Z",
      "updatedAt": "2019-02-27T11:41:55Z",
      "closedAt": "2019-02-27T11:41:54Z",
      "comments": [
        {
          "author": "grittygrease",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm on board.",
          "createdAt": "2019-02-12T19:48:17Z",
          "updatedAt": "2019-02-12T19:48:17Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "\ud83d\udc4d sounds great!",
          "createdAt": "2019-02-12T19:52:00Z",
          "updatedAt": "2019-02-12T19:52:00Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids do you think you'll be able to do this before Prague? ",
          "createdAt": "2019-02-13T14:26:49Z",
          "updatedAt": "2019-02-13T14:26:49Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah I think it would be good to get the changes in before then, so I'm happy to aim for that. ",
          "createdAt": "2019-02-13T14:30:55Z",
          "updatedAt": "2019-02-13T14:30:55Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "DOne",
          "createdAt": "2019-02-27T11:41:54Z",
          "updatedAt": "2019-02-27T11:41:54Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "MDU6SXNzdWU0MDkzOTk0MjQ=",
      "title": "Add batched proofs for multiple client inputs",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/16",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The draft currently only covers DLEQ proof generation for input query from the client. It would be good to integrate the batching mechanism that we use in Privacy Pass when the client makes n>1 input queries.",
      "createdAt": "2019-02-12T16:53:26Z",
      "updatedAt": "2019-02-27T11:41:44Z",
      "closedAt": "2019-02-27T11:41:44Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Done",
          "createdAt": "2019-02-27T11:41:44Z",
          "updatedAt": "2019-02-27T11:41:44Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "MDU6SXNzdWU0MDk0MDEyNTg=",
      "title": "DLEQ_Generate should take the secret key as an input",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/17",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-02-12T16:57:16Z",
      "updatedAt": "2019-02-13T14:26:29Z",
      "closedAt": "2019-02-13T14:26:29Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #18.",
          "createdAt": "2019-02-13T14:26:29Z",
          "updatedAt": "2019-02-13T14:26:29Z"
        }
      ]
    },
    {
      "number": 20,
      "id": "MDU6SXNzdWU0MTQ3Mjk3ODQ=",
      "title": "Rename document to draft-davidson-cfrg-oprf?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/20",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-02-26T17:27:47Z",
      "updatedAt": "2019-07-04T01:22:25Z",
      "closedAt": "2019-07-04T01:22:25Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "The ship has sailed!",
          "createdAt": "2019-07-04T01:22:25Z",
          "updatedAt": "2019-07-04T01:22:25Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "MDU6SXNzdWU0MjQ0MTM3NzU=",
      "title": "nit on reduction modulo p",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/27",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "At section 5.1.  DLEQ_Generate\r\n~~~\r\n4. s := (r - ck) (mod p)  \r\n~~~\r\nIt must be reduced modulo the order of the curve.\r\n",
      "createdAt": "2019-03-22T21:54:20Z",
      "updatedAt": "2020-01-30T17:51:43Z",
      "closedAt": "2020-01-30T17:51:43Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\r\nAt Section 5.1.  DLEQ_Generate,\r\n~~~\r\n3. c <- H_3(G,Y,M,Z,A,B)\r\n~~~\r\nand Section 5.2.  DLEQ_Verify:\r\n~~~\r\n3. c' <- H_3(G,Y,M,Z,A',B')\r\n~~~\r\nmust be reduced modulo the order of the curve.",
          "createdAt": "2019-03-22T22:05:29Z",
          "updatedAt": "2019-03-22T22:05:29Z"
        }
      ]
    },
    {
      "number": 28,
      "id": "MDU6SXNzdWU0NjQxMzU2OTE=",
      "title": "Replace additive vs multiplicative blinding terminology",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/28",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "From Hugo:\r\n```\r\nA note on terminology: additive vs multiplicative is problematic since in the\r\ncase of multiplicative notation this becomes multiplicative vs exponential with\r\nmultiplicative playing two different meanings. I thought maybe calling them\r\nFixed-base blinding (FBB) vs Variable-base blinding (VBB).\r\n```\r\ni.e. we should replace additive blinding with FBB, and multiplicative with VBB.",
      "createdAt": "2019-07-04T08:30:19Z",
      "updatedAt": "2019-07-05T13:45:07Z",
      "closedAt": "2019-07-05T13:45:07Z",
      "comments": []
    },
    {
      "number": 29,
      "id": "MDU6SXNzdWU0NjQxNDQ3Mjg=",
      "title": "Certified public key",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/29",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "In our protocol, the public key is `(G, Y)` where `Y = kG` for the Server's key `k`.\r\n\r\nFrom Hugo:\r\n\r\n```\r\nThe reason is that when Y is not certified (namely, the client gets it from the\r\nserver but cannot verify it - as in OPAQUE settings where the client does not\r\nstore Y), there are some \"attacks\" that we have identified that do not seem to\r\nhave a practical effect but suffice to show that the OPRF with additive blinding\r\ndoes not satisfy our UC definition of OPRF (this is noted in the OPAQUE paper). \r\nWe are working on this now to show that one can weaken the UC functionality to\r\naccept the additive blinding as secure and showing that this definition suffices\r\nfor OPAQUE. But we don't have the full results yet. The reason I prefer NOT to\r\ninclude Y under the hash is that if you do multiplicative blinding in the\r\nnon-verifiable case then you don't need Y at all, and if you are in a verifiable\r\ncase with certified Y then the \"attack\" does not work. Still, for the\r\nnon-certified Y case and additive blinding, the issue is not fully resolved. For\r\nOPAQUE I was hoping that by the time we standardize on it, we will have a better\r\nunderstanding of this issue and will be able to eliminate Y under the hash but\r\nnow it is a bit premature to have 100% confidence.\r\n```\r\n\r\nSo I think the way to resolve this is to either specify that `Y` is certified in the additive case, or we could include `Y` in the hash (i.e. compute `H(x,Y,H1(x)^k)`). It's true that we don't need to do this in the multiplicative case so maybe including in the hash is overkill, and we should just go with certification?\r\n\r\n@chris-wood for opinion.",
      "createdAt": "2019-07-04T08:49:04Z",
      "updatedAt": "2020-03-09T12:25:06Z",
      "closedAt": "2020-03-09T12:25:06Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure what the best way to tackle this is? It seems like quite an involved change and so maybe we should keep this open for a future issue?",
          "createdAt": "2019-07-08T10:29:02Z",
          "updatedAt": "2019-07-08T10:29:02Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry for the extreme delay, @alxdavids! I think including `Y` in the hash is a fine path forward. Even in the (non-verifiable) OPRF case, it seems strange to not include some representation of the server's public key. Can we do that?",
          "createdAt": "2020-03-05T22:48:48Z",
          "updatedAt": "2020-03-05T22:48:48Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Sure, that sounds fine to me. I'll write up the change.",
          "createdAt": "2020-03-06T11:25:29Z",
          "updatedAt": "2020-03-06T11:25:29Z"
        }
      ]
    },
    {
      "number": 30,
      "id": "MDU6SXNzdWU0NjQxNDUwNzU=",
      "title": "Correct sections",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/30",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Hugo noted that some of the Sections are incorrectly labelled.",
      "createdAt": "2019-07-04T08:49:47Z",
      "updatedAt": "2019-07-08T13:00:55Z",
      "closedAt": "2019-07-08T13:00:55Z",
      "comments": []
    },
    {
      "number": 31,
      "id": "MDU6SXNzdWU0NjQxNDY0OTc=",
      "title": "Clarify RSA blind signature scheme in intro",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/31",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "From Hugo:\r\n\r\n```\r\n> This schemes does not work with RSA. You cannot compute the inverse of r\r\n> without knowing the factorization of N. Chaum's scheme uses multiplicative\r\n> blinding (see my comments on this issue).  \r\n```\r\n\r\nMaybe we should just remove this section, it's probably not that helpful anyway?",
      "createdAt": "2019-07-04T08:52:56Z",
      "updatedAt": "2019-07-08T13:06:08Z",
      "closedAt": "2019-07-08T13:06:08Z",
      "comments": []
    },
    {
      "number": 32,
      "id": "MDU6SXNzdWU0NjQxNDgyODk=",
      "title": "Clean up security properties for OPRF",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/32",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "The pseudorandomness of the function dictates that it is unlinkable and non-malleable, so we can remove these properties. There are some other things that Hugo brought up:\r\n\r\n```\r\n   o  The output distribution of y = F(k, x) is indistinguishable from\r\n      the uniform distribution in the domain of the function F.\r\n\r\n> domain -> range\r\n\r\n> It is more general and \"more correct\" to define PRF as in the introduction\r\n> \"F is pseudorandom if the output y = F(k, x) is indistinguishable from\r\n> uniformly sampling any element in F's range for random choice of k.\"\r\n> From this all the properties you list follow (including the \"additional ones\")\r\n```\r\n\r\n```\r\n   Additionally, we require the following additional properties:\r\n\r\n> additional twice\r\n```\r\n\r\n```\r\n   o  Oblivious: P must learn nothing about V's input, and V must learn\r\n      nothing about P's private key.\r\n\r\n> Oblivious should include also \"P learns nothing about the output of the\r\n> function\". Formally, this is redundant but it is a very important consequence\r\n> of the definition and it is better to say it explicitly.\r\n```\r\n\r\n```\r\n   o  Verifiable: V must only complete execution of the protocol if it\r\n      can successfully assert that P used its secret key k.\r\n\r\n> \"used its key\" is a bit too vague. Maybe: if it can successfully assert that\r\n> the OPRF output V computes is correct with respect to the OPRF key k held by\r\n> P.\r\n```\r\n\r\n```\r\n   In practice, the notion of verifiability requires that P commits to\r\n   the key k before the actual protocol execution takes place.  Then V\r\n   verifies that P has used k in the protocol using this commitment.\r\n\r\n> We could add: Below we will refer to this commitment to k as a \"public key\".\r\n```",
      "createdAt": "2019-07-04T08:56:58Z",
      "updatedAt": "2019-07-08T16:51:09Z",
      "closedAt": "2019-07-08T16:51:09Z",
      "comments": []
    },
    {
      "number": 33,
      "id": "MDU6SXNzdWU0NjQxNDk3MDY=",
      "title": "Clarify generator description",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/33",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "We should clarify whether the generator `G` is fixed as part of the parameters of the group `GG`, or whether it is sampled randomly is specified as part of the OPRFs parameters. I would prefer the first.",
      "createdAt": "2019-07-04T08:59:46Z",
      "updatedAt": "2019-07-05T13:51:30Z",
      "closedAt": "2019-07-05T13:51:30Z",
      "comments": []
    },
    {
      "number": 34,
      "id": "MDU6SXNzdWU0NjQxNTEwODg=",
      "title": "OPRF_Sign -> OPRF_Eval",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/34",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "It may be more accurate to replace \"signing\" terminology with \"evaluation\". Signing is asymmetric terminology and so this may be confusing, since (V)OPRFs are essentially symmetric primitives.\r\n\r\nFrom Hugo:\r\n\r\n```\r\n   o  OPRF_Sign(k,M,h): Sign input M using secret key k to produce Z,\r\n      the input h is optional and equal to the cofactor of an elliptic\r\n      curve.  If h is not provided then it defaults to 1.\r\n\r\n> Using \"Sign\" may be confusing, especially in the non-verifiable OPRFs.\r\n> Maybe OPRF_Eval?  Signer/Verifier would be Server/Client (one can still \r\n> use signer/verifier in the context of V-OPRF).\r\n```",
      "createdAt": "2019-07-04T09:02:29Z",
      "updatedAt": "2019-07-05T13:46:59Z",
      "closedAt": "2019-07-05T13:46:59Z",
      "comments": []
    },
    {
      "number": 35,
      "id": "MDU6SXNzdWU0NjQxNTM1NzE=",
      "title": "Minor comments from Hugo",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/35",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Fix the following:\r\n```\r\n        Verifier              Prover\r\n     ------------------------------------\r\n        r <-$ GG\r\n\r\n> r is chosen randomly from GF(p) not GG\r\n\r\n        M = rH_1(x)\r\n                      M\r\n                   ------->\r\n                              Z = kM\r\n                              [D = DLEQ_Generate(k,G,Y,M,Z)]\r\n                     Z[,D]\r\n                   <-------\r\n       [b = DLEQ_Verify(G,Y,M,Z,D)]\r\n       N = Zr^(-1)\r\n\r\n > It may be a good idea to say explicitly that the inverse of r is modulo the\r\n > group order p.\r\n```\r\n```\r\n  l: Some suitable choice of key-length (e.g. as described in {{NIST}}).\r\n\r\n> {{NIST}} should be formatted as [ ]\r\n```\r\n```\r\n   Steps:\r\n\r\n    1. N := (1/r)Z\r\n\r\n> It was r^(-1) before - use same notation everwhere\r\n```\r\n```\r\n   If the client preprocesses values of the form rG, then computing\r\n\r\n> you don't need to pre-process values rG to get the computational advantage.\r\n> This comes from the cost of a fixed-base vs variable base exponentiation.\r\n> The only thing you need to pre-process is some tables for the specific G\r\n> (this applies to the public key if you have it and use it often).\r\n```\r\n```\r\n    1. A' := (sG + cY)\r\n    2. B' := (sM + cZ)\r\n    3. c' <- H_3(G,Y,M,Z,A',B')\r\n    4. Output c == c'\r\n\r\n> It may be prudent remarking that, as in the case of Schnorr/(EC)DSA, revealing\r\n> or reusing r lead to the leakage of the secret OPRF key k.\r\n```\r\n```\r\n   o  Proof verification is much more efficient, from 4m modular\r\n\r\n> I guess this should be 4n?\r\n\r\n      exponentiations to 2n+4.\r\n```\r\n```\r\nMoreover, it each key should be generated from a source of\r\n> remove 'it'\r\n   safe, cryptographic randomness.\r\n\r\n   Another critical aspect of this protocol is reliance on\r\n> Replace \"Another\" with \"A\" (rotation of k is good but not critical in general)\r\n```\r\n```\r\n   VOPRF sessions for a given user and thus compromises their privacy.\r\n\r\n> compromise (not compromises)\r\n```\r\n```\r\n   This VOPRF protocol is used by Privacy Pass system \r\n> add reference here\r\n```\r\n```\r\n   [SJKS17]   \"SPHINX, A Password Store that Perfectly Hides from\r\n              Itself\", n.d.,\r\n              <http://webee.technion.ac.il/%7Ehugo/sphinx.pdf>.\r\n> Replace with this URL:\r\n> https://eprint.iacr.org/2018/695.pdf\r\n```\r\n",
      "createdAt": "2019-07-04T09:08:00Z",
      "updatedAt": "2019-07-08T13:43:26Z",
      "closedAt": "2019-07-08T13:43:26Z",
      "comments": []
    },
    {
      "number": 36,
      "id": "MDU6SXNzdWU0NjQxNTQyODQ=",
      "title": "Replace PRNG with RO for batched proof",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/36",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "As Hugo notes:\r\n```\r\n 2. d1,...dn <- PRNG(seed,salt,info,n)\r\n\r\n> PRNGs inputs are just a seed, usually a secret one. There are no guarantees\r\n> about the pseudorandomness of the output for a public seed. Additional items\r\n> such as salt, info, n, are not accommodated at all in a PRNG. You could put\r\n> these under H_4 or use a (variable-length output) PRF instead of PRNG.\r\n> But also in the PRF case, non-secret key does not guarantee pseudorandomness.\r\n> What you seem to need is a RO which on inputs G,Y,[Mi,Zi],salt,info,n outputs \r\n> d1,...dn (is there a proof that batching is secure when both parties derive d_i\r\n> using a RO?)\r\n\r\n> Btw, independently of the above issues, if you let the prover choose the salt,\r\n> this can help him (at least in theory) to cheat - i.e., finding a set of\r\n> \"misleading\"  d's.\r\n```\r\nI think it will be easiest to introduce an additional RO `H_4` that handles the generation of `d1,...,d4` here.\r\n\r\nWe would also need to clarify the best instantiations for doing this, it may be that we stick with SHAKE-SHA256 and HKDF-Expand-SHA256 (this should also be clarified as we currently just say HKDF-256). The notion of the `salt` should be replaced with a domain separation label.",
      "createdAt": "2019-07-04T09:09:30Z",
      "updatedAt": "2019-07-08T13:18:31Z",
      "closedAt": "2019-07-08T13:18:31Z",
      "comments": []
    },
    {
      "number": 37,
      "id": "MDU6SXNzdWU0NjQxNTc1NTU=",
      "title": "Fix OPRF password applications",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/37",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "From Hugo:\r\n```\r\n   Examples of such password checkers already exist, for example:\r\n   [JKKX16], [JKK14] and [SJKS17].\r\n\r\n> The above papers do not propose a use for password checker. They do present\r\n> some important applications of OPRFs in the password domain: password-protected\r\n> storage [JKK14,JKKX16] and a password manager that secures passwords against \r\n> offline dictionary attacks even when the password store is compromised [SJKS17].\r\n\r\n> You may also want to note the OPRF functions presented here admit very\r\n> efficient threshold schemes where the key is shared between n servers, \r\n> t of which need to be broken into to compromise the OPRF, and where the key \r\n> never exists in a single place, neither during generation nor for computing \r\n> the OPRF function [JKKX17].\r\n> [JKKX17] TOPPSS: Cost-minimal Password-Protected Secret Sharing based on \r\n> Threshold OPRF https://eprint.iacr.org/2017/363.pdf\r\n```",
      "createdAt": "2019-07-04T09:16:21Z",
      "updatedAt": "2019-07-05T13:36:18Z",
      "closedAt": "2019-07-05T13:36:18Z",
      "comments": []
    },
    {
      "number": 50,
      "id": "MDU6SXNzdWU0OTk1MDk4OTQ=",
      "title": "Add to security considerations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/50",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "- We need to discuss the effectiveness of using OPRFs as an oracle for producing q-Strong-DH samples\r\n- Go into more depth on key rotation and how it can be used to prevent token hoarding\r\n- Discuss the impact on client privacy from having small or segregated user bases",
      "createdAt": "2019-09-27T15:27:25Z",
      "updatedAt": "2019-11-14T17:34:54Z",
      "closedAt": "2019-11-14T17:34:54Z",
      "comments": []
    },
    {
      "number": 51,
      "id": "MDU6SXNzdWU1MDAyNTQ3MzM=",
      "title": "Create new test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/51",
      "state": "OPEN",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "- OPRF evaluations for new ciphersuites\r\n- DLEQ evaluations\r\n- Batched DLEQ evaluations",
      "createdAt": "2019-09-30T12:48:12Z",
      "updatedAt": "2020-10-16T13:32:56Z",
      "closedAt": null,
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I've written a proof-of-concept implementation of draft-02 in Go here: https://github.com/alxdavids/voprf-poc. I can use this to generate test vectors for all of the different cases.",
          "createdAt": "2020-01-28T16:20:19Z",
          "updatedAt": "2020-01-28T16:20:19Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So, I think probably the POC in sage can generate the test vectors; but it needs some changes.",
          "createdAt": "2020-10-16T13:32:56Z",
          "updatedAt": "2020-10-16T13:32:56Z"
        }
      ]
    },
    {
      "number": 52,
      "id": "MDU6SXNzdWU1MDAyNjIxNjI=",
      "title": "Establish new ciphersuites",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/52",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Since OPRFs can be used to instantiate q-Strong-DH oracles, they are susceptible to attacks that reduce security by log_2(m), where m is the number of queries.\r\n\r\nWe should establish new ciphersuites that use underlying curves with > 128 bits of security (e.g. using Curve448) to protect against these attacks. Proposed ciphersuites:\r\n\r\nP384:\r\n```\r\n## ECVOPRF-P384-HKDF-SHA512:\r\n\r\n- GG: secp384r1 {{SEC2}}\r\n- H_1: P384-SHA512-ICART-RO {{I-D.irtf-cfrg-hash-to-curve}}\r\n  - label: voprf_h2c_p384\r\n- H_2: SHA512\r\n- H_3: SHA512\r\n- H_4: SHA512\r\n- H_5: HKDF-Expand-SHA512 {{RFC5869}}\r\n```\r\n\r\nCurve448:\r\n```\r\n## ECVOPRF-Curve448-HKDF-SHA512:\r\n\r\n- GG: curve448 {{RFC7748}}\r\n- H_1: curve448-SHA512-ICART-RO {{I-D.irtf-cfrg-hash-to-curve}}\r\n  - label: voprf_h2c_c448\r\n- H_2: SHA512\r\n- H_3: SHA512\r\n- H_4: SHA512\r\n- H_5: HKDF-Expand-SHA512 {{RFC5869}}\r\n```\r\n\r\nP521:\r\n```\r\n## ECVOPRF-P521-HKDF-SHA512:\r\n\r\n- GG: secp521r {{SEC2}}\r\n- H_1: P521-SHA512-SSWU-RO {{I-D.irtf-cfrg-hash-to-curve}}\r\n  - label: voprf_h2c_p521\r\n- H_2: SHA512\r\n- H_3: SHA512\r\n- H_4: SHA512\r\n- H_5: HKDF-Expand-SHA512 {{RFC5869}}\r\n```",
      "createdAt": "2019-09-30T13:01:29Z",
      "updatedAt": "2019-11-14T17:34:46Z",
      "closedAt": "2019-11-14T17:34:46Z",
      "comments": []
    },
    {
      "number": 53,
      "id": "MDU6SXNzdWU1MDAyNjQ4ODQ=",
      "title": "Domain separation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/53",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "We should add a section that provides clarity on the domain separation interface and how it is introduced to the OPRF.",
      "createdAt": "2019-09-30T13:06:18Z",
      "updatedAt": "2020-03-06T11:24:55Z",
      "closedAt": "2020-03-06T11:24:55Z",
      "comments": []
    },
    {
      "number": 54,
      "id": "MDU6SXNzdWU1MDAyNjg2MTE=",
      "title": "Protocol integration",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/54",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "We should add a section that discusses the OPRF API that should be used when using OPRFs as part of another protocol. We should present both descriptions and suggestions around how the functionality should be integrated.\r\n",
      "createdAt": "2019-09-30T13:12:53Z",
      "updatedAt": "2019-11-14T17:34:06Z",
      "closedAt": "2019-11-14T17:34:06Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "This was addressed in https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/57",
          "createdAt": "2019-11-14T17:34:04Z",
          "updatedAt": "2019-11-14T17:34:04Z"
        }
      ]
    },
    {
      "number": 56,
      "id": "MDU6SXNzdWU1MDI3MDM5MTk=",
      "title": "Better specification of batched DLEQ proof algorithm",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/56",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "We need to specify the random oracle instantiation in Section 6.3 more concretely.",
      "createdAt": "2019-10-04T15:31:50Z",
      "updatedAt": "2019-11-14T17:33:26Z",
      "closedAt": "2019-11-14T17:33:26Z",
      "comments": []
    },
    {
      "number": 58,
      "id": "MDU6SXNzdWU1MDQxNDMyNzk=",
      "title": "Allow specifying auxiliary data in OPRF_Finalize",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/58",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "We should modify the OPRF_Finalize procedure to run:\r\n\r\n```\r\ndk = H_2(lbl, x .. N)\r\ny = H_2(dk, aux)\r\n```\r\n\r\nwhere aux is arbitrary auxiliary data that is also stored by the client. This is closer to current implementations of the Privacy Pass protocol and likely to be useful in applications where there is a later redemption step that needs to be bound to specific request data.",
      "createdAt": "2019-10-08T16:17:00Z",
      "updatedAt": "2019-11-14T17:34:36Z",
      "closedAt": "2019-11-14T17:34:35Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "addressed in https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/60",
          "createdAt": "2019-11-14T17:34:35Z",
          "updatedAt": "2019-11-14T17:34:35Z"
        }
      ]
    },
    {
      "number": 62,
      "id": "MDU6SXNzdWU1NDUwMzg0MzM=",
      "title": "Batched algorithms for blinding/unblinding",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/62",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "We need to concretely lay out the modified versions of VOPRF_Blind and VOPRF_Unblind in the batched execution mode. We should also provide better instructions for modifying the protocol in Section 5.3.3.",
      "createdAt": "2020-01-03T15:27:57Z",
      "updatedAt": "2020-03-01T21:14:36Z",
      "closedAt": "2020-03-01T21:14:36Z",
      "comments": []
    },
    {
      "number": 66,
      "id": "MDU6SXNzdWU1NjE3ODE1MTk=",
      "title": "Fix sampling of DLEQ challenge",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/66",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "The sampling of the DLEQ challenge value (c) is currently performed as the output of a SHA-512 evaluation for all supported ciphersuites. However, in the case of P-521, this is incorrect, as the size of the field is 521 bits.\r\n\r\nWe should update the draft specification to output this challenge as the output of an HKDF-Expand so that we can expand the output arbirtarily to the required number of bytes.",
      "createdAt": "2020-02-07T17:45:59Z",
      "updatedAt": "2020-03-03T10:41:53Z",
      "closedAt": "2020-03-03T10:41:53Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "A similar discussion is currently running in the hash-to-curve draft. In there, the hash-to-field function is being designed.\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/issues/202",
          "createdAt": "2020-02-07T18:30:43Z",
          "updatedAt": "2020-02-07T18:30:43Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh It would be good to get consensus on the best approach once the discussion is concluded. Until then I've written a PR that just uses HKDF-Expand-SHA512 instead of sampling using SHA512.",
          "createdAt": "2020-02-10T11:40:35Z",
          "updatedAt": "2020-02-10T11:41:00Z"
        }
      ]
    },
    {
      "number": 76,
      "id": "MDU6SXNzdWU2MDk0MjExOTQ=",
      "title": "Improve VOPRF API",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/76",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "PrivacyPass, for example, requires clients to run Setup() and use its results, somehow. There isn't currently a clean API one can use for operating on this private key. We should spend some time here to make integration into other protocols simpler. ",
      "createdAt": "2020-04-29T23:05:27Z",
      "updatedAt": "2020-06-22T08:25:15Z",
      "closedAt": "2020-06-22T08:25:15Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is likely to be addressed in #91 ",
          "createdAt": "2020-06-02T14:59:34Z",
          "updatedAt": "2020-06-02T14:59:34Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "OPAQUE needs the following APIs:\r\n\r\n- GenerateKeyPair()\r\n- Blind(x)\r\n- Evaluate(k, M)\r\n- Unblind(r, Z)\r\n- Finalize(x, N, dst)\r\n- Serialize(x)\r\n- Decode(enc)\r\n\r\nWe don't have GenerateKeyPair(). I'll add that.  ",
          "createdAt": "2020-06-04T20:43:37Z",
          "updatedAt": "2020-06-04T20:43:48Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Would there be any room in OPAQUE to rename `GenerateKeyPair` to `KeyGen`? This is mostly because I think this is a nicer name, so no worries if not.",
          "createdAt": "2020-06-19T11:43:51Z",
          "updatedAt": "2020-06-19T11:43:51Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, that works for me. ",
          "createdAt": "2020-06-19T14:52:39Z",
          "updatedAt": "2020-06-19T14:52:39Z"
        }
      ]
    },
    {
      "number": 77,
      "id": "MDU6SXNzdWU2MTUwMDA0MTY=",
      "title": "Specify Serialize/Deserialize APIs",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/77",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "This will make integration in PrivacyPass (and elsewhere) much easier. For example, rather than say \"parse these opaque bytes and turn them into curve points,\" for example, we can say \"element = Deserialize(bytes).\" In general, the more we can hide curve details from higher-level documents, the better.",
      "createdAt": "2020-05-08T21:37:27Z",
      "updatedAt": "2020-06-04T20:08:25Z",
      "closedAt": "2020-06-04T20:08:25Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agree, each group must specify how to encode/decode group elements into binary strings.",
          "createdAt": "2020-05-29T00:47:16Z",
          "updatedAt": "2020-05-29T00:47:16Z"
        }
      ]
    },
    {
      "number": 79,
      "id": "MDU6SXNzdWU2MjY4OTUyODY=",
      "title": "Specify domain-separated hashes",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/79",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "By following the recommendations given in the hash to curve draft, this draft must specify how to domain-separate all the hash functions required.\r\n",
      "createdAt": "2020-05-28T23:44:46Z",
      "updatedAt": "2020-06-22T14:54:09Z",
      "closedAt": "2020-06-22T14:54:09Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Seems related to #89 and #83, @chris-wood would you be able to take this one as well?",
          "createdAt": "2020-06-03T10:03:57Z",
          "updatedAt": "2020-06-03T10:03:57Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "We need to make sure the hashes are handled correctly for the proof cases",
          "createdAt": "2020-06-18T14:25:09Z",
          "updatedAt": "2020-06-18T14:25:09Z"
        }
      ]
    },
    {
      "number": 80,
      "id": "MDU6SXNzdWU2MjY5MTc0NDY=",
      "title": "Unifies the name of actors V and P to longer names",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/80",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "V and P refer to the participants of a zero-knowledge proofs. Consider give a more familiar name to this actors, Verifier/Prover, Victor/Peggy\r\n",
      "createdAt": "2020-05-29T00:31:58Z",
      "updatedAt": "2020-06-05T14:13:21Z",
      "closedAt": "2020-06-05T14:13:21Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I think expanding to their full titles is fine. I'm personally against using human names for protocol participants, but I'm willing to reconsider if it is believed that is a much better way of representing them.",
          "createdAt": "2020-06-02T14:58:44Z",
          "updatedAt": "2020-06-02T14:58:44Z"
        }
      ]
    },
    {
      "number": 81,
      "id": "MDU6SXNzdWU2MjY5MTgyNTc=",
      "title": "Improve group properties and descriptions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/81",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "This document requires the use of prime-order groups.\r\nThe document does not emphasize how to generate these groups nor how to choose them between some existing groups.\r\n\r\n",
      "createdAt": "2020-05-29T00:34:37Z",
      "updatedAt": "2020-06-04T20:08:25Z",
      "closedAt": "2020-06-04T20:08:25Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Also need to remove all elliptic-curve specific notation outside of ciphersuite specification and recommendations for instantiating a prime-order group.",
          "createdAt": "2020-05-29T11:04:17Z",
          "updatedAt": "2020-05-29T11:04:17Z"
        }
      ]
    },
    {
      "number": 82,
      "id": "MDU6SXNzdWU2MjY5MTg4OTk=",
      "title": "Key Generation for Prover",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/82",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Currently, the Prover's key `k` is calculated during the Setup phase. \r\nUsually, the setup phase happens in a public environment.\r\nThen, there is required a GenerateKey step only for the Prover.",
      "createdAt": "2020-05-29T00:36:50Z",
      "updatedAt": "2020-06-04T20:08:26Z",
      "closedAt": "2020-06-04T20:08:26Z",
      "comments": []
    },
    {
      "number": 83,
      "id": "MDU6SXNzdWU2MjY5MTk4MjE=",
      "title": "aux additional data",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/83",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "If the only purpose of `aux` additional info is to provide domain separation, then this can be re-engineered and unified together with the other hash functions. Related #79 \r\n\r\n",
      "createdAt": "2020-05-29T00:39:43Z",
      "updatedAt": "2020-06-18T14:24:27Z",
      "closedAt": "2020-06-18T14:24:27Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "_Originally posted by @chris-wood in https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/78_\r\nShould we unify around DST instead of `aux`?\r\n\r\n",
          "createdAt": "2020-06-01T17:08:58Z",
          "updatedAt": "2020-06-01T17:08:58Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we need multiple DSTs. One for the DLEQ proof generation, and then `aux`. However, I think capturing all DST usages under a specific set of guidelines makes sense. The only difference is that Finalize depends on client properties, where as the DLEQ DST should probably be fixed (to something VOPRF ciphersuite-specific) so that the client & server are in agreement.",
          "createdAt": "2020-06-02T14:49:56Z",
          "updatedAt": "2020-06-02T14:49:56Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Assigning to @chris-wood to do as it is related to #89",
          "createdAt": "2020-06-03T10:03:06Z",
          "updatedAt": "2020-06-03T10:03:06Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Done: #102 ",
          "createdAt": "2020-06-18T14:24:27Z",
          "updatedAt": "2020-06-18T14:24:27Z"
        }
      ]
    },
    {
      "number": 84,
      "id": "MDU6SXNzdWU2MjY5MjEwMTk=",
      "title": "Define parameters based on the security parameter",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/84",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Define group parameters based on the security parameter.\r\n\r\n",
      "createdAt": "2020-05-29T00:43:51Z",
      "updatedAt": "2020-06-05T14:35:24Z",
      "closedAt": "2020-06-05T14:35:24Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I would like to remove mention of the security parameter altogether.",
          "createdAt": "2020-06-02T14:30:44Z",
          "updatedAt": "2020-06-02T14:30:44Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Curious to see these changes.",
          "createdAt": "2020-06-02T17:26:14Z",
          "updatedAt": "2020-06-02T17:26:14Z"
        }
      ]
    },
    {
      "number": 85,
      "id": "MDU6SXNzdWU2MjY5MjI2MDM=",
      "title": "Unify DLEQ for n>=1 or n>=0.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/85",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "I was curious if there is a way to unify the description of DLEQ for n>=1, or even for n>=0.\r\nIf this will be possible, we end up with a single set of algorithms, so a shorter description. \r\n",
      "createdAt": "2020-05-29T00:49:42Z",
      "updatedAt": "2020-06-04T20:08:25Z",
      "closedAt": "2020-06-04T20:08:25Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "We could unify the algorithms, but the specific DLEQ algorithm for n=1 is much more efficient than running batched DLEQ for n>=1. So it depends if we want to preserve that efficiency in the n=1 case. I agree that unifying for simplicity's sake would be nice.",
          "createdAt": "2020-05-29T10:58:29Z",
          "updatedAt": "2020-05-29T10:58:29Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "One way to unify is avoiding the calculation of the scalar multiplication by c1.",
          "createdAt": "2020-05-29T18:04:31Z",
          "updatedAt": "2020-05-29T18:04:31Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmmm good idea, we could also just set `c1 = 1` in the n=1 case. Let me investigate further.",
          "createdAt": "2020-06-01T12:38:14Z",
          "updatedAt": "2020-06-01T12:38:14Z"
        }
      ]
    },
    {
      "number": 86,
      "id": "MDU6SXNzdWU2MjY5MjUzODY=",
      "title": "Allowing blinding variants?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/86",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "the document mentioned two blinding methods: rH1(x) and rG+H1(x). \r\nHowever, it wasn't mentioned which one to use at suite level.",
      "createdAt": "2020-05-29T00:59:34Z",
      "updatedAt": "2020-06-18T14:23:51Z",
      "closedAt": "2020-06-18T14:23:51Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh is that something we need to bake into a suite? I'm not so sure. It seems like an implementation detail to me.",
          "createdAt": "2020-06-01T15:21:08Z",
          "updatedAt": "2020-06-01T15:21:08Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My understanding is that defining a suite implies test vectors, which implies that everyone must follow the same procedure.\r\nSo, almost every variant in the construction introduces a parameter in the suite.\r\n",
          "createdAt": "2020-06-01T16:52:27Z",
          "updatedAt": "2020-06-01T16:52:27Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "The test vectors for the output of the protocol do not depend on the blinding method. However, the test vectors for the proof values will be different as they are evaluated over whatever the client sends. \r\n\r\nI would rather not state the blinding method as part of the suite though. I think it may be better to also implement fixed-base blinding as part of the proof-of-concept implementation, and then specify proof values for both blinding types.",
          "createdAt": "2020-06-02T14:47:40Z",
          "updatedAt": "2020-06-03T10:06:29Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That means the proof must encode which blinding is used ?",
          "createdAt": "2020-06-02T17:15:53Z",
          "updatedAt": "2020-06-02T17:15:53Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "(originally thought that I had replied by email, but it seems that it didn't make it here)\r\n\r\nNo, the proof test vector values will change because the client inputs will change. The proof doesn't care what blinding is used.",
          "createdAt": "2020-06-03T10:05:05Z",
          "updatedAt": "2020-06-03T10:05:33Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I got it now. The blinding method is orthogonal to the suite used.",
          "createdAt": "2020-06-03T17:29:51Z",
          "updatedAt": "2020-06-03T17:29:51Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, I'm going to close this as its an implementation detail.",
          "createdAt": "2020-06-18T14:23:51Z",
          "updatedAt": "2020-06-18T14:23:51Z"
        }
      ]
    },
    {
      "number": 87,
      "id": "MDU6SXNzdWU2MjcxODQ5MTI=",
      "title": "Replace mention of security parameter with ciphersuite ID",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/87",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Currently the Setup algorithm takes a security parameter as input indicating the size of the group that is used. We should replace this with an identifier indicating which ciphersuite to use.",
      "createdAt": "2020-05-29T11:01:50Z",
      "updatedAt": "2020-06-05T14:35:12Z",
      "closedAt": "2020-06-05T14:35:12Z",
      "comments": []
    },
    {
      "number": 88,
      "id": "MDU6SXNzdWU2MjcxODc4OTM=",
      "title": "Remove OPRF Setup phase of protocol",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/88",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Just mention that the server should run whatever it needs to and then publishes the results publicly.",
      "createdAt": "2020-05-29T11:07:42Z",
      "updatedAt": "2020-06-04T20:08:26Z",
      "closedAt": "2020-06-04T20:08:26Z",
      "comments": []
    },
    {
      "number": 89,
      "id": "MDU6SXNzdWU2Mjg1MTM0ODU=",
      "title": "Finalize is underspecified",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/89",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "Finalize uses `H_2` like so:\r\n\r\n```\r\nH_2(DST, x .. N)\r\n```\r\n\r\nThe reference implementation basically uses `DST` as a keyed hash, yet we define it as a hash function. Maybe we should just say this is a PRF, and then concretely say it's HMAC-H (with H depending on the suite) keyed by `DST`? (That works fine for HMAC as it's a dualPRF, but perhaps not other PRFs, so I might suggest swapping the input orders.)\r\n\r\nAlso, for what it's worth, 2HashDH doesn't require H_2 to be a PRF, so maybe this is a bit much. Maybe we should just use a normal hash (SHA2) and define an encoding of the inputs?",
      "createdAt": "2020-06-01T15:09:05Z",
      "updatedAt": "2020-06-18T14:22:13Z",
      "closedAt": "2020-06-18T14:22:13Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "_Originally posted by @chris-wood in https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/78_\r\n> Unrelated to this change, but what is `u` here? Is DST guaranteed to be of size `u`? (2HashDH doesn't specify the hash this way. Maybe we ought to go back to what's in the original paper?)\r\n\r\n",
          "createdAt": "2020-06-01T17:08:16Z",
          "updatedAt": "2020-06-01T17:08:16Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "This was done #97",
          "createdAt": "2020-06-18T14:22:12Z",
          "updatedAt": "2020-06-18T14:22:12Z"
        }
      ]
    },
    {
      "number": 90,
      "id": "MDU6SXNzdWU2Mjg1OTUyMDU=",
      "title": "Consider to add a table of groups and their parameters",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/90",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "_Originally posted by @chris-wood in https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/78_\r\n\r\nShould we include a table that lists the group (name) and its parameters, e.g., the generator, base field prime order, etc.?\r\n",
      "createdAt": "2020-06-01T17:10:08Z",
      "updatedAt": "2020-06-24T08:42:17Z",
      "closedAt": "2020-06-24T08:42:17Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood This is actually going to be pretty difficult due to the trade-offs that can be chosen with the static DH oracle. Essentially, due to Brown-Gallant & Cheon the strength of breaking DLP is:\r\n![image](https://user-images.githubusercontent.com/7470539/85149143-db02ba80-b248-11ea-9921-d816bde109aa.png)\r\n(taken from Section 21.5 of https://www.math.auckland.ac.nz/~sgal018/crypto-book/main.pdf). This translates, for example, to:\r\n![image](https://user-images.githubusercontent.com/7470539/85149258-fc63a680-b248-11ea-9ca2-357b2b995feb.png)\r\nBut each curve comes with its own `r-1` factors. There are also variants of the attack that can be done for `r+1`, see this email for a good summary: https://mailarchive.ietf.org/arch/msg/cfrg/YDVS5Trpr6suig_VCFEOH6SOn8Q/.\r\n\r\nThe problem is that for each curve we can choose different trade-offs based on the factor itself. For example, if you can tolerate more queries you can choose a bigger factor and the group loses more security. But if this query tolerance is stricter, then the amount of security loss is also restricted. With all of this in mind, and because there are so many combinations of factors for each of the curves. I think the table here would be too complex to offer much value.\r\n\r\nWhat do you think?\r\n\r\ncc @armfazh  also.",
          "createdAt": "2020-06-19T15:25:36Z",
          "updatedAt": "2020-06-19T15:34:40Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "FWIW, I think this could be a separate CFRG draft",
          "createdAt": "2020-06-19T15:35:18Z",
          "updatedAt": "2020-06-19T15:35:18Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> FWIW, I think this could be a separate CFRG draft\r\n\r\nThat's an interesting idea -- is this something you and Taylor could work on?",
          "createdAt": "2020-06-19T15:39:40Z",
          "updatedAt": "2020-06-19T15:39:40Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think I visualize the table yet, so I can't speak to its supposed complexity, but you do make a compelling argument against it :-) How about we just keep the static DH oracle section separate and point to it from the ciphersuite section? That is, each ciphersuite could list the effective security level in the absence of these oracles, but then we point to another section which explains the oracle problem.",
          "createdAt": "2020-06-19T15:41:40Z",
          "updatedAt": "2020-06-19T15:41:40Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "> That's an interesting idea -- is this something you and Taylor could work on?\r\n\r\nI think that's something I can definitely explore.\r\n\r\n> I don't think I visualize the table yet, so I can't speak to its supposed complexity, but you do make a compelling argument against it :-) How about we just keep the static DH oracle section separate and point to it from the ciphersuite section? That is, each ciphersuite could list the effective security level in the absence of these oracles, but then we point to another section which explains the oracle problem.\r\n\r\nYeah I think that will probably be the best approach. I'll write a candidate PR.",
          "createdAt": "2020-06-19T15:44:41Z",
          "updatedAt": "2020-06-19T15:44:41Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, let's keep it simple. The purpose of listing the groups is to have a clear vision of all the parameters involved. Listing the security level is probably not required. We are adopting state-of-the-art group instances with well-known security bounds.\r\n  \r\nI think Section 7.1.4 gives a good explantion of security levels without going into the details.",
          "createdAt": "2020-06-19T21:48:26Z",
          "updatedAt": "2020-06-19T21:48:26Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "This will be fixed in #121 ",
          "createdAt": "2020-06-23T09:29:41Z",
          "updatedAt": "2020-06-23T09:29:41Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "#121 was merged, so I don't think we have to worry any more about this.",
          "createdAt": "2020-06-24T08:42:17Z",
          "updatedAt": "2020-06-24T08:42:17Z"
        }
      ]
    },
    {
      "number": 94,
      "id": "MDU6SXNzdWU2MzExMTE0NTU=",
      "title": "Use consistent casing ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/94",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/91#discussion_r435514276",
      "createdAt": "2020-06-04T20:06:33Z",
      "updatedAt": "2020-06-19T15:37:29Z",
      "closedAt": "2020-06-19T15:37:29Z",
      "comments": []
    },
    {
      "number": 95,
      "id": "MDU6SXNzdWU2MzExMTIxODQ=",
      "title": "Do not require serialization when publishing keys",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/95",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/91#discussion_r435516340",
      "createdAt": "2020-06-04T20:07:21Z",
      "updatedAt": "2020-06-18T14:17:30Z",
      "closedAt": "2020-06-18T14:17:30Z",
      "comments": []
    },
    {
      "number": 100,
      "id": "MDU6SXNzdWU2Mzk3MDgwNjg=",
      "title": "Add prime-order group instantiation advice for ciphersuites",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/100",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2020-06-16T14:20:23Z",
      "updatedAt": "2020-06-24T08:41:37Z",
      "closedAt": "2020-06-24T08:41:37Z",
      "comments": []
    },
    {
      "number": 101,
      "id": "MDU6SXNzdWU2Mzk3MzE2Mzk=",
      "title": "Compressed or uncompressed point encoding?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/101",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Should we support both, or just one?",
      "createdAt": "2020-06-16T14:50:43Z",
      "updatedAt": "2020-06-19T16:14:02Z",
      "closedAt": "2020-06-19T16:14:02Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's pick only one per ciphersuite, and let's be consistent across ciphersuites. I prefer the uncompressed format, if only because that's what other standards tend to use (TLS, HPKE, etc). ",
          "createdAt": "2020-06-16T15:04:00Z",
          "updatedAt": "2020-06-16T15:04:00Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "We'll go with compressed based on conversation, will change sage serialization code.",
          "createdAt": "2020-06-18T14:08:44Z",
          "updatedAt": "2020-06-18T14:08:44Z"
        }
      ]
    },
    {
      "number": 103,
      "id": "MDU6SXNzdWU2NDA0NDgxMzM=",
      "title": "Add verifiable support to Sage PoC",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/103",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "I'm not sure if we should also include batch support. @alxdavids, what do you think?",
      "createdAt": "2020-06-17T13:34:30Z",
      "updatedAt": "2020-08-07T17:01:26Z",
      "closedAt": "2020-08-07T17:01:26Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it would make sense to have batch support in there because the algorithms have been consolidated into a single description now",
          "createdAt": "2020-06-17T15:26:08Z",
          "updatedAt": "2020-06-17T15:26:08Z"
        }
      ]
    },
    {
      "number": 109,
      "id": "MDU6SXNzdWU2NDIyMzU1MDY=",
      "title": "Deserialization can fail",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/109",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Warn the reader that deserialization can return error if the input bytes does not correspond to a valid group element.\r\n\r\n",
      "createdAt": "2020-06-19T21:55:19Z",
      "updatedAt": "2020-06-24T08:55:08Z",
      "closedAt": "2020-06-24T08:55:08Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Not sure we need this caveat because SEC1/RFC7748 defines the correct syntax for serialization. If you deviate from this syntax then you're not compliant. What do you think @chris-wood?",
          "createdAt": "2020-06-22T09:02:33Z",
          "updatedAt": "2020-06-22T09:02:33Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think what is missing is alerting the reader/implementor that deserialization can fail, and if this happen, the protocol cannot continue. ",
          "createdAt": "2020-06-22T18:15:31Z",
          "updatedAt": "2020-06-22T18:15:31Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I take it to mean, if you're not compliant with everything in the doc (including refs), then the protocol will fail. In my opinion, this can be left implicit.",
          "createdAt": "2020-06-23T08:40:26Z",
          "updatedAt": "2020-06-23T08:40:26Z"
        }
      ]
    },
    {
      "number": 110,
      "id": "MDU6SXNzdWU2NDIyMzc2MjU=",
      "title": "Unifying pseudo-code style",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/110",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "1 ) There are many functions following an object-oriented design, I don't know if this helps as the only \"object\" is GG.\r\n\r\n2) The style of pseudo-code is sometimes python, other times Go/rust, I consider is better to use C-style pseudo-code. \r\n\r\n3) Enumeration of substeps, for example:\r\n\r\n~~~\r\n 4.     if x = 0 \r\n 4.1        foo()\r\n 4.2        foo() \r\n 5.     bar() \r\n~~~\r\n",
      "createdAt": "2020-06-19T22:01:16Z",
      "updatedAt": "2020-06-25T12:59:37Z",
      "closedAt": "2020-06-25T12:59:37Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Would you be able to highlight some particular examples for where you are thinking things should change? It's not exactly clear to me what you are referring to with these points? FWIW, I'm not super worried about the pseudocode at the moment, I think it's clear enough.",
          "createdAt": "2020-06-22T09:01:38Z",
          "updatedAt": "2020-06-22T09:01:38Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This issue is not one of the higher relevance, but still it could be difficult to grasp for someone who never coded in modern languages. It's is desired that specification be easy to read for anyone.  \r\n\r\nLoops\r\n``` 3. for i = 0 to m:```  vs ``` 2. for i in 1..m:``` vs ``` for i in [ins.length]: ```\r\n\r\nThe first is go/rust syntax, while the second one is more similar to C structs.\r\n`Ev = Evaluation{ elements: elements }` and `2. Ev.proof = proof`\r\n\r\nthe `elements` starts empty.\r\n\r\n```\r\n1. elements = []\r\n2. for i in 1..m:\r\n    2.3. elements[i] = GG.Serialize(Z)\r\n```\r\n",
          "createdAt": "2020-06-22T18:13:05Z",
          "updatedAt": "2020-06-22T18:28:18Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "The change in #122 makes an attempt at clarity.",
          "createdAt": "2020-06-22T23:00:35Z",
          "updatedAt": "2020-06-22T23:00:35Z"
        }
      ]
    },
    {
      "number": 111,
      "id": "MDU6SXNzdWU2NDIyNDAwNjc=",
      "title": "The field of scalars can be confused with the field of elliptic curve defiinition.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/111",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "The field of scalars can be confused with the field of elliptic curve defiinition. \r\n\r\nOn the one hand, this happens because the document uses the notation GF(p) for the set of possible scalars that is the same for elliptic curve field definition. The document is correct, however this is a source of consfusion for those not familiar with the math behind groups and curves.\r\n\r\nOne possible way to solve this is that the document mention that scalars are chosen from the set `{1, ..., p-1}`. Additionally, one can use `r` as the variable to denote the group order instead of `p`. \r\n\r\nOn the other hand, scalars living in GF(p) is not accurate, because elliptic curve groups do multiplication by integer scalars. \r\n ",
      "createdAt": "2020-06-19T22:09:41Z",
      "updatedAt": "2020-06-22T16:30:00Z",
      "closedAt": "2020-06-22T16:30:00Z",
      "comments": []
    },
    {
      "number": 112,
      "id": "MDU6SXNzdWU2NDIyNDA4ODM=",
      "title": "use endianness definition",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/112",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Sometimes it is used network-byte order. A better way to describe ordering is using little- and big-endian. Note that in the ciphersuite section LE and BE are used instead of network-byte order.\r\n",
      "createdAt": "2020-06-19T22:12:12Z",
      "updatedAt": "2020-06-22T15:41:00Z",
      "closedAt": "2020-06-22T15:41:00Z",
      "comments": []
    },
    {
      "number": 113,
      "id": "MDU6SXNzdWU2NDIyNDE2NDQ=",
      "title": "Bits indicating verifiablity support",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/113",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "> Both participants also provide a boolean input vv and vp for the Client and Server respectively.  These boolean values should be equal, and correspond to whether the protocol is executed with verifiability intended, or not. In other words, whether the functionality computes an OPRF protocol (vv = vp = 0), or a VOPRF protocol (vv = vp = 1). If vv = 1 && vp = 0, then the protocol will abort in Unblind when the client attempts to verify the zero-knowledge proof.\r\n\r\nI think the bits are not required since they come from the ciphersuite definition, so they are constant domain parameters.",
      "createdAt": "2020-06-19T22:14:33Z",
      "updatedAt": "2020-06-22T15:42:45Z",
      "closedAt": "2020-06-22T15:42:45Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "This is true, but I think we'll need to then pass around ciphersuite identifiers into the algorithms so we can check this?",
          "createdAt": "2020-06-22T08:42:57Z",
          "updatedAt": "2020-06-22T08:42:57Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay I've just removed them and replaced with a global `verifiable` variable",
          "createdAt": "2020-06-22T08:50:05Z",
          "updatedAt": "2020-06-22T08:50:05Z"
        }
      ]
    },
    {
      "number": 114,
      "id": "MDU6SXNzdWU2NDIyNDE4NzU=",
      "title": "Unify between sequence of bytes, array of bytes, byte arrays",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/114",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Unify between sequence of bytes, array of bytes, byte arrays",
      "createdAt": "2020-06-19T22:15:18Z",
      "updatedAt": "2020-06-22T18:33:29Z",
      "closedAt": "2020-06-22T16:28:52Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's go with byte arrays",
          "createdAt": "2020-06-22T08:40:47Z",
          "updatedAt": "2020-06-22T08:40:47Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": " `byte arrays` is singular or plural?",
          "createdAt": "2020-06-22T18:33:29Z",
          "updatedAt": "2020-06-22T18:33:29Z"
        }
      ]
    },
    {
      "number": 115,
      "id": "MDU6SXNzdWU2NDIyNDI1NjQ=",
      "title": "Section 4.3 uses undefined values",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/115",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Section 4.3 is difficult to understand as there are many undefined variables. The protocol data-flow looks clean and simple, however there are many variables that are not stated its purpose nor its domain.\r\n\r\n",
      "createdAt": "2020-06-19T22:17:22Z",
      "updatedAt": "2020-06-23T08:38:54Z",
      "closedAt": "2020-06-23T08:38:53Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Do you mean in the diagram? This is all explained in the following section. I guess we could move the protocol to after the algorithm descriptions though? What do you think @chris-wood? I personally prefer to have it this way around to put more emphasis on the protocol data flow and not worry so much about the algorithm implementation.",
          "createdAt": "2020-06-22T08:40:16Z",
          "updatedAt": "2020-06-22T08:40:16Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree -- I think having the protocol flow abstraction up front helps.",
          "createdAt": "2020-06-22T16:41:59Z",
          "updatedAt": "2020-06-22T16:41:59Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, let's leave it as it is for now.",
          "createdAt": "2020-06-23T08:38:53Z",
          "updatedAt": "2020-06-23T08:38:53Z"
        }
      ]
    },
    {
      "number": 116,
      "id": "MDU6SXNzdWU2NDIyNDI3Nzk=",
      "title": "Definition of H2",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/116",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "H2 might be better defined as H2(x) = OS2IP(H(x)) mod p. \r\nThis avoids rejection sampling on Section 5.3",
      "createdAt": "2020-06-19T22:18:04Z",
      "updatedAt": "2020-06-25T12:59:27Z",
      "closedAt": "2020-06-25T12:59:27Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Doesn't this introduce bias if you get a value that's greater than p from H?",
          "createdAt": "2020-06-22T07:40:15Z",
          "updatedAt": "2020-06-22T07:40:29Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "We should just use hash-to-field from the hash-to-curve document (for all groups considered). I don't see why we'd reinvent the wheel here. :-)",
          "createdAt": "2020-06-22T16:41:25Z",
          "updatedAt": "2020-06-22T16:41:25Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> We should just use hash-to-field from the hash-to-curve document (for all groups considered). I don't see why we'd reinvent the wheel here. :-)\r\n\r\nAgree",
          "createdAt": "2020-06-22T18:45:42Z",
          "updatedAt": "2020-06-22T18:45:42Z"
        }
      ]
    },
    {
      "number": 124,
      "id": "MDU6SXNzdWU2NDU4MDY2MDE=",
      "title": "Inconsistencies in Evaluate pseudo-code",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/124",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\r\nhttps://github.com/cfrg/draft-irtf-cfrg-voprf/blob/73492d2727115a7591a3d340e31f0565465348a7/draft-irtf-cfrg-voprf.md#L662-L675\r\n\r\n1) Why `Ev` is passed as input to `Evaluate`?\r\n2) Why `Ev` is passed to `generate_proof`, if it wasn't constructed yet?\r\n",
      "createdAt": "2020-06-25T19:42:11Z",
      "updatedAt": "2020-06-26T11:29:49Z",
      "closedAt": "2020-06-26T11:29:49Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Good catch - it shouldn't be. Can you please remove that in your PR?",
          "createdAt": "2020-06-25T21:51:35Z",
          "updatedAt": "2020-06-25T21:51:35Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok, I can work on that fix.",
          "createdAt": "2020-06-25T22:20:56Z",
          "updatedAt": "2020-06-25T22:20:56Z"
        }
      ]
    },
    {
      "number": 126,
      "id": "MDU6SXNzdWU2NDU4NTY1NjQ=",
      "title": "Undefined x variable",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/126",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "What is `x` in these functions?\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-voprf/blob/73492d2727115a7591a3d340e31f0565465348a7/draft-irtf-cfrg-voprf.md#L784-L786\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-voprf/blob/73492d2727115a7591a3d340e31f0565465348a7/draft-irtf-cfrg-voprf.md#L1415-L1417\r\n",
      "createdAt": "2020-06-25T21:17:17Z",
      "updatedAt": "2020-06-26T13:57:31Z",
      "closedAt": "2020-06-26T13:57:31Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Should be `inputs[i]`",
          "createdAt": "2020-06-26T08:38:41Z",
          "updatedAt": "2020-06-26T08:38:41Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I fixed this with a direct push to master. ",
          "createdAt": "2020-06-26T13:57:31Z",
          "updatedAt": "2020-06-26T13:57:31Z"
        }
      ]
    },
    {
      "number": 133,
      "id": "MDU6SXNzdWU2NTY4NDQ4MzI=",
      "title": "Optimization of ComputeComposites at server-side.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/133",
      "state": "OPEN",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The following is an optimization for `ComputeComposites` function when\r\nexecuted at the server-side. The savings reduce by half the number of\r\nscalar multiplications (group exponentiations).\r\n\r\nFull details at https://mailarchive.ietf.org/arch/msg/cfrg/dt8TUtTD-JVgVxjpEL9lz5wUTb8/",
      "createdAt": "2020-07-14T19:26:04Z",
      "updatedAt": "2020-11-03T22:13:55Z",
      "closedAt": null,
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'll add this first to the POC to see that everything works nicely, and then add to the draft. I'll add the note here also that this is *only for the server side*.",
          "createdAt": "2020-10-20T14:27:29Z",
          "updatedAt": "2020-10-20T14:27:29Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh can you please send a PR with this change, and update the Sage implementation to match?",
          "createdAt": "2020-11-03T22:13:54Z",
          "updatedAt": "2020-11-03T22:13:54Z"
        }
      ]
    },
    {
      "number": 135,
      "id": "MDU6SXNzdWU2NzQ2NDc3Mzg=",
      "title": "Add implementation details for HashToScalar",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/135",
      "state": "CLOSED",
      "author": "tatianab",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Expand on bullet point about HashToScalar function, including required security properties (if any) and pointers to example implementation details",
      "createdAt": "2020-08-06T22:59:14Z",
      "updatedAt": "2020-09-09T10:39:01Z",
      "closedAt": "2020-09-09T10:39:01Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh, can you please take this one?",
          "createdAt": "2020-08-18T23:30:30Z",
          "updatedAt": "2020-08-18T23:30:30Z"
        }
      ]
    },
    {
      "number": 139,
      "id": "MDU6SXNzdWU2ODg5NzYzOTU=",
      "title": "Include SerializedScalar type",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/139",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There is a distinction between group elements (a point on the curve) and serialized elements (its compact representation).\r\nAnalogously, we can refer as SerializedScalar to the short (mod p) representation of an integer scalar.\r\n\r\ntodo(armfazh): I can create a PR to the draft for this request.",
      "createdAt": "2020-08-31T07:15:24Z",
      "updatedAt": "2020-09-10T18:53:07Z",
      "closedAt": "2020-09-10T18:53:07Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure I see the benefit of having this type, but let's see what the PR looks like.",
          "createdAt": "2020-08-31T14:59:17Z",
          "updatedAt": "2020-08-31T14:59:17Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm also not sure that we need this, I think we can move between the representations without being too descriptive for scalars.",
          "createdAt": "2020-09-09T10:36:14Z",
          "updatedAt": "2020-09-09T10:36:14Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "After thinking more on it, it's not necessary. ",
          "createdAt": "2020-09-10T18:53:07Z",
          "updatedAt": "2020-09-10T18:53:07Z"
        }
      ]
    },
    {
      "number": 140,
      "id": "MDU6SXNzdWU2OTQ1MjI5ODY=",
      "title": "Please consider renaming Evaluate() to Contribute()",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/140",
      "state": "CLOSED",
      "author": "stef",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "`Contribute` describes the semantics better than the generic `Evaluate` name.\r\n\r\nsee the discussion here: https://github.com/cfrg/draft-irtf-cfrg-opaque/issues/53",
      "createdAt": "2020-09-06T20:46:58Z",
      "updatedAt": "2020-09-16T13:35:38Z",
      "closedAt": "2020-09-16T13:35:38Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi @stef, thanks for bringing this up. I've taken a look at the discussion. I'm not massively supportive of renaming the Server's participation to `Contribute`. I can see what you mean, because this is a protocol that both participants combine to evaluate a PRF. However, theoretically-speaking, it's the Server that essentially computes the underlying PRF itself. The client specifies an input and then just does some pre-processing and public operations. This is why we currently use `Evaluate`. Moreover, I don't think `Contribute` really conveys the fact that the server is performing a secret-key operation. cc @chris-wood to see what he thinks and to discuss further.",
          "createdAt": "2020-09-09T10:35:19Z",
          "updatedAt": "2020-09-09T10:35:19Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@stef can you please bring this to the list? I could see changing the name if we were to support threshold OPRFs, for example. But as it stands now, to me, `Contribute` does not better describe the semantics than `Evaluate`, for the reasons that Alex states.",
          "createdAt": "2020-09-14T13:03:39Z",
          "updatedAt": "2020-09-14T13:03:39Z"
        },
        {
          "author": "stef",
          "authorAssociation": "NONE",
          "body": "which list, is there a dedicated list for this proposal or the big cfrg list?",
          "createdAt": "2020-09-14T19:47:10Z",
          "updatedAt": "2020-09-14T19:47:10Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "The CFRG list! :) ",
          "createdAt": "2020-09-15T00:36:35Z",
          "updatedAt": "2020-09-15T00:36:35Z"
        },
        {
          "author": "stef",
          "authorAssociation": "NONE",
          "body": "although i subscribed to the list, before writing to it i reviewed the academic literature and i apologize for making this noise.",
          "createdAt": "2020-09-16T13:35:38Z",
          "updatedAt": "2020-09-16T13:35:38Z"
        }
      ]
    },
    {
      "number": 142,
      "id": "MDU6SXNzdWU3MDc2NDM1Mzg=",
      "title": "Ciphersuite section should cite standard curve generators and orders",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/142",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 4 defines various ciphersuites using standard curves, but it specifies the generator and order explicitly. The values are (modulo the issue below) always the standard one, as they should be. But from reading the draft you might not realize this and miss that you can reuse your existing base-point-specific optimizations. Instead, since curves are always specified and implemented with a standard base point, just cite the standard ones. No sense in restating the order either, I think.\r\n\r\nThis would also fix what appear to be mistakes in the curve25519 and curve448 definition:\r\n\r\nFirst, a minor terminology nitpick: OPRF(curve25519, SHA-512) and OPRF(curve448, SHA-512) specify the base point with (x, y) coordinates, but RFC7748, which the draft cites, does not define the curves in terms of (x, y) coordinates at all. It labels the coordinates (u, v).\r\n\r\n~~Second, the y/v-coordinate for the curve25519 generator is wrong. I don't know if it ends up mattering for VOPRF (I'm guessing not, since Serialize() only captures the x/u coordinate?), but there are two possible v-coordinates for u = 9. [RFC7748, section 4.1](https://tools.ietf.org/html/rfc7748#section-4.1) picks V(P) = 14781619447589544791020593568409986887264606134616475288964881837755586237401 = 0x20AE19A1B8A086B4E01EDD2C7748D14C923D4D7E6D7C61B229E9C5A27ECED3D9. This draft used p - V(P) = 0x5F51E65E475F794B1FE122D388B72EB36DC2B28192839E4DD6163A5D81312C14.~~ (Edit: sounds like there's an errata in the RFC to switch to the other one.)",
      "createdAt": "2020-09-23T20:03:02Z",
      "updatedAt": "2020-10-27T12:50:08Z",
      "closedAt": "2020-10-26T19:06:07Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The correct generator point for curve25519 is the one reported in the errata report.\r\nhttps://www.rfc-editor.org/errata/eid4730\r\nSo, the v (or y) coordinate is even. ",
          "createdAt": "2020-09-24T01:25:27Z",
          "updatedAt": "2020-09-24T01:25:27Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "NONE",
          "body": "Ah! The joys of immutable RFCs. :-(",
          "createdAt": "2020-09-24T01:46:25Z",
          "updatedAt": "2020-09-24T01:46:25Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "We removed the generator from the appendix altogether, so I think this is now resolved. @davidben, please reopen if that's not the case!",
          "createdAt": "2020-10-26T19:06:07Z",
          "updatedAt": "2020-10-26T19:06:07Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "NONE",
          "body": "Ah cool. And I see the curve25519 generator silliness is sidestepped with ristretto255. Although, a minor nitpick, I wonder if this went a step too far. Section 2.1 says to act on a prime-order group `GG`.  Then `ScalarBaseMult()` is defined to be the \"repeated application of the group operation on the base point\". But I thought a plain prime-order group usually doesn't have a well-defined base point or generator. Perhaps some of the types want to be tweaked?",
          "createdAt": "2020-10-26T22:40:04Z",
          "updatedAt": "2020-10-26T22:40:18Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, every element is a generator, but ristretto255 pins one (the curve25519 base point):\r\n\r\n> Since ristretto255 is a prime-order group, every element except the\r\n> identity is a generator, but for interoperability a canonical\r\n> generator is selected, which can be internally represented by the\r\n> Curve25519 basepoint, enabling reuse of existing precomputation for\r\n> scalar multiplication.  This is its encoding:\r\n> \r\n>  e2f2ae0a 6abc4e71 a884a961 c500515f 58e30b6a a582dd8d b6a65945 e08d2d76",
          "createdAt": "2020-10-26T23:07:57Z",
          "updatedAt": "2020-10-26T23:07:57Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "NONE",
          "body": "Right, I'm saying that section 2.1 doesn't seem to talk about there being a base point. Probably we want to define GG as a group plus a particular generator. Or something else.\r\n\r\n(The ristretto comment was about the confusion about which base point is correct for curve25519. Hopefully ristretto is specified correctly.)",
          "createdAt": "2020-10-27T00:09:52Z",
          "updatedAt": "2020-10-27T00:09:52Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Ah, gotcha. We can fix that. ",
          "createdAt": "2020-10-27T12:50:08Z",
          "updatedAt": "2020-10-27T12:50:08Z"
        }
      ]
    },
    {
      "number": 143,
      "id": "MDU6SXNzdWU3MDc2ODg0NzU=",
      "title": "Use a draft-specific placeholder DST string",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/143",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "If folks deploy experimental systems using VOPRF drafts, the fact that the DST uses \"RFCXXXX\" might break domain separation between drafts. HPKE used to use the same placeholder but switched to \"HPKE-05\", etc., with an RFC editor note:\r\n\r\n> [[RFC editor: please change \"HPKE-05\" to \"RFCXXXX\", where XXXX is the final number, before publication.]]\r\n\r\nSee https://github.com/cfrg/draft-irtf-cfrg-hpke/pull/138.\r\n\r\nPerhaps VOPRF should do something similar here.",
      "createdAt": "2020-09-23T21:22:54Z",
      "updatedAt": "2020-10-17T16:09:50Z",
      "closedAt": "2020-10-17T16:09:50Z",
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agreed. Should it be changed @chris-wood ?",
          "createdAt": "2020-09-29T00:11:43Z",
          "updatedAt": "2020-09-29T00:11:43Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "This changes makes sense to me.",
          "createdAt": "2020-09-29T14:31:06Z",
          "updatedAt": "2020-09-29T14:31:06Z"
        }
      ]
    },
    {
      "number": 144,
      "id": "MDU6SXNzdWU3MDgzMTc4MTA=",
      "title": "Pre-rendered editor's copy out-of-date?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/144",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The README links to https://cfrg.github.io/draft-irtf-cfrg-voprf/draft-irtf-cfrg-voprf.html, but that seems to not match the md file in the repository.",
      "createdAt": "2020-09-24T16:37:48Z",
      "updatedAt": "2020-10-26T19:04:48Z",
      "closedAt": "2020-10-26T19:04:48Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Should be fixed now!",
          "createdAt": "2020-10-26T19:04:48Z",
          "updatedAt": "2020-10-26T19:04:48Z"
        }
      ]
    },
    {
      "number": 145,
      "id": "MDU6SXNzdWU3MDgzMTkxODU=",
      "title": "Cite TLS presentation language",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/145",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The Data Structures section includes a bunch of structures in what appear to be TLS presentation language. I assume this is intended to define serializations. That should probably cite RFC8446, which defines the syntax.",
      "createdAt": "2020-09-24T16:40:01Z",
      "updatedAt": "2020-09-28T17:46:18Z",
      "closedAt": "2020-09-28T17:46:18Z",
      "comments": []
    },
    {
      "number": 146,
      "id": "MDU6SXNzdWU3MDg5NTgzMjQ=",
      "title": "hashInput in Finalize and VerifyFinalize missing I2OSP calls",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/146",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "hashInput in Finalize and VerifyFinalize is computed as:\r\n\r\n```\r\n  hashInput = len(token.data) || token.data ||\r\n              len(issuedToken) || issuedToken ||\r\n              len(info) || info ||\r\n              len(finalizeDST) || finalizeDST\r\n  return Hash(hashInput)\r\n```\r\n\r\nBut the lengths are integers, not byte strings. I assume this was intended to say `I2OSP(len(...), ???)`. Given h1Input is also passed directly to Hash in ComputeComposites, I guess the lengths should all be two bytes, to be consistent.\r\n\r\n```\r\n  h1Input = I2OSP(len(gen), 2) || gen ||\r\n            I2OSP(len(pkS), 2) || pkS ||\r\n            I2OSP(len(blindTokens), 2) || blindTokens ||\r\n            I2OSP(len(elements), 2) || elements ||\r\n            I2OSP(len(seedDST), 2) || seedDST\r\n  seed = Hash(h1Input)\r\n```\r\n\r\nThough it's worth noting that injectivity here depends on the DSTs being suffix-free, or on *all* the length prefixes having the same size. If, say, hashInput used `I2OSP(len(token.data), 4)`, hashInput and h1Input would no longer be injective for all possible values here. (Ignoring the part where DSTs in this document are suffix-free.)\r\n\r\nThis reminds of https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/issues/236. (Hrm... do we care about domain separation between the hash calls here and those inside hash-to-curve? That might suggest the DST constructions should match. Although that is really a theoretical issue since the DSTs are indeed suffix-free.)",
      "createdAt": "2020-09-25T13:52:52Z",
      "updatedAt": "2020-10-16T14:00:21Z",
      "closedAt": "2020-10-16T14:00:21Z",
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I agree on this. I see no place, also, where a different length will be used other than `I2OSP(len(x), 2)`",
          "createdAt": "2020-09-29T00:10:28Z",
          "updatedAt": "2020-09-29T00:10:28Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I fixed this directly on master.",
          "createdAt": "2020-10-16T14:00:21Z",
          "updatedAt": "2020-10-16T14:00:21Z"
        }
      ]
    },
    {
      "number": 147,
      "id": "MDU6SXNzdWU3MDkxODg4ODI=",
      "title": "Necessary to serialize generator?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/147",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "GenerateProof incorporates `gen = GG.Serialize(G)` into the HashToScalar call, but the context string already includes the cipher suite ID, which covers all the common parameters, notably the generator. It seems to me that can be omitted.",
      "createdAt": "2020-09-25T18:17:54Z",
      "updatedAt": "2020-10-17T16:06:52Z",
      "closedAt": "2020-10-17T16:06:52Z",
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Mmm.. while true that through that the context string contains the suite.ID, this is only an id value, although it indeed recognises the suite. But I don't think the generator was included as a parameter for `HashToScalar` to recognise the suite, but rather to differentiate the hash. \r\n\r\nI'm not sure why it was historically introduced.. maybe @chris-wood , @alxdavids or @armfazh will know.",
          "createdAt": "2020-09-29T00:04:04Z",
          "updatedAt": "2020-09-29T00:04:04Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "NONE",
          "body": "Right, I thought all that needed there was for different suites' hash invocations to use different inputs. The suite is identified by ID, which is hashed, and the generator is specified by the suite, so it seems the generator is covered. \r\n\r\n(Disclaimer: I don't actually know how the formal analyses work, so my intuition could just be totally wrong. :-) )",
          "createdAt": "2020-09-29T00:14:14Z",
          "updatedAt": "2020-09-29T00:14:14Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "According to the specification [link](https://github.com/privacypass/challenge-bypass-extension/blob/master/docs/PROTOCOL.md#nizk-proofs-of-discrete-log-equality), the pair (G,Y) must be maintained.",
          "createdAt": "2020-10-16T17:28:01Z",
          "updatedAt": "2020-10-16T17:28:01Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "NONE",
          "body": "Isn't that just a question of whether you believe the pre-agreed parameters are GG or (GG, G). If you believe even GG weren't pre-agreed, I imagine H_3 would need to pass the group in. And when we give a name to an EC group, it typically comes with a pre-agreed generator.\r\n\r\nPut another way, you could define H_3 from the specification as H_3(G,Y,M,Z,A',B') =\r\n- If G == standard_G, return HashToScalar(code_point || Y || M || Z || A' || B')\r\n- Else, return HashToScalar(code_point2 || G || Y || M || Z || A' || B')\r\n\r\nThis is a perfectly injective encoding, as long as we can pick some distinct throwaway code_point2 value. And then you observe that you never hit the second case so we don't need to write it down.",
          "createdAt": "2020-10-16T19:45:16Z",
          "updatedAt": "2020-10-16T19:45:16Z"
        }
      ]
    },
    {
      "number": 148,
      "id": "MDU6SXNzdWU3MDkxOTM2NzM=",
      "title": "Assuming numbers are big-endian",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/148",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 2.2 has two bullet points:\r\n\r\n>   o  We assume that all numbers are stored in big-endian orientation.\r\n>\r\n>   o  I2OSP and OS2IP: Convert a byte array to and from a non-negative\r\n>      integer as described in [RFC8017].  Note that these functions\r\n>      operate on byte arrays in big-endian byte order.\r\n\r\nThe second bullet point makes sense. When converting to and from byte array, you need to specify the endianness. I'm not sure what the first point means at all. Does the draft ever care about the in-memory representation of numbers? It needs to be explicit about I2OSP, etc., anyway to capture lengths (see #145 and #146), at which point I don't think how the number is \"stored\" means anything.",
      "createdAt": "2020-09-25T18:27:06Z",
      "updatedAt": "2020-10-17T16:05:56Z",
      "closedAt": "2020-10-17T16:05:56Z",
      "comments": []
    },
    {
      "number": 151,
      "id": "MDU6SXNzdWU3MTA2NjY1NTk=",
      "title": "Can we remove the 'Addition' field on every ciphersuite?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/151",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The 'Addition' field on every ciphersuite is always the same:\r\n\r\n```\r\n  - Addition: Adding curve points directly corresponds to the group\r\n    addition operation.\r\n```\r\n\r\nwe could perhaps remove it, as it is generally defined on the preliminaries.",
      "createdAt": "2020-09-29T00:44:06Z",
      "updatedAt": "2020-10-26T19:04:01Z",
      "closedAt": "2020-10-26T19:04:01Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, we should refactor this out as a common operator for each ciphersuite",
          "createdAt": "2020-09-29T14:32:53Z",
          "updatedAt": "2020-09-29T14:32:53Z"
        }
      ]
    },
    {
      "number": 152,
      "id": "MDU6SXNzdWU3MTA2ODYyNzM=",
      "title": "Correctly define the Scalar multiplication field for all cipher-suites",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/152",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, only the `P-384`, `P-521` and `P-256` have the Scalar multiplication field defined. Might be good to expand this to 25519 and 448, specially, as they refer to RFC7748, which X25519 and X448 cannot be used for this draft, as they return only one of the coordinates.",
      "createdAt": "2020-09-29T01:46:45Z",
      "updatedAt": "2020-10-26T19:03:55Z",
      "closedAt": "2020-10-26T19:03:55Z",
      "comments": []
    },
    {
      "number": 153,
      "id": "MDU6SXNzdWU3MTEyMDI2MDk=",
      "title": "How and when should the public key be generated?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/153",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "While it is easy to assume how and when the public key is generated, there is no place in the draft that states so. Must be good to include its generation on the setup functions.",
      "createdAt": "2020-09-29T15:00:49Z",
      "updatedAt": "2020-10-22T22:38:48Z",
      "closedAt": "2020-10-22T22:38:48Z",
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "it should probably be included here:\r\n\r\n```\r\ndef SetupBaseServer(suite):\r\n  (skS, _) = KeyGen(GG)\r\n  contextString = I2OSP(modeBase, 1) || I2OSP(suite.ID, 2)\r\n  return ServerContext(contextString, skS)\r\n\r\n```",
          "createdAt": "2020-09-29T15:03:18Z",
          "updatedAt": "2020-09-29T15:03:18Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is solved now.",
          "createdAt": "2020-10-22T22:38:46Z",
          "updatedAt": "2020-10-22T22:38:46Z"
        }
      ]
    },
    {
      "number": 154,
      "id": "MDU6SXNzdWU3MTEzNDAzMzY=",
      "title": "Consider adding a FullEvaluate()  to Server Context API",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/154",
      "state": "CLOSED",
      "author": "tomrist",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Some applications will need to compute the full PRF on the server side, e.g., to precompute a bunch of OPRF outputs for use in private set intersection protocols. Can we consider adding to the server context API a FullEvaluate, along lines of:\r\n\r\nInput:\r\n\r\n  ClientInput input\r\n  opaque info<1..2^16-1>\r\n  PrivateKey skS\r\n  PublicKey pkS\r\n\r\nOutput:\r\n\r\n  opaque output<1..2^16-1>\r\n\r\ndef FullEvaluate(input, info, skS, pkS):\r\n  P = GG.HashToGroup(input)\r\n  N = skS * P\r\n  issuedToken = GG.serialize(N)\r\n  finalizeDST = \"RFCXXXX-Finalize-\" || self.contextString\r\n  hashInput = len(input) || input ||\r\n              len(issuedToken) || issuedToken ||\r\n              len(info) || info ||\r\n              len(finalizeDST) || finalizeDST\r\n  return Hash(hashInput)",
      "createdAt": "2020-09-29T18:12:40Z",
      "updatedAt": "2020-10-26T19:03:45Z",
      "closedAt": "2020-10-26T19:03:45Z",
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This should also be added to the POC.",
          "createdAt": "2020-10-18T19:31:04Z",
          "updatedAt": "2020-10-18T19:31:04Z"
        }
      ]
    },
    {
      "number": 155,
      "id": "MDU6SXNzdWU3MTM2NjIwOTc=",
      "title": "Clarify HashToScalar",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/155",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "HashToScalar points to hash-to-field, but we should specify the modulus. See the relevant text in the draft:\r\n\r\n> The hash_to_field function is also suitable for securely hashing to scalars. For example, when hashing to scalars for an elliptic curve (sub)group with prime order r, it suffices to instantiate hash_to_curve with target field GF(r).",
      "createdAt": "2020-10-02T14:24:29Z",
      "updatedAt": "2020-10-26T19:08:21Z",
      "closedAt": "2020-10-26T19:08:21Z",
      "comments": []
    },
    {
      "number": 157,
      "id": "MDU6SXNzdWU3MTczOTAwMzA=",
      "title": "Clarify the serialization to be used",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/157",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Specially, the tag to be used.",
      "createdAt": "2020-10-08T14:19:52Z",
      "updatedAt": "2020-10-22T22:44:39Z",
      "closedAt": "2020-10-22T22:44:39Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this is implementation-dependant. most implementations follow ANSI X9.62.",
          "createdAt": "2020-10-08T15:56:26Z",
          "updatedAt": "2020-10-08T15:56:26Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah. I agree on this. Closing it.",
          "createdAt": "2020-10-22T22:44:39Z",
          "updatedAt": "2020-10-22T22:44:39Z"
        }
      ]
    },
    {
      "number": 159,
      "id": "MDU6SXNzdWU3MjMyMzE4NTc=",
      "title": "Avoid making the test vectors random at every run",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/159",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-16T13:35:51Z",
      "updatedAt": "2020-10-19T16:23:07Z",
      "closedAt": "2020-10-19T16:23:07Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #166.",
          "createdAt": "2020-10-19T16:23:07Z",
          "updatedAt": "2020-10-19T16:23:07Z"
        }
      ]
    },
    {
      "number": 163,
      "id": "MDU6SXNzdWU3MjQwNzg0NDk=",
      "title": "Specify the usage of decaf and ristretto",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/163",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-18T19:19:42Z",
      "updatedAt": "2020-10-26T19:03:35Z",
      "closedAt": "2020-10-26T19:03:35Z",
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Copying this from #164:\r\n\r\nSure thing. As a read in the current draft, ristretto255 is an instantiation of the abstract prime-order group Curve25519, and it is using it's order, as defined in RFC7748.\r\nThe base point is a base point (I think the ed25519 one) encoded in a Ristretto way: e2f2ae0a 6abc4e71 a884a961 c500515f 58e30b6a a582dd8d b6a65945 e08d2d76, and internally using ed25519 operations for scalarmul and others (and, therefore, internally using the ed25519 base point).\r\n\r\nI'm not sure why it is specified:\r\n\r\n```\r\nThe group order is the same as the order of the Curve25519 primeorder\r\nsubgroup:\r\nl = 2^252 + 27742317777372353535851937790883648493\r\nand not directly the edwards one.\r\n```\r\n\r\nJust noting it here, as we need to specify the generator for Generator(), for internal edwards operations. Although, decoding the ristretto encoding into edwards should do the trick.\r\n\r\nI'm not sure if the authors are going to specify in a different way the addition, negation, and the derived subtraction and (multi-)scalar multiplication, but I'll follow the ed25519 ones.\r\n\r\nOn decaf448, they are using edwards448 as defined RFC7748.",
          "createdAt": "2020-10-21T13:52:27Z",
          "updatedAt": "2020-10-21T13:52:27Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "cc./ @armfazh @chris-wood ",
          "createdAt": "2020-10-21T13:53:02Z",
          "updatedAt": "2020-10-21T13:53:02Z"
        }
      ]
    },
    {
      "number": 164,
      "id": "MDU6SXNzdWU3MjQwODEwMDY=",
      "title": "Change curve 25519 and curve 448 to ed25519 and ed448",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/164",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It should follow the parameters defined for the edwards curves, as defined in RFC7748.\r\n\r\nThis is kind of related to #142 and #163 (as it should specify the encoding to be used).\r\n\r\ncc./ @armfazh @chris-wood ",
      "createdAt": "2020-10-18T19:33:30Z",
      "updatedAt": "2020-10-21T13:52:47Z",
      "closedAt": "2020-10-21T13:52:46Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "We should close this and just move directly to ristretto255 and decaf448. @armfazh, please close if you agree!",
          "createdAt": "2020-10-20T00:32:06Z",
          "updatedAt": "2020-10-20T00:32:06Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "agree, let's move forward with those groups",
          "createdAt": "2020-10-20T07:05:47Z",
          "updatedAt": "2020-10-20T07:05:47Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sure thing. As a read in the current [draft](https://datatracker.ietf.org/doc/draft-irtf-cfrg-ristretto255-decaf448/),  ristretto255 is an instantiation of the abstract prime-order group Curve25519, and it is using it's order, as defined in RFC7748. \r\nThe base point is a base point (I think the ed25519 one) encoded in a Ristretto way: `e2f2ae0a 6abc4e71 a884a961 c500515f 58e30b6a a582dd8d b6a65945 e08d2d76`, and internally using ed25519 operations for scalarmul and others (and, therefore, internally using the ed25519 base point). \r\n\r\nI'm not sure why it is specified:\r\n\r\n```\r\nThe group order is the same as the order of the Curve25519 primeorder\r\nsubgroup:\r\nl = 2^252 + 27742317777372353535851937790883648493\r\n```\r\n\r\nand not directly the edwards one. \r\n\r\nJust noting it here, as we need to specify the generator for `Generator()`, for internal edwards operations. Although, decoding the ristretto encoding into edwards should do the trick.\r\n\r\nI'm not sure if the authors are going to specify in a different way the addition, negation, and the derived subtraction and (multi-)scalar multiplication, but I'll follow the ed25519 ones.\r\n\r\nOn decaf448, they are using edwards448 as defined RFC7748.\r\n",
          "createdAt": "2020-10-21T13:51:03Z",
          "updatedAt": "2020-10-21T13:51:03Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing this. See #163 ",
          "createdAt": "2020-10-21T13:52:46Z",
          "updatedAt": "2020-10-21T13:52:46Z"
        }
      ]
    },
    {
      "number": 165,
      "id": "MDU6SXNzdWU3MjQxMTkzNjA=",
      "title": "Does the 'dst' for the HashToCurve func need to be different for each mode?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/165",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-18T20:59:06Z",
      "updatedAt": "2020-10-28T12:34:43Z",
      "closedAt": "2020-10-28T12:34:43Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "There are several ways we could achieve domain separation. For consistency with the other functions, I'd recommend augmenting the input to `HashToGroup` with a DST, e.g.:\r\n\r\n```\r\ndef Blind(input):\r\n  r = GG.RandomScalar()\r\n  blindDST = \"VOPRF05-Finalize-\" || self.contextString\r\n  P = GG.HashToGroup(input || I2OSP(len(blindDST), 2) || blindDST)\r\n```\r\n\r\n@alxdavids, what do you think?",
          "createdAt": "2020-10-20T00:35:07Z",
          "updatedAt": "2020-10-20T00:35:20Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Mmm.. on some of the functions, this make  some sense. In others, we can add:\r\n\r\n```\r\ndef VerifyFinalize(skS, input, info, output):\r\n  DST = self.contextString\r\n  T = GG.HashToGroup(input || dst)\r\n  (...)\r\n\r\n```\r\n\r\nbut, the hash-to-group draft specifies a minimum of 16 bytes and that it is recommended that the suite id is included in the dst. \r\n\r\n```\r\n   2.  Tags MUST have nonzero length.  A minimum length of 16 bytes is\r\n       RECOMMENDED to reduce the chance of collisions with other\r\n       applications.\r\n   6.  For applications that use multiple encodings, either to the same\r\n       curve or to different curves, each encoding MUST use a different\r\n       tag.  For this purpose, it is RECOMMENDED to include the\r\n       encoding's Suite ID (Section 8) in the domain separation tag.\r\n       For independent encodings based on the same suite, each tag\r\n       should also include a distinct identifier, e.g., \"ENC1\" and\r\n       \"ENC2\".\r\n```\r\n\r\nSo, something like this can be used:\r\n\r\n```\r\ndst = VOPRF05-self.contextString-P521_XMD:SHA-512_SSWU_RO\\_`, depending on the suite id\r\n```\r\n",
          "createdAt": "2020-10-23T16:11:00Z",
          "updatedAt": "2020-10-23T16:11:00Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Let's step back for a second,\r\ngiven a named suite, say e.g.  `id = \"OPRF(P256,SHA256)\" ` \r\n\r\ndoes this identifier considers the implementation of both verifiable and non-verifiable modes?\r\n\r\n- if so, \r\n -- then the `dst` used for HashToGroup could be the concatenation of suite id and the mode.\r\n- otherwise,\r\n -- `OPRF(P256,SHA256)` means only the non-verifiable mode, then we need a suite identifier for the verifiable mode, for example `VOPRF(P256,SHA256)`. Going this way,  `dst` can be equal to the suite id.\r\n",
          "createdAt": "2020-10-23T17:53:26Z",
          "updatedAt": "2020-10-23T17:53:26Z"
        }
      ]
    },
    {
      "number": 168,
      "id": "MDU6SXNzdWU3MjUwODE1Nzc=",
      "title": "Allow server context creation with external key pair",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/168",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In some cases it's useful to use a pre-existing key pair for a server context. Currently, keys are generated inline (in SetupBaseServer, for example). We should fix that.",
      "createdAt": "2020-10-20T00:31:37Z",
      "updatedAt": "2020-10-26T19:03:25Z",
      "closedAt": "2020-10-26T19:03:25Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The purpose of Setup is to generate keys and domain parameters, and this should run once during the _offline_ phase of the protocol.\r\nThere is no inline generation during the _online_ phase of the protocol.Hence, I think the specification is right.\r\n\r\n-- If needed, we could add a line saying: \"users can use pre-existing keys provided that keys were generated using a compatible  procedure as the one described in Setup\".\r\n",
          "createdAt": "2020-10-23T19:14:15Z",
          "updatedAt": "2020-10-23T19:14:15Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> -- If needed, we could add a line saying: \"users can use pre-existing keys provided that keys were generated using a compatible procedure as the one described in Setup\".\r\n\r\nThis is precisely the idea! It's definitely needed for OPAQUE.",
          "createdAt": "2020-10-23T19:20:16Z",
          "updatedAt": "2020-10-23T19:20:16Z"
        }
      ]
    },
    {
      "number": 171,
      "id": "MDU6SXNzdWU3MzA2MDg1MDA=",
      "title": "Submit new version for IETF 109",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/171",
      "state": "CLOSED",
      "author": "grittygrease",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-27T16:25:49Z",
      "updatedAt": "2020-11-03T22:13:30Z",
      "closedAt": "2020-11-03T22:13:30Z",
      "comments": []
    },
    {
      "number": 174,
      "id": "MDU6SXNzdWU3MzE2NDcwMjI=",
      "title": "update contributors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/174",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "the list of contributors overleaps with authors",
      "createdAt": "2020-10-28T17:28:01Z",
      "updatedAt": "2020-11-02T17:49:06Z",
      "closedAt": "2020-11-02T17:49:06Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Updated directly in main.",
          "createdAt": "2020-11-02T17:49:06Z",
          "updatedAt": "2020-11-02T17:49:06Z"
        }
      ]
    },
    {
      "number": 182,
      "id": "MDU6SXNzdWU3MzQ4MjMwNTI=",
      "title": "KeyGen is not defined",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/182",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> Prior to this phase, keys (skS, pkS) should be generated by calling a \"KeyGen\" functionality.\r\n\r\nKeyGen is not defined",
      "createdAt": "2020-11-02T21:14:19Z",
      "updatedAt": "2020-11-03T22:13:23Z",
      "closedAt": "2020-11-03T22:13:23Z",
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcyMTg3MjU4",
      "title": "Some comments on first look",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/1",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I have made some small changes and also some comments (prefaced with ALEX:). I plan to have a more detailed run-through soon, particularly with the algorithmic stuff to make sure the inputs/outputs are consistent throughout. Maybe the best thing would be to respond to the comments on here and then I can change/not change accordingly?\r\n\r\nI'm not sure of the process for IETF drafts but I guess there will need to be some justification of the security properties that are proposed. I guess proofs might be a stretch but it might be possible to get some intuition down, what do you think?\r\n\r\nAlso, were there any TODOs that you were considering before you went ahead with submission?\r\n\r\n(I tried make-ing the changes but it was complaining about the {{H2c}} reference?)",
      "createdAt": "2018-03-01T09:47:11Z",
      "updatedAt": "2018-03-05T02:33:25Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "40a93ff139333887ec4a57b6cd0af532bd25f0b9",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids-comments",
      "headRefOid": "8ca1e222f9f2e79461b5a40089cf1bc3ccbd1247",
      "closedAt": "2018-03-05T02:33:25Z",
      "mergedAt": "2018-03-05T02:33:25Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "686fd89d4bdf52385777d912afb3c3dc32cd863d"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I like the changes overall. Please remove the \"ALEX:\" comments and file them as issues to discuss. And please proceed with the suggested changes if you can. Once done, we'll merge. (Also, add yourself as an author if you feel so inclined!)",
          "createdAt": "2018-03-01T16:04:41Z",
          "updatedAt": "2018-03-01T16:04:41Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Sounds good, I'll make the required changes soon.",
          "createdAt": "2018-03-02T07:08:32Z",
          "updatedAt": "2018-03-02T07:08:32Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids don't worry about the H2C reference. That will be fixed in... the next day or so. We can merge this change while that's busted.",
          "createdAt": "2018-03-02T16:56:45Z",
          "updatedAt": "2018-03-02T16:56:45Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNDg4MDU5",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-01T16:02:07Z",
          "updatedAt": "2018-03-01T16:02:08Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "PRF security and digital signature security against existential forgery are, IMO, very similar. That's what led to the comment.",
              "createdAt": "2018-03-01T16:02:08Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNDg4MzYx",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-01T16:02:50Z",
          "updatedAt": "2018-03-01T16:02:50Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "I would actually prefer learn here as it doesn't matter how y is derived in this context. ",
              "createdAt": "2018-03-01T16:02:50Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNDg4NTU2",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-01T16:03:19Z",
          "updatedAt": "2018-03-01T16:03:19Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "Yes -- we need to state so in the security section. Can you please do that?",
              "createdAt": "2018-03-01T16:03:19Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNDg4NjU3",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-01T16:03:32Z",
          "updatedAt": "2018-03-01T16:03:33Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": "Agreed. Can you please do so?",
              "createdAt": "2018-03-01T16:03:32Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNDg4ODA3",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-01T16:03:50Z",
          "updatedAt": "2018-03-01T16:03:51Z",
          "comments": [
            {
              "originalPosition": 99,
              "body": "I'm missing something here.",
              "createdAt": "2018-03-01T16:03:50Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNDg5NTAw",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "(See comments in Conversation thread.)",
          "createdAt": "2018-03-01T16:05:29Z",
          "updatedAt": "2018-03-01T16:05:29Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNjg5NDQy",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-02T07:07:02Z",
          "updatedAt": "2018-03-02T07:07:02Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "My only opposition to 'learn' is that the security definition of a PRF allows an adversary to learn outputs on any inputs that it wants.",
              "createdAt": "2018-03-02T07:07:02Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNjg5NDY0",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-02T07:07:11Z",
          "updatedAt": "2018-03-02T07:07:11Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "Yep will do.",
              "createdAt": "2018-03-02T07:07:11Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNjg5NjE5",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-02T07:08:10Z",
          "updatedAt": "2018-03-02T07:08:11Z",
          "comments": [
            {
              "originalPosition": 99,
              "body": "The notation G is used for two different functions, it's not linked to the removal above. I will change it so that the group is called something else.",
              "createdAt": "2018-03-02T07:08:10Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwODQxMzQ0",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-02T16:56:08Z",
          "updatedAt": "2018-03-02T16:56:08Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "Oh good point. Nevermind then!",
              "createdAt": "2018-03-02T16:56:08Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwODQxMzg2",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-02T16:56:18Z",
          "updatedAt": "2018-03-02T16:56:18Z",
          "comments": [
            {
              "originalPosition": 99,
              "body": "Good catch!",
              "createdAt": "2018-03-02T16:56:18Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 2,
      "id": "MDExOlB1bGxSZXF1ZXN0MTczMDY0NTQx",
      "title": "add contributor",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/2",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "add myself to the document and fixed a small error",
      "createdAt": "2018-03-06T05:54:03Z",
      "updatedAt": "2018-03-18T09:14:37Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "f03b12c5898ea69bae5465149cdc367646eeba28",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "contributor",
      "headRefOid": "70119842da555a230f2206a6e0565d58e19dfbbf",
      "closedAt": "2018-03-18T09:14:37Z",
      "mergedAt": "2018-03-18T09:14:37Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "23b30779734f8c494d74cffcd822cc5f9837d1c1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 8,
      "id": "MDExOlB1bGxSZXF1ZXN0MTk1MzQ2MzE4",
      "title": "Add parameter commitment and application information.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/8",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-06-16T19:47:38Z",
      "updatedAt": "2018-06-18T00:55:52Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "9ffe7574350d760bf79aec317aa538bbbe6dfadb",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/parameters",
      "headRefOid": "ec48cff4687894735362bf66aa6f350af9fa7699",
      "closedAt": "2018-06-18T00:55:52Z",
      "mergedAt": "2018-06-18T00:55:52Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "55b90f4396841b953a3be5a3ffdb56ae8ccb61e4"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids okay to merge, or do you want to see changes?",
          "createdAt": "2018-06-17T23:44:42Z",
          "updatedAt": "2018-06-17T23:44:42Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm happy with you merging",
          "createdAt": "2018-06-18T00:44:27Z",
          "updatedAt": "2018-06-18T00:44:27Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5Mzc3Mjc2",
          "commit": {
            "abbreviatedOid": "ec48cff"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Looks good. just a few things that we might want to add.",
          "createdAt": "2018-06-17T02:28:22Z",
          "updatedAt": "2018-06-17T02:37:15Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Not that important, but privacy pass also helps vpn users.",
              "createdAt": "2018-06-17T02:28:22Z",
              "updatedAt": "2018-06-17T02:37:15Z"
            },
            {
              "originalPosition": 36,
              "body": "If we want to be more precise, the shared key is derived from the signed token. The MAC is then computed over the Host header and HTTP path of the outgoing request.",
              "createdAt": "2018-06-17T02:35:00Z",
              "updatedAt": "2018-06-17T02:37:15Z"
            },
            {
              "originalPosition": 47,
              "body": "https://eprint.iacr.org/2016/144 and http://webee.technion.ac.il/~hugo/sphinx.pdf are some examples that do something like this, do we need to add references? (especially the first since a similar VOPRF is used)",
              "createdAt": "2018-06-17T02:36:38Z",
              "updatedAt": "2018-06-17T02:37:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5NDA0Nzk4",
          "commit": {
            "abbreviatedOid": "ec48cff"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-17T23:30:38Z",
          "updatedAt": "2018-06-17T23:30:38Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "I don't think the HTTP bits are necessary here. ",
              "createdAt": "2018-06-17T23:30:38Z",
              "updatedAt": "2018-06-17T23:30:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5NDA1MDgz",
          "commit": {
            "abbreviatedOid": "ec48cff"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-17T23:41:23Z",
          "updatedAt": "2018-06-17T23:41:23Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "I'll file a separate issue for this.",
              "createdAt": "2018-06-17T23:41:23Z",
              "updatedAt": "2018-06-17T23:41:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5NDA1MTc3",
          "commit": {
            "abbreviatedOid": "ec48cff"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-17T23:44:28Z",
          "updatedAt": "2018-06-17T23:44:28Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "What's the use case there?",
              "createdAt": "2018-06-17T23:44:28Z",
              "updatedAt": "2018-06-17T23:44:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5NDA3NzEy",
          "commit": {
            "abbreviatedOid": "ec48cff"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-18T00:44:05Z",
          "updatedAt": "2018-06-18T00:44:05Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Just the same as Tor, some VPN providers use IP addresses that have poor reputations in the same way.",
              "createdAt": "2018-06-18T00:44:05Z",
              "updatedAt": "2018-06-18T00:44:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 9,
      "id": "MDExOlB1bGxSZXF1ZXN0MTk1MzU4NjQz",
      "title": "consistent dleq notation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/9",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#3 ",
      "createdAt": "2018-06-17T02:55:06Z",
      "updatedAt": "2018-06-18T00:43:24Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "9ffe7574350d760bf79aec317aa538bbbe6dfadb",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "dleq-notation",
      "headRefOid": "2021234f3ea49c8be19ccd3ad87c786db3dd0db4",
      "closedAt": "2018-06-18T00:43:24Z",
      "mergedAt": "2018-06-18T00:43:24Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "84c72b3687f2efee4243607ce156aa167e708e18"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5NDA1MjIy",
          "commit": {
            "abbreviatedOid": "2021234"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good. Ship it.",
          "createdAt": "2018-06-17T23:45:35Z",
          "updatedAt": "2018-06-17T23:45:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 11,
      "id": "MDExOlB1bGxSZXF1ZXN0MTk2NjU5NzMy",
      "title": "add references",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/11",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#10 \r\n(also updated the .txt file)",
      "createdAt": "2018-06-22T07:36:00Z",
      "updatedAt": "2018-06-23T14:20:15Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "776a3da461831bdaf66d2bb5e9cfe7690e29e642",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "refs",
      "headRefOid": "1e37c07dba3c49797c15f9c43a78e1ed3e22889b",
      "closedAt": "2018-06-23T14:20:15Z",
      "mergedAt": "2018-06-23T14:20:15Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "247c871fee36f9301b47a797c796721f344c6fdf"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the hash2curve reference should be: I-D.irtf-cfrg-.... Can you please give that a shot? Also, can you please sort the authors in alphabetical order by surname? (You, Nick, then myself.)",
          "createdAt": "2018-06-22T11:22:58Z",
          "updatedAt": "2018-06-22T11:22:58Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay I've changed the references back, they don't seem to build correctly (I think the ref is missing). Also switched the authors up.",
          "createdAt": "2018-06-23T11:35:15Z",
          "updatedAt": "2018-06-23T11:35:15Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 12,
      "id": "MDExOlB1bGxSZXF1ZXN0MjIzOTk0MTky",
      "title": "Using SWU encoding for hash-to-curve",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/12",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Not an expert with hashing to curves but it seems like the SWU encoding seems to work for P-256, so shall we go with that?  We already have noted with privacy pass that we should look to move towards this method of encoding so it seems to fit well.",
      "createdAt": "2018-10-18T15:08:51Z",
      "updatedAt": "2018-10-20T01:44:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "247c871fee36f9301b47a797c796721f344c6fdf",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/h2c",
      "headRefOid": "518621f0f2e51de397685baae997c7dd79dcaff8",
      "closedAt": "2018-10-20T01:44:05Z",
      "mergedAt": "2018-10-20T01:44:05Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c3526b7f2216dc32922491c97ecc8a88fd36de7a"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Ooops sorry, yeah you're right. I'll change them.",
          "createdAt": "2018-10-19T08:35:32Z",
          "updatedAt": "2018-10-19T08:35:32Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I've updated now, also using Icart for P384 as per the h2c draft.",
          "createdAt": "2018-10-19T10:59:10Z",
          "updatedAt": "2018-10-19T10:59:10Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY2MzM0Nzkw",
          "commit": {
            "abbreviatedOid": "5293feb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think the Curve25519 variants should use Elligator2. @grittygrease, what do you think?",
          "createdAt": "2018-10-18T23:34:07Z",
          "updatedAt": "2018-10-18T23:34:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 14,
      "id": "MDExOlB1bGxSZXF1ZXN0MjI0NTM2MjY2",
      "title": "ECVOPRF->VOPRF",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/14",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Related to #13 ",
      "createdAt": "2018-10-21T11:58:41Z",
      "updatedAt": "2018-10-22T13:03:28Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "c3526b7f2216dc32922491c97ecc8a88fd36de7a",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/voprf",
      "headRefOid": "c9fc3b8583885a1dced287207dbd158196729462",
      "closedAt": "2018-10-22T13:03:28Z",
      "mergedAt": "2018-10-22T13:03:28Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "54f2d05b44f1abd799bfa4191fba284de60aa9ec"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood Sure, I am happy for you to submit this. I fixed the suggestion you made above, and now going to merge (if github actually allows me...).",
          "createdAt": "2018-10-22T11:16:15Z",
          "updatedAt": "2018-10-22T11:16:15Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY2Nzk4MjMz",
          "commit": {
            "abbreviatedOid": "84416d7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM -- only one small comment. Please feel free to merge (with or without the change). @alxdavids, do you want me to submit this?",
          "createdAt": "2018-10-21T19:48:36Z",
          "updatedAt": "2018-10-21T19:49:18Z",
          "comments": [
            {
              "originalPosition": 257,
              "body": "Maybe we should drop \"our\" here?",
              "createdAt": "2018-10-21T19:48:36Z",
              "updatedAt": "2018-10-22T08:39:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY2ODU5OTIw",
          "commit": {
            "abbreviatedOid": "c9fc3b8"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-10-22T08:40:48Z",
          "updatedAt": "2018-10-22T08:40:52Z",
          "comments": [
            {
              "originalPosition": 257,
              "body": "Fixed",
              "createdAt": "2018-10-22T08:40:50Z",
              "updatedAt": "2018-10-22T08:40:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY2ODU5OTUy",
          "commit": {
            "abbreviatedOid": "c9fc3b8"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-10-22T08:41:00Z",
          "updatedAt": "2018-10-22T08:41:04Z",
          "comments": [
            {
              "originalPosition": 257,
              "body": "Fixed",
              "createdAt": "2018-10-22T08:41:02Z",
              "updatedAt": "2018-10-22T08:41:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 18,
      "id": "MDExOlB1bGxSZXF1ZXN0MjUyNjk5MDgz",
      "title": "Add secret key to DLEQ_Generate and rewrap main body lines",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/18",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #17 ",
      "createdAt": "2019-02-13T13:44:20Z",
      "updatedAt": "2019-02-13T14:26:19Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "007965f2519f76bae53ca65067b1bccc01b20058",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/add-key-to-dleq-gen",
      "headRefOid": "165893dc24ef5d19dd04680cd55ece6888535c95",
      "closedAt": "2019-02-13T14:26:19Z",
      "mergedAt": "2019-02-13T14:26:19Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ef72e0a0519a6c25b41a00e3ce7a786cc05fb8a4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAzMjM2OTYz",
          "commit": {
            "abbreviatedOid": "165893d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-02-13T14:26:14Z",
          "updatedAt": "2019-02-13T14:26:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 19,
      "id": "MDExOlB1bGxSZXF1ZXN0MjU0MjM3NDY5",
      "title": "Make verifiability optional and add batched DLEQ case",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/19",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #15 and #16, big change so I'm happy to iterate on this.\r\n",
      "createdAt": "2019-02-19T12:40:38Z",
      "updatedAt": "2019-02-27T11:41:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "ef72e0a0519a6c25b41a00e3ce7a786cc05fb8a4",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/oprf",
      "headRefOid": "beeccae5310afbb3fd162ce431421f2aac7f8895",
      "closedAt": "2019-02-27T11:41:36Z",
      "mergedAt": "2019-02-27T11:41:36Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "389064d2f1a159426b545507becb6e59de3b1697"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for your feedback! I've made the necessary fixes.",
          "createdAt": "2019-02-26T10:22:30Z",
          "updatedAt": "2019-02-26T10:22:30Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA1Mzg2NDkw",
          "commit": {
            "abbreviatedOid": "ed8d086"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "First pass done. Looks great so far! I left some technical questions and editorial comments. Please let me know if anything is unclear.",
          "createdAt": "2019-02-19T18:45:10Z",
          "updatedAt": "2019-02-20T02:54:58Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "Should we also explicitly say that the server learns nothing during the computation?",
              "createdAt": "2019-02-19T18:45:11Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 65,
              "body": "s/learn the server's/learn anything about the server's?",
              "createdAt": "2019-02-19T18:46:11Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 68,
              "body": "s/evaluating the underlying PRF/evaluating the underlying PRF with a known public key?",
              "createdAt": "2019-02-19T18:46:41Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 104,
              "body": "The end of this sentence seems a bit out of context. Perhaps: \"... with the addition of a proof that demonstrates correctness of the computation using a known public key.\"",
              "createdAt": "2019-02-20T02:41:14Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 105,
              "body": "s/ECVOPRF/ECOPRF?",
              "createdAt": "2019-02-20T02:41:27Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 129,
              "body": "s/OPRF\\/VOPRF protocol/OPRF and VOPRF protocols",
              "createdAt": "2019-02-20T02:41:50Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 146,
              "body": "s/Broadly/Briefly?",
              "createdAt": "2019-02-20T02:42:41Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 163,
              "body": "s/K/k?",
              "createdAt": "2019-02-20T02:43:08Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 162,
              "body": "Perhaps we should assign `PRF(k, x)` a value, e.g., `y = PRF(k, x)`?",
              "createdAt": "2019-02-20T02:43:38Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 168,
              "body": "Should `K` be capitalized or not? Whatever is right, we should one consistent.",
              "createdAt": "2019-02-20T02:43:59Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 198,
              "body": "s/separate/additional?",
              "createdAt": "2019-02-20T02:44:47Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 200,
              "body": "Is this the best way to phrase this particular property? Must V actually verify to achieve this? I'm just not sure. @grittygrease?",
              "createdAt": "2019-02-20T02:47:39Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 222,
              "body": "s/VOPRF/OPRF",
              "createdAt": "2019-02-20T02:48:07Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 302,
              "body": "Possibly add: \"This means the VOPRF computation is finalized with 'OPRF_Finalize'.\"",
              "createdAt": "2019-02-20T02:50:48Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 366,
              "body": "Should we always multiply Z by the curve cofactor, to be safe?",
              "createdAt": "2019-02-20T02:51:36Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 385,
              "body": "Can we move this to a specific routine that converts a binary string to an integer of fixed length? Relatedly, what is the width of `k`?",
              "createdAt": "2019-02-20T02:52:29Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 506,
              "body": "\ud83d\udc4d ",
              "createdAt": "2019-02-20T02:52:58Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 803,
              "body": "s/that they had with/with",
              "createdAt": "2019-02-20T02:54:19Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA4MDk3OTY0",
          "commit": {
            "abbreviatedOid": "39b6776"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Approved pending suggested changes!",
          "createdAt": "2019-02-26T17:25:13Z",
          "updatedAt": "2019-02-26T17:27:06Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "s/subgroups/groups?",
              "createdAt": "2019-02-26T17:25:14Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 67,
              "body": "s/PRF(k,x)/y",
              "createdAt": "2019-02-26T17:25:51Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 179,
              "body": "Several documents use `h` as the cofactor -- can we adopt that same terminology? Can we move it to a \"definitions\" section?",
              "createdAt": "2019-02-26T17:26:51Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA4NDc1ODM5",
          "commit": {
            "abbreviatedOid": "39b6776"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-27T11:39:17Z",
          "updatedAt": "2019-02-27T11:39:17Z",
          "comments": [
            {
              "originalPosition": 179,
              "body": "I've mentioned the use of h in the opening steps of section {{#oprf}}",
              "createdAt": "2019-02-27T11:39:17Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            }
          ]
        }
      ]
    },
    {
      "number": 21,
      "id": "MDExOlB1bGxSZXF1ZXN0MjU3MDM4NzQ5",
      "title": "Updated test vectors and ciphersuites",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/21",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #6 \r\n- Provide test vectors for DLEQ proofs and batched DLEQ. \r\n- Also focus on fewer ciphersuites that we support (think this is easier for providing reference implementations). Do you think this is enough? Are there any others you would like to see included?",
      "createdAt": "2019-02-28T11:49:32Z",
      "updatedAt": "2019-03-01T15:52:33Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "389064d2f1a159426b545507becb6e59de3b1697",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/updated-testvecs",
      "headRefOid": "e5edcddaa576d3e52b0d69b2fa4a7a67d8026e87",
      "closedAt": "2019-03-01T15:52:32Z",
      "mergedAt": "2019-03-01T15:52:32Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "343156390d60cac248257c7e25f81d1ad839fc01"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA5Mjg2Mjcx",
          "commit": {
            "abbreviatedOid": "29ab987"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2019-02-28T20:12:39Z",
          "updatedAt": "2019-02-28T20:13:57Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Can you drop references to both here?",
              "createdAt": "2019-02-28T20:12:39Z",
              "updatedAt": "2019-03-01T14:11:44Z"
            },
            {
              "originalPosition": 54,
              "body": "Should we drop \"Samples that are larger...\" and make the former sentence say \"d1,...,dn MUST be smaller\"?",
              "createdAt": "2019-02-28T20:13:25Z",
              "updatedAt": "2019-03-01T14:11:44Z"
            },
            {
              "originalPosition": 73,
              "body": "What hash function is used for HKDF here? ",
              "createdAt": "2019-02-28T20:13:41Z",
              "updatedAt": "2019-03-01T14:11:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA5NjUxMzAx",
          "commit": {
            "abbreviatedOid": "e5edcdd"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-03-01T15:52:26Z",
          "updatedAt": "2019-03-01T15:52:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 22,
      "id": "MDExOlB1bGxSZXF1ZXN0MjU4NzM3NDk5",
      "title": "Make ciphersuites explicit and add discussion of additive blinding",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/22",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-03-06T14:19:05Z",
      "updatedAt": "2019-03-08T17:48:27Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "343156390d60cac248257c7e25f81d1ad839fc01",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/ciphersuites",
      "headRefOid": "7f176d85b6c14c17a7af952ccb411c654d1d01d2",
      "closedAt": "2019-03-08T17:48:27Z",
      "mergedAt": "2019-03-08T17:48:27Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "da7bc6a3d49616e53760a9014b2acc94907a1a06"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Made the ciphersuites more explicit in line with the specification in https://github.com/chris-wood/draft-irtf-cfrg-hash-to-curve. I also removed the P-521 ciphersuite because I don't think there is a secure way of instantiating it with SHA-2 primitives.",
          "createdAt": "2019-03-08T10:12:54Z",
          "updatedAt": "2019-03-08T10:16:56Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood still happy to merge?",
          "createdAt": "2019-03-08T17:33:02Z",
          "updatedAt": "2019-03-08T17:33:02Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjExNDAyMjc4",
          "commit": {
            "abbreviatedOid": "55c6412"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Please feel free to merge. Thanks!",
          "createdAt": "2019-03-06T18:37:51Z",
          "updatedAt": "2019-03-06T18:38:53Z",
          "comments": [
            {
              "originalPosition": 342,
              "body": "s/ECVOPRF/ECOPRF, here and elsewhere? Or are we keeping the V in VOPRF to indicate that it's optional?",
              "createdAt": "2019-03-06T18:37:52Z",
              "updatedAt": "2019-03-08T10:43:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyMzk4Mjc4",
          "commit": {
            "abbreviatedOid": "7f176d8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-03-08T17:48:12Z",
          "updatedAt": "2019-03-08T17:48:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 23,
      "id": "MDExOlB1bGxSZXF1ZXN0MjU5Nzg2MDgz",
      "title": "Add notes on additional key consistency constraints.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/23",
      "state": "CLOSED",
      "author": "e271828-",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Covers some of the points we went over in person last month, and corrects a few typos.",
      "createdAt": "2019-03-10T20:16:39Z",
      "updatedAt": "2019-03-11T05:25:35Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "9186bd55e639dc38c33e8e9b032f5132807e1cb8",
      "headRepository": "e271828-/draft-sullivan-cfrg-oprf",
      "headRefName": "key-consistency",
      "headRefOid": "58e8e7c00fcd3d07e075b51e63709aa35975927d",
      "closedAt": "2019-03-11T05:25:35Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the suggested changes. We're currently working from draft-sullivan-cfrg-voprf.md for the latest draft, would it be possible to make the changes to this file instead? Thanks!",
          "createdAt": "2019-03-10T20:40:46Z",
          "updatedAt": "2019-03-10T20:40:46Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 24,
      "id": "MDExOlB1bGxSZXF1ZXN0MjU5Nzg3NDMy",
      "title": "Small changes and typos",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/24",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Change file name to oprf\r\n- Fix typos in algorithm inputs\r\n- Make the h2c ciphersuites a bit briefer\r\n- Switched the Ristretto ciphersuite to use SHA-512 to be consistent with the Curve25519 h2c ciphersuite.",
      "createdAt": "2019-03-10T20:36:32Z",
      "updatedAt": "2019-03-11T15:19:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "9186bd55e639dc38c33e8e9b032f5132807e1cb8",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/oprf-name-change",
      "headRefOid": "eaa5c04156bb734166385744aaab8cb52f235f87",
      "closedAt": "2019-03-11T15:19:36Z",
      "mergedAt": "2019-03-11T15:19:36Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a7e7f5b7075512b882ec487adfb4a2c239835f5d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyOTAwMzg2",
          "commit": {
            "abbreviatedOid": "eaa5c04"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-03-11T15:19:32Z",
          "updatedAt": "2019-03-11T15:19:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 25,
      "id": "MDExOlB1bGxSZXF1ZXN0MjU5ODM2NDc5",
      "title": "Add notes on additional key consistency constraints.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/25",
      "state": "CLOSED",
      "author": "e271828-",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Covers some of the points we went over in person last month, and corrects a few typos.\r\n\r\n(On the correct document this time.)",
      "createdAt": "2019-03-11T05:26:36Z",
      "updatedAt": "2019-03-11T16:33:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "9186bd55e639dc38c33e8e9b032f5132807e1cb8",
      "headRepository": "e271828-/draft-sullivan-cfrg-oprf",
      "headRefName": "key-consistency-v2",
      "headRefOid": "ee99160e849d6dfbac39d3b68bf91c682fb8bf9c",
      "closedAt": "2019-03-11T16:33:04Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@e271828- can you please resolve the conflicts so we can merge?",
          "createdAt": "2019-03-11T16:31:55Z",
          "updatedAt": "2019-03-11T16:31:55Z"
        },
        {
          "author": "e271828-",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing in favor of https://github.com/chris-wood/draft-sullivan-cfrg-oprf/pull/26",
          "createdAt": "2019-03-11T16:33:04Z",
          "updatedAt": "2019-03-11T16:33:04Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyNzIyNjY1",
          "commit": {
            "abbreviatedOid": "fa17562"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-03-11T09:16:01Z",
          "updatedAt": "2019-03-11T09:16:01Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyODEwODgx",
          "commit": {
            "abbreviatedOid": "fa17562"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-03-11T12:42:40Z",
          "updatedAt": "2019-03-11T12:42:40Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Hmm, I don't quite understand this example. Could we provide some more details?",
              "createdAt": "2019-03-11T12:42:40Z",
              "updatedAt": "2019-03-11T16:21:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyODExMTIx",
          "commit": {
            "abbreviatedOid": "fa17562"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "The second example LGTM! I just don't quite understand the first. ",
          "createdAt": "2019-03-11T12:43:13Z",
          "updatedAt": "2019-03-11T12:43:13Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyODcyNzYw",
          "commit": {
            "abbreviatedOid": "fa17562"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-03-11T14:36:39Z",
          "updatedAt": "2019-03-11T14:36:40Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I believe this is just referring to the fact that having short key cycles can lead to a similar deanonymising effect as using individual keys for each client V.\r\n\r\nPerhaps we could reword to the following:\r\n\r\n> For this side effect to hold, P must also be prevented from using other techniques to manipulate their public key within the trusted registry to reduce client anonymity. For example, if P's public key is rotated too frequently then this may stratify the user base into small anonymity groups (those with VOPRF_Sign outputs taken from a given key epoch). In this case, it may become practical to link VOPRF sessions for a given user and thus compromises their privacy.",
              "createdAt": "2019-03-11T14:36:40Z",
              "updatedAt": "2019-03-11T16:21:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyOTQ2MTMw",
          "commit": {
            "abbreviatedOid": "ee99160"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-03-11T16:31:23Z",
          "updatedAt": "2019-03-11T16:31:23Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyOTQ2ODc4",
          "commit": {
            "abbreviatedOid": "ee99160"
          },
          "author": "e271828-",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-03-11T16:32:44Z",
          "updatedAt": "2019-03-11T16:32:45Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "This is correct. I've accepted @alxdavids wording and resubmitted in https://github.com/chris-wood/draft-sullivan-cfrg-oprf/pull/26 to keep the diff clean.",
              "createdAt": "2019-03-11T16:32:45Z",
              "updatedAt": "2019-03-11T16:32:45Z"
            }
          ]
        }
      ]
    },
    {
      "number": 26,
      "id": "MDExOlB1bGxSZXF1ZXN0MjYwMDQzMzA2",
      "title": "Clarifying key consistency comments.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/26",
      "state": "MERGED",
      "author": "e271828-",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Covers some of the points we went over in person last month, and corrects a few typos.",
      "createdAt": "2019-03-11T16:31:29Z",
      "updatedAt": "2019-03-11T23:04:34Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "a7e7f5b7075512b882ec487adfb4a2c239835f5d",
      "headRepository": "e271828-/draft-sullivan-cfrg-oprf",
      "headRefName": "key-consistency-v3",
      "headRefOid": "fc90b3d19a5d5d2b7342bd1156d5159555d5ae43",
      "closedAt": "2019-03-11T16:32:21Z",
      "mergedAt": "2019-03-11T16:32:21Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "036752b6d0aa40c408ee400842dda7aa6d7961b5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyOTQ2NjI2",
          "commit": {
            "abbreviatedOid": "fc90b3d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-03-11T16:32:16Z",
          "updatedAt": "2019-03-11T16:32:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 38,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk0Nzk2NzQ0",
      "title": "Clarifies OPRF applications",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/38",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Fixes #37: correct applications of OPRF for password domain\r\n- Add txt for 03 release\r\n- Update address information",
      "createdAt": "2019-07-05T09:09:52Z",
      "updatedAt": "2019-07-05T13:36:33Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "036752b6d0aa40c408ee400842dda7aa6d7961b5",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/passwords",
      "headRefOid": "b07d64c8e1dd7e5af1848a81417972e52b99f2c3",
      "closedAt": "2019-07-05T13:36:18Z",
      "mergedAt": "2019-07-05T13:36:18Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f2f79d02e9e2ee347ca7e9c3438397af55a284de"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NDA3NzI1",
          "commit": {
            "abbreviatedOid": "b07d64c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-05T13:35:07Z",
          "updatedAt": "2019-07-05T13:35:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 39,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk0ODExNTcw",
      "title": "Fix minor issues from Hugo",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/39",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #35 ",
      "createdAt": "2019-07-05T09:52:41Z",
      "updatedAt": "2019-07-08T13:34:46Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "95bd6f07e5c50d4a612f9cf07a8b21fec9d08521",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/minor-comments-from-hugo",
      "headRefOid": "50b9a592fbbad5ec342e5529aa2262dbe98968d7",
      "closedAt": "2019-07-08T13:34:46Z",
      "mergedAt": "2019-07-08T13:34:46Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "95e77f81fcb6906ab6bbedd59674c7cb7301d4a1"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids can you resolve the conflicts? Feel free to merge when done!",
          "createdAt": "2019-07-08T13:05:51Z",
          "updatedAt": "2019-07-08T13:05:51Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NDA5Mzcx",
          "commit": {
            "abbreviatedOid": "d17d804"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2019-07-05T13:38:45Z",
          "updatedAt": "2019-07-05T13:43:42Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "GG is of prime order p, right? We should say so if that's the case.",
              "createdAt": "2019-07-05T13:38:45Z",
              "updatedAt": "2019-07-08T13:33:44Z"
            },
            {
              "originalPosition": 92,
              "body": "Did {{NIST}} not work?",
              "createdAt": "2019-07-05T13:39:52Z",
              "updatedAt": "2019-07-08T13:33:44Z"
            },
            {
              "originalPosition": 119,
              "body": "```suggestion\r\n 1. N := (r^(-1))Z\r\n```",
              "createdAt": "2019-07-05T13:40:15Z",
              "updatedAt": "2019-07-08T13:33:44Z"
            },
            {
              "originalPosition": 101,
              "body": "```suggestion\r\n 1. N := (r^(-1))Z\r\n```",
              "createdAt": "2019-07-05T13:40:20Z",
              "updatedAt": "2019-07-08T13:33:44Z"
            },
            {
              "originalPosition": 150,
              "body": "```suggestion\r\nfashion as is possible in Schnorr or (EC)DSA scenarios where fresh randomness is\r\n```",
              "createdAt": "2019-07-05T13:41:36Z",
              "updatedAt": "2019-07-08T13:33:44Z"
            },
            {
              "originalPosition": 133,
              "body": "I wonder if this is a choice we should specify. It seems use of a different blinding technique is an entirely separate protocol. Maybe we ought to (in a future issue) make the blinding choice a parameter and put it behind a parameterized function, e.g., `Blind()`?",
              "createdAt": "2019-07-05T13:43:38Z",
              "updatedAt": "2019-07-08T13:33:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NzY0Mjk2",
          "commit": {
            "abbreviatedOid": "d17d804"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-08T08:47:54Z",
          "updatedAt": "2019-07-08T08:47:54Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "No, because it's in a ~~~ block I believe",
              "createdAt": "2019-07-08T08:47:54Z",
              "updatedAt": "2019-07-08T13:33:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NzY1NTM5",
          "commit": {
            "abbreviatedOid": "d292389"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-08T08:50:03Z",
          "updatedAt": "2019-07-08T08:50:04Z",
          "comments": [
            {
              "originalPosition": 133,
              "body": "I agree, I think this would be a good change to make for a future version.",
              "createdAt": "2019-07-08T08:50:03Z",
              "updatedAt": "2019-07-08T13:33:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NzczMDY2",
          "commit": {
            "abbreviatedOid": "0ba38a3"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-08T09:04:03Z",
          "updatedAt": "2019-07-08T09:04:03Z",
          "comments": [
            {
              "originalPosition": 133,
              "body": "I'll make a separate issue to track it after the submission today",
              "createdAt": "2019-07-08T09:04:03Z",
              "updatedAt": "2019-07-08T13:33:44Z"
            }
          ]
        }
      ]
    },
    {
      "number": 40,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk0ODE0MDU2",
      "title": "Remove signing terminology",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/40",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #34:\r\n- Replace signing terminology to avoid confusion with asymmetric primitives\r\n- Replace OPRF_Sign with OPRF_Eval",
      "createdAt": "2019-07-05T09:59:43Z",
      "updatedAt": "2019-07-05T13:46:59Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "036752b6d0aa40c408ee400842dda7aa6d7961b5",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/oprf-eval",
      "headRefOid": "ecc8161333c4edd2d9cab0da9c6644c57a85d472",
      "closedAt": "2019-07-05T13:46:59Z",
      "mergedAt": "2019-07-05T13:46:59Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "8d4d4d8e6754db177152b842af51ae0e53230eb3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NDEzNDU5",
          "commit": {
            "abbreviatedOid": "ecc8161"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-05T13:46:53Z",
          "updatedAt": "2019-07-05T13:46:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 41,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk0ODE2MjE2",
      "title": "Use a fixed generator taken from group description.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/41",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #33",
      "createdAt": "2019-07-05T10:05:42Z",
      "updatedAt": "2019-07-05T13:51:30Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "8d4d4d8e6754db177152b842af51ae0e53230eb3",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/generator-desc",
      "headRefOid": "2f8adbbefc865d2726807061d540d4100e687295",
      "closedAt": "2019-07-05T13:51:30Z",
      "mergedAt": "2019-07-05T13:51:30Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "cc1eff10d07b8c9f632e81760b8bd07dec071837"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NDE0Mzcy",
          "commit": {
            "abbreviatedOid": "c45ba39"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-05T13:48:47Z",
          "updatedAt": "2019-07-05T13:48:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 42,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk0ODIxODE4",
      "title": "Streamline and correct OPRF security properties",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/42",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #32",
      "createdAt": "2019-07-05T10:23:06Z",
      "updatedAt": "2019-07-08T16:51:09Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "036752b6d0aa40c408ee400842dda7aa6d7961b5",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/oprf-sec",
      "headRefOid": "a12777268966122ba418d5103fb58727762e2553",
      "closedAt": "2019-07-08T16:51:09Z",
      "mergedAt": "2019-07-08T16:51:08Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "af83879c57bf7bc579cf44c73353b96ebfc61d34"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "The reason that I removed these definitions is because they're implied by pseudorandomness. Any function that is malleable cannot be pseudorandom, because it would be distinguishable from some random function (which is not malleable with high probability). The same with unlinkability, if you have obliviousness and pseudorandomness then you shouldn't be able to invert the function.\r\n\r\nIf you would prefer I could add some text that describes that (based on pseudoranomness and unlinkability) then we have unlinkability and non-malleability. But, I agree with Hugo that listing these properties separately from pseudorandomness is unnecessary.",
          "createdAt": "2019-07-08T10:10:50Z",
          "updatedAt": "2019-07-08T10:10:50Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> If you would prefer I could add some text that describes that (based on pseudoranomness and unlinkability) then we have unlinkability and non-malleability.\r\n\r\nYeah, I think adding even parenthetical text that says these properties hold is useful. Can we do that?",
          "createdAt": "2019-07-08T13:03:54Z",
          "updatedAt": "2019-07-08T13:03:54Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "> > If you would prefer I could add some text that describes that (based on pseudoranomness and unlinkability) then we have unlinkability and non-malleability.\r\n> \r\n> Yeah, I think adding even parenthetical text that says these properties hold is useful. Can we do that?\r\n\r\nSure, will do!",
          "createdAt": "2019-07-08T13:06:20Z",
          "updatedAt": "2019-07-08T13:06:20Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood let me know what you think about the new text that I have added.",
          "createdAt": "2019-07-08T13:43:05Z",
          "updatedAt": "2019-07-08T13:43:05Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NTg5OTI5",
          "commit": {
            "abbreviatedOid": "f682387"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Good correction in the pseudo randomness definition! I only have concerns about dropping two other properties. @alxdavids, can you comment?",
          "createdAt": "2019-07-06T13:44:48Z",
          "updatedAt": "2019-07-06T13:45:30Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Why did we remove this property?",
              "createdAt": "2019-07-06T13:44:48Z",
              "updatedAt": "2019-07-08T13:42:00Z"
            },
            {
              "originalPosition": 21,
              "body": "And this one?",
              "createdAt": "2019-07-06T13:44:58Z",
              "updatedAt": "2019-07-08T13:42:00Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU5MDMwODk3",
          "commit": {
            "abbreviatedOid": "a127772"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-08T16:51:04Z",
          "updatedAt": "2019-07-08T16:51:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 43,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk0ODMwMDY2",
      "title": "Update blinding terminology",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/43",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #28:\r\n- Denote the additive blinding case (from OPAQUE) by fixed-base blinding (FBB)\r\n- Denote multiplicative case (from Privacy Pass) by variable-base blinding (VBB)",
      "createdAt": "2019-07-05T10:50:20Z",
      "updatedAt": "2019-07-05T13:45:07Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "036752b6d0aa40c408ee400842dda7aa6d7961b5",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/blinding",
      "headRefOid": "895fbbe5014498e57834c41ef13a58e044ec46ab",
      "closedAt": "2019-07-05T13:45:07Z",
      "mergedAt": "2019-07-05T13:45:06Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "cc891c1c79e393925f4b54100da5f6f7c415627b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NDEyNTUy",
          "commit": {
            "abbreviatedOid": "895fbbe"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-05T13:45:00Z",
          "updatedAt": "2019-07-05T13:45:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 44,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk0ODM3NTM0",
      "title": "Replace PRNG with additional RO function",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/44",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #36\r\n- Usage of PRNG is unnecessary.\r\n- We now instantiate with a generic RO\r\n- Specific ciphersuites are unchanged\r\n- HKDF -> HKDF_Expand",
      "createdAt": "2019-07-05T11:16:11Z",
      "updatedAt": "2019-07-08T13:18:31Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "ecc849706ddac8d054ca9b6fdd0c400b5a02e4e9",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/prng-to-ro",
      "headRefOid": "06d10866c3cf30fd20aa09ce10f43b34bc6d0304",
      "closedAt": "2019-07-08T13:18:31Z",
      "mergedAt": "2019-07-08T13:18:31Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "95bd6f07e5c50d4a612f9cf07a8b21fec9d08521"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the changes! Once the conflicts are resolved, feel free to merge.",
          "createdAt": "2019-07-08T13:08:26Z",
          "updatedAt": "2019-07-08T13:08:26Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NTg5NDg2",
          "commit": {
            "abbreviatedOid": "b0f81d3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2019-07-06T13:31:19Z",
          "updatedAt": "2019-07-06T13:35:53Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "```suggestion\r\n## Random oracle instantiations for proofs\r\n```",
              "createdAt": "2019-07-06T13:31:19Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            },
            {
              "originalPosition": 80,
              "body": "```suggestion\r\nor we can use a variable-length output generator. For example, for groups with an\r\n```",
              "createdAt": "2019-07-06T13:32:17Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            },
            {
              "originalPosition": 82,
              "body": "Is one preferred over the other? Why? (We should probably include some rationale text here.)",
              "createdAt": "2019-07-06T13:33:21Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            },
            {
              "originalPosition": 92,
              "body": "```suggestion\r\nIn these cases, the iterating integer i is increased monotonically to i' until such di' is\r\n```",
              "createdAt": "2019-07-06T13:34:10Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            },
            {
              "originalPosition": 92,
              "body": "In general, this is underspecified. We should leave a TODO here at least to write this out.",
              "createdAt": "2019-07-06T13:34:26Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            },
            {
              "originalPosition": 103,
              "body": "It's typically written as `HKDF-Expand`, not `HKDF_Expand`. Can we use that instead?",
              "createdAt": "2019-07-06T13:34:52Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            },
            {
              "originalPosition": 117,
              "body": "Are these test vectors correct with HKDF? We should probably remove them, temporarily, if not.",
              "createdAt": "2019-07-06T13:35:15Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            },
            {
              "originalPosition": 65,
              "body": "```suggestion\r\nmultiple blinded PRF inputs\u00a0[ Mi ] for i in 1...n. Then P computes the array [Zi]\r\n```",
              "createdAt": "2019-07-06T13:35:39Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            },
            {
              "originalPosition": 66,
              "body": "```suggestion\r\nand replaces DLEQ_Generate with Batched_DLEQ_Generate over these arrays. The\r\n```",
              "createdAt": "2019-07-06T13:35:46Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4ODA4NDMy",
          "commit": {
            "abbreviatedOid": "b0f81d3"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-08T10:13:02Z",
          "updatedAt": "2019-07-08T10:13:02Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "I don't think either is preferred, they're just examples of functions that you might want to use. We give ciphersuites below that use HKDF_Expand, is that enough?",
              "createdAt": "2019-07-08T10:13:02Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4ODA4NTMw",
          "commit": {
            "abbreviatedOid": "b0f81d3"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-08T10:13:14Z",
          "updatedAt": "2019-07-08T10:13:14Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "Good point, I will add this.",
              "createdAt": "2019-07-08T10:13:14Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4ODA4NTc2",
          "commit": {
            "abbreviatedOid": "b0f81d3"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-08T10:13:20Z",
          "updatedAt": "2019-07-08T10:13:21Z",
          "comments": [
            {
              "originalPosition": 103,
              "body": "Sure",
              "createdAt": "2019-07-08T10:13:20Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4ODA4ODcx",
          "commit": {
            "abbreviatedOid": "b0f81d3"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-08T10:13:59Z",
          "updatedAt": "2019-07-08T10:13:59Z",
          "comments": [
            {
              "originalPosition": 117,
              "body": "Yeah they are correct with HKDF (rather than Shake)",
              "createdAt": "2019-07-08T10:13:59Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            }
          ]
        }
      ]
    },
    {
      "number": 45,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk1MjcxNjI0",
      "title": "Remove detailed specification of blind RSA",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/45",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #31: the RSA specification is a bit redundant",
      "createdAt": "2019-07-08T10:25:19Z",
      "updatedAt": "2019-07-08T13:06:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "cc1eff10d07b8c9f632e81760b8bd07dec071837",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/fix-rsa-intro",
      "headRefOid": "4d7ea8adeafd5af223adcdd272ed1c9ff4766533",
      "closedAt": "2019-07-08T13:06:08Z",
      "mergedAt": "2019-07-08T13:06:08Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ecc849706ddac8d054ca9b6fdd0c400b5a02e4e9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4ODg0NzE1",
          "commit": {
            "abbreviatedOid": "3ec7fc7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-08T13:01:38Z",
          "updatedAt": "2019-07-08T13:02:39Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nthat is signed. One of the more popular blind signature schemes is based on the\r\n```",
              "createdAt": "2019-07-08T13:01:38Z",
              "updatedAt": "2019-07-08T13:05:23Z"
            },
            {
              "originalPosition": 39,
              "body": "```suggestion\r\nvalue x. The verification procedure is thus symmetric as it requires\r\n```",
              "createdAt": "2019-07-08T13:02:33Z",
              "updatedAt": "2019-07-08T13:05:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 46,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk1MjcyNjM3",
      "title": "Remove Section Section refs",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/46",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #30",
      "createdAt": "2019-07-08T10:28:06Z",
      "updatedAt": "2019-07-08T13:00:55Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "cc1eff10d07b8c9f632e81760b8bd07dec071837",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/correct-sections",
      "headRefOid": "ee78e3889347514da1530ebdc7c77b0da6f05dc9",
      "closedAt": "2019-07-08T13:00:55Z",
      "mergedAt": "2019-07-08T13:00:55Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "dc8ef33f9ec3be7ca877da81d9e153903babd6c1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4ODg0Mjcy",
          "commit": {
            "abbreviatedOid": "ee78e38"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-08T13:00:49Z",
          "updatedAt": "2019-07-08T13:00:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 47,
      "id": "MDExOlB1bGxSZXF1ZXN0MzAwNzE0NDQ2",
      "title": "Update ciphersuites to be in line with latest h2c draft",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/47",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-07-24T13:03:30Z",
      "updatedAt": "2019-07-24T17:55:02Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "c2610a6762792f5b675a398b40e3103039f5c812",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/update-ciphersuites",
      "headRefOid": "411eed89453afc4a9a2e186cd68d49fe0217b465",
      "closedAt": "2019-07-24T13:26:00Z",
      "mergedAt": "2019-07-24T13:26:00Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2d5eece270e08d0697862676903a53214cb28fa9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2MDE2OTAx",
          "commit": {
            "abbreviatedOid": "411eed8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-24T13:25:55Z",
          "updatedAt": "2019-07-24T13:25:55Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2MTg2NDU1",
          "commit": {
            "abbreviatedOid": "411eed8"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-24T17:54:27Z",
          "updatedAt": "2019-07-24T17:54:27Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "This should be `NIST P-256` or `secp256r1`\r\n",
              "createdAt": "2019-07-24T17:54:27Z",
              "updatedAt": "2019-07-24T17:54:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2MTg2NzY2",
          "commit": {
            "abbreviatedOid": "411eed8"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-24T17:55:02Z",
          "updatedAt": "2019-07-24T17:55:02Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Here the group name is `ristretto255`",
              "createdAt": "2019-07-24T17:55:02Z",
              "updatedAt": "2019-07-24T17:55:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 48,
      "id": "MDExOlB1bGxSZXF1ZXN0MzAwNzMxNzYz",
      "title": "Fix modular reduction nits",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/48",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "(as mentioned in #27)",
      "createdAt": "2019-07-24T13:44:43Z",
      "updatedAt": "2019-07-24T20:18:26Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "2d5eece270e08d0697862676903a53214cb28fa9",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/modp",
      "headRefOid": "ee6c2c3675db35a38e9b8dc4a514d9faeea5bfba",
      "closedAt": "2019-07-24T20:18:26Z",
      "mergedAt": "2019-07-24T20:18:26Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "6c2269e2c1a4f3c9f51e8ac2282b96d331c3ac34"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2MTg4NzIz",
          "commit": {
            "abbreviatedOid": "ee3f97e"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "make sure the modulo operation is applied only to integers. \r\n",
          "createdAt": "2019-07-24T17:58:24Z",
          "updatedAt": "2019-07-24T18:03:32Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": " Modulo operation is only applied to integers since H2 outputs a point.",
              "createdAt": "2019-07-24T17:58:24Z",
              "updatedAt": "2019-07-24T19:39:09Z"
            },
            {
              "originalPosition": 14,
              "body": "here H1 outputs a string, which cannot be added to a point. Also,  modulo operation can be applied to points",
              "createdAt": "2019-07-24T18:00:26Z",
              "updatedAt": "2019-07-24T19:39:09Z"
            },
            {
              "originalPosition": 37,
              "body": "```suggestion\r\n 1. A' := (sG + cY)\r\n```",
              "createdAt": "2019-07-24T18:01:40Z",
              "updatedAt": "2019-07-24T19:39:09Z"
            },
            {
              "originalPosition": 38,
              "body": "```suggestion\r\n 2. B' := (sM + cZ)\r\n```",
              "createdAt": "2019-07-24T18:01:48Z",
              "updatedAt": "2019-07-24T19:39:09Z"
            },
            {
              "originalPosition": 24,
              "body": "```suggestion\r\n 2. A := rG and B := rM\r\n```",
              "createdAt": "2019-07-24T18:02:36Z",
              "updatedAt": "2019-07-24T19:39:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2MTkyMDI4",
          "commit": {
            "abbreviatedOid": "ee3f97e"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-24T18:04:23Z",
          "updatedAt": "2019-07-24T18:04:23Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "In the line \r\n- GG: Ristretto {{RISTRETTO}}\r\n\r\nshould be \r\n- GG: Ristretto255 {{RISTRETTO}}\r\n\r\n\r\n",
              "createdAt": "2019-07-24T18:04:23Z",
              "updatedAt": "2019-07-24T19:39:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2MjMwNTQz",
          "commit": {
            "abbreviatedOid": "ee3f97e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-24T19:14:25Z",
          "updatedAt": "2019-07-24T19:14:25Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "s/can be applied to points/cannot",
              "createdAt": "2019-07-24T19:14:25Z",
              "updatedAt": "2019-07-24T19:39:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2MjMxMDUx",
          "commit": {
            "abbreviatedOid": "ee3f97e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Thanks for the corrections! Requesting changes to fix the `mod p` misuses.",
          "createdAt": "2019-07-24T19:15:24Z",
          "updatedAt": "2019-07-24T19:15:24Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2MjUxNDM0",
          "commit": {
            "abbreviatedOid": "ee6c2c3"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-24T19:57:27Z",
          "updatedAt": "2019-07-24T19:57:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 49,
      "id": "MDExOlB1bGxSZXF1ZXN0MzE4ODk5NDM2",
      "title": "Add release 01 changes",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/49",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Release 01 was done a while ago but I never pushed some of the changes here, so here they are.",
      "createdAt": "2019-09-18T16:28:59Z",
      "updatedAt": "2019-09-19T23:22:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "6c2269e2c1a4f3c9f51e8ac2282b96d331c3ac34",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "release-01",
      "headRefOid": "d3b8d4659a25bef29dc96981af49f407dabe8d39",
      "closedAt": "2019-09-19T23:22:51Z",
      "mergedAt": "2019-09-19T23:22:51Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "346323edd87ee1ad5f5fbef7a34b4ac14874d712"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkwODkxMzA0",
          "commit": {
            "abbreviatedOid": "d3b8d46"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-09-19T23:22:44Z",
          "updatedAt": "2019-09-19T23:22:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 55,
      "id": "MDExOlB1bGxSZXF1ZXN0MzI0NzM0NDU2",
      "title": "Updated security considerations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/55",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Intended to address #50 and #52. \r\n\r\nChanges:\r\n- Discussion of Q-strong-DH oracle attacks and effects on OPRF security\r\n- Updated ciphersuites with larger security parameters (> 128 bits of security)\r\n- More discussion of cryptographic security reduction from [JKK14] for the construction that we give\r\n- More detailed discussion of security/privacy implications arising from user segregation and key rotation",
      "createdAt": "2019-10-04T15:28:53Z",
      "updatedAt": "2019-11-03T03:09:40Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "346323edd87ee1ad5f5fbef7a34b4ac14874d712",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/sec-considerations",
      "headRefOid": "93a5742788681488121cbfefa8510be6513183bb",
      "closedAt": "2019-11-03T03:09:40Z",
      "mergedAt": "2019-11-03T03:09:40Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a920c2292f56231410576eadf10071a8791a4749"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "cc @armfazh",
          "createdAt": "2019-10-04T15:32:22Z",
          "updatedAt": "2019-10-04T15:32:22Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood also CI builds seem to be routinely failing due to ghpages:\r\n```\r\ngit -C /tmp/ghpages121 push -q https://github.com/cfrg/draft-irtf-cfrg-voprf gh-pages\r\nPassword for 'https://97cdf725d3395a6b62805b85760906d122321d22@github.com': lib/ghpages.mk:101: recipe for target 'ghpages' failed\r\nmake: *** [ghpages] Hangup\r\n``` \r\nany ideas on what the best fix is?",
          "createdAt": "2019-10-04T15:41:37Z",
          "updatedAt": "2019-10-04T15:41:37Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> @chris-wood also CI builds seem to be routinely failing due to ghpages:\r\n\r\nI think it was building the wrong branch. I updated things. Hopefully it's working now!",
          "createdAt": "2019-10-04T15:46:25Z",
          "updatedAt": "2019-10-04T15:46:25Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk3NTc0OTA1",
          "commit": {
            "abbreviatedOid": "8c38c39"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Great stuff! Requesting some changes around key rotation frequency, since I think we can probably do better there.",
          "createdAt": "2019-10-04T16:07:20Z",
          "updatedAt": "2019-10-28T16:39:52Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "This should probably go into the security considerations section, right?",
              "createdAt": "2019-10-04T16:07:20Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 99,
              "body": "```suggestion\r\nessentially without providing zero-knowledge proofs that verify the output\r\n```",
              "createdAt": "2019-10-04T16:08:30Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 74,
              "body": "```suggestion\r\n- if d == 0: C = ab*G; else: C is sampled uniformly GG(sp).\r\n```",
              "createdAt": "2019-10-28T16:29:31Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 112,
              "body": "```suggestion\r\nprover's (P) secret key, and Y = k*G be its corresponding 'public key' for some\r\n```",
              "createdAt": "2019-10-28T16:30:20Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 183,
              "body": "```suggestion\r\nprotocol only. See the paper for further details.\r\n```",
              "createdAt": "2019-10-28T16:31:28Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 266,
              "body": "```suggestion\r\nAs mentioned previously, the hardness of our (V)OPRF protocol depends on the\r\n```",
              "createdAt": "2019-10-28T16:32:16Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 261,
              "body": "```suggestion\r\nThis section discusses OPRF usage implications, along with some suggestions\r\n```",
              "createdAt": "2019-10-28T16:32:34Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 290,
              "body": "```suggestion\r\n(for example, {{BG04}} and {{Cheon06}}). In summary, known attacks reduce the\r\n```",
              "createdAt": "2019-10-28T16:32:56Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 335,
              "body": "```suggestion\r\nThis implies that any instantiation of H1 must be pre-image and collision\r\n```",
              "createdAt": "2019-10-28T16:34:14Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 426,
              "body": "```suggestion\r\nThe VOPRF variant helps mitigate this attack since each server evaluation can be bound to a known public key. However,\r\n```",
              "createdAt": "2019-10-28T16:36:31Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 427,
              "body": "```suggestion\r\n\r\n```",
              "createdAt": "2019-10-28T16:36:43Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 433,
              "body": "Could we mention some form of key transparency as a mitigation here, too?",
              "createdAt": "2019-10-28T16:37:34Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 462,
              "body": "```suggestion\r\nTo combat attacks of this nature, regular key rotation\r\n```",
              "createdAt": "2019-10-28T16:37:58Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 464,
              "body": "I wouldn't call this \"fairly regular\" -- maybe we can make it on the order of days or weeks, like TLS STEKs?",
              "createdAt": "2019-10-28T16:38:23Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 470,
              "body": "```suggestion\r\nsituations where client privacy is paramount, longer key cycles should be\r\n```",
              "createdAt": "2019-10-28T16:38:45Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 471,
              "body": "As above, I think some form of transparency might help achieve high update frequencies without compromising client privacy. ",
              "createdAt": "2019-10-28T16:39:21Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA4MDI2NDc1",
          "commit": {
            "abbreviatedOid": "2fa4d9a"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-10-28T17:35:14Z",
          "updatedAt": "2019-10-28T17:35:14Z",
          "comments": [
            {
              "originalPosition": 433,
              "body": "Yeah I can add this in.",
              "createdAt": "2019-10-28T17:35:14Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA4MDI2OTYy",
          "commit": {
            "abbreviatedOid": "2fa4d9a"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-10-28T17:35:58Z",
          "updatedAt": "2019-10-28T17:35:58Z",
          "comments": [
            {
              "originalPosition": 464,
              "body": "Days seem too short. We could possibly go to 1 week, but I think this is highly dependent on the number of users as well?",
              "createdAt": "2019-10-28T17:35:58Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA4NDUzMzI0",
          "commit": {
            "abbreviatedOid": "2fa4d9a"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-10-29T11:57:37Z",
          "updatedAt": "2019-10-29T11:57:37Z",
          "comments": [
            {
              "originalPosition": 471,
              "body": "I'll mention key transparency, but I still think that high update frequencies are going to be a problem? Key transparency just allows the client to check that the server is not mis-behaving right? ",
              "createdAt": "2019-10-29T11:57:37Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEwNzk3NjA1",
          "commit": {
            "abbreviatedOid": "93a5742"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-11-03T03:09:25Z",
          "updatedAt": "2019-11-03T03:09:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 57,
      "id": "MDExOlB1bGxSZXF1ZXN0MzI1MzIyOTkx",
      "title": "Protocol integration suggestions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/57",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Branch to be merged into alxdavids/sec-considerations branch as it depends on some changes in that branch.\r\n\r\nChanges:\r\n- Changes to some of the (V)OPRF functions\r\n- Suggestions for implementing OPRF evaluation as part of wider protocol\r\n\r\n@chris-wood are these recommendations for protocol integration helpful?",
      "createdAt": "2019-10-07T14:12:04Z",
      "updatedAt": "2019-11-04T20:27:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "alxdavids/sec-considerations",
      "baseRefOid": "93a5742788681488121cbfefa8510be6513183bb",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/protocol-integrations",
      "headRefOid": "5a4c4ec0655abe1463b3f5325062357fa34e6881",
      "closedAt": "2019-11-04T20:27:00Z",
      "mergedAt": "2019-11-04T20:27:00Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b2cab8dfeb8450579759a97a4dd84f82d8332bc7"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood Yeah I like your suggestions, happy to move things around and update the PR",
          "createdAt": "2019-10-28T17:43:57Z",
          "updatedAt": "2019-10-28T17:43:57Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay I've reordered the embedding section into the protocol specification section now @chris-wood, and removed redundant sections. Does this look better now?",
          "createdAt": "2019-10-29T12:41:21Z",
          "updatedAt": "2019-10-29T12:41:21Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA3OTkwODkw",
          "commit": {
            "abbreviatedOid": "49194b6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "The \"Recommended protocol integration\" section seems to contain a lot of redundant information that is probably better put elsewhere, e.g., in the core protocol description or in the security considerations. What do you think, @alxdavids?",
          "createdAt": "2019-10-28T16:42:52Z",
          "updatedAt": "2019-10-28T16:55:47Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "```suggestion\r\nprotocol takes place between a verifier (V) and a prover (P). Commonly, V is a client and P is a server, and so we use these names interchangeably throughout.\r\n```",
              "createdAt": "2019-10-28T16:42:52Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 49,
              "body": "```suggestion\r\nholds a secret key k for a PRF. The protocol allows the client to learn PRF evaluations\r\n```",
              "createdAt": "2019-10-28T16:43:00Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 50,
              "body": "```suggestion\r\non chosen inputs x in such a way that the server learns nothing of x.\r\n```",
              "createdAt": "2019-10-28T16:43:31Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 85,
              "body": "Can we use `DST` instead of `lbl` (to match hash-to-curve)?",
              "createdAt": "2019-10-28T16:44:07Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 139,
              "body": "```suggestion\r\n- VOPRF_Setup(l): Run (k,p) = OPRF_Setup(l), compute Y = k*G, where G is a\r\n```",
              "createdAt": "2019-10-28T16:45:08Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 139,
              "body": "(We should probably apply this to all expressions.)",
              "createdAt": "2019-10-28T16:46:22Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 303,
              "body": "This usage of HMAC is interesting! Could we not get the same result by computing H(lbl || x .. N)?",
              "createdAt": "2019-10-28T16:47:53Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 470,
              "body": "```suggestion\r\nsince {{JKK14}} provides a security proof of the VOPRF construction in the UC\r\n```",
              "createdAt": "2019-10-28T16:48:28Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 474,
              "body": "```suggestion\r\nThus, it is RECOMMENDED that any protocol that wishes to include an OPRF stage\r\n```",
              "createdAt": "2019-10-28T16:48:49Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 666,
              "body": "```suggestion\r\nimplies that any instantiation of H1 must be pre-image and collision resistant.\r\n```",
              "createdAt": "2019-10-28T16:49:28Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 541,
              "body": "Perhaps we should say these bytes SHOULD be uniformly distributed, and then describe what happens if they're not? (I'd move this to the security considerations, actually.)",
              "createdAt": "2019-10-28T16:51:26Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 544,
              "body": "What's the \"utility of client privacy\"?",
              "createdAt": "2019-10-28T16:51:36Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 546,
              "body": "I'd drop this section.",
              "createdAt": "2019-10-28T16:51:55Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 553,
              "body": "I'd drop this section, too, and maybe replace it with a sentence akin to, \"protocols which embed an OPRF evaluation MUST specify how group elements are encoded.\"",
              "createdAt": "2019-10-28T16:52:29Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 568,
              "body": "I think we should drop this section. Maybe it should just be a part of the Privacy pass spec?",
              "createdAt": "2019-10-28T16:53:36Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 607,
              "body": "We should mention this in the description of the protocol above! (And then drop this section.)",
              "createdAt": "2019-10-28T16:54:21Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 616,
              "body": "Again, I'd prefer this be part of the core protocol description. Maybe we include a \"key identifier\" as part of the server's response?",
              "createdAt": "2019-10-28T16:55:07Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA4MDMxMTMw",
          "commit": {
            "abbreviatedOid": "49194b6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-10-28T17:42:23Z",
          "updatedAt": "2019-10-28T17:42:24Z",
          "comments": [
            {
              "originalPosition": 303,
              "body": "Yeah that would be the same, I was just trying to reinforce the difference between the key and the input?",
              "createdAt": "2019-10-28T17:42:23Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzExMzM2NDY2",
          "commit": {
            "abbreviatedOid": "20efd12"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-04T20:25:38Z",
          "updatedAt": "2019-11-04T20:25:38Z",
          "comments": [
            {
              "originalPosition": 337,
              "body": "```suggestion\r\n 1. DST := \"oprf_derive_output\"\r\n```",
              "createdAt": "2019-11-04T20:25:38Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzExMzM2NTQ0",
          "commit": {
            "abbreviatedOid": "20efd12"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-04T20:25:46Z",
          "updatedAt": "2019-11-04T20:25:47Z",
          "comments": [
            {
              "originalPosition": 338,
              "body": "```suggestion\r\n 2. dk := H_2(DST, x .. N)\r\n```",
              "createdAt": "2019-11-04T20:25:46Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzExMzM2OTUx",
          "commit": {
            "abbreviatedOid": "20efd12"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-11-04T20:26:29Z",
          "updatedAt": "2019-11-04T20:26:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 59,
      "id": "MDExOlB1bGxSZXF1ZXN0MzI2NzcwNDE1",
      "title": "Update batching section",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/59",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #56:\r\n- More specificity on rejection sampling\r\n- Add batched unblinding algorithm",
      "createdAt": "2019-10-10T14:34:15Z",
      "updatedAt": "2019-11-03T03:16:55Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "a920c2292f56231410576eadf10071a8791a4749",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/update-batching",
      "headRefOid": "ce69d7c7f7cd2d734bcbd5393a07bc8661b73781",
      "closedAt": "2019-11-03T03:16:55Z",
      "mergedAt": "2019-11-03T03:16:55Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "864cc76655ee6fa6ec639140786eade6edad1479"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEwNzk3Njk4",
          "commit": {
            "abbreviatedOid": "6931fc2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-11-03T03:14:49Z",
          "updatedAt": "2019-11-03T03:14:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 60,
      "id": "MDExOlB1bGxSZXF1ZXN0MzI2NzgwOTE0",
      "title": "Update OPRF_Finalize algorithm",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/60",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "It is helpful in some applications to allow finalization over specific data. This change is based on the existing PR for protocol integrations and so needs to be merged into that branch before master.\r\n\r\nChanges:\r\n- Allows finalization over auxiliary data",
      "createdAt": "2019-10-10T14:54:19Z",
      "updatedAt": "2019-11-04T20:24:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "alxdavids/protocol-integrations",
      "baseRefOid": "c69e67c6364a0308315763f9c6c5c703519bb16e",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/voprf-finalize",
      "headRefOid": "9973aae75782b7ccd8a8893cf8e3068fa809e2ea",
      "closedAt": "2019-11-04T20:24:05Z",
      "mergedAt": "2019-11-04T20:24:05Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "20efd124e504100d1425a3d7473720fb295473d1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 61,
      "id": "MDExOlB1bGxSZXF1ZXN0MzM2NDYyNTEw",
      "title": "Alxdavids/sec considerations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/61",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-11-04T20:28:21Z",
      "updatedAt": "2019-11-04T20:30:33Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "864cc76655ee6fa6ec639140786eade6edad1479",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/sec-considerations",
      "headRefOid": "13fb2369789e2fdddb7bb1da3dacdb763af75cec",
      "closedAt": "2019-11-04T20:30:33Z",
      "mergedAt": "2019-11-04T20:30:33Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "115dce59acdbacf88cb2a2820a05f4c96a05b8aa"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 63,
      "id": "MDExOlB1bGxSZXF1ZXN0MzcxMzUxNjEx",
      "title": "Specify modifications in batching paradigm",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/63",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #62.\r\n\r\n- Previously batched versions of VOPRF_Eval, VOPRF_Blind and VOPRF_Unblind were not specified.\r\n- This change provides descriptions accepting with a modified API to allow for batched inputs/outputs.\r\n- Also change the way that we describe inputs and outputs to be more generic.\r\n- Describe conventions around the way that we talk about groups.\r\n- Provide some more context for notation that is used.",
      "createdAt": "2020-02-05T12:38:59Z",
      "updatedAt": "2020-03-01T21:14:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "9a20d27d05a23d6d950ff0b4e6d9d20b9130f30f",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/fix-batching-algorithms",
      "headRefOid": "19ae93a00dd82602d15decbe99a1263ad580d15d",
      "closedAt": "2020-03-01T21:14:36Z",
      "mergedAt": "2020-03-01T21:14:36Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "4ca97f73319a737e081b67bb14e1ea5ef624bdfd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzOTUyNzAz",
          "commit": {
            "abbreviatedOid": "2915cd1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-02-05T18:44:34Z",
          "updatedAt": "2020-03-01T21:14:07Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\ndocname: draft-irtf-cfrg-voprf-latest\r\n```",
              "createdAt": "2020-02-05T18:44:35Z",
              "updatedAt": "2020-03-01T21:14:27Z"
            }
          ]
        }
      ]
    },
    {
      "number": 64,
      "id": "MDExOlB1bGxSZXF1ZXN0MzcxMzk4NTEw",
      "title": "Update ciphersuites",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/64",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Specify OPRF ciphersuites explicitly\r\n- Use SSWU for P384\r\n- Update DST used for h2c\r\n",
      "createdAt": "2020-02-05T14:19:22Z",
      "updatedAt": "2020-03-01T19:30:34Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "9a20d27d05a23d6d950ff0b4e6d9d20b9130f30f",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/fix-ciphersuites",
      "headRefOid": "01f2ab25140a0c8e84f29f275896752c08f683e4",
      "closedAt": "2020-03-01T19:30:11Z",
      "mergedAt": "2020-03-01T19:30:11Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "4ed4aace32bef9360c241fb5d6ffc2cdcf2cdc23"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Updated, I'll merge if you're happy.",
          "createdAt": "2020-02-07T12:14:29Z",
          "updatedAt": "2020-02-07T12:14:29Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzOTQ5MzQ2",
          "commit": {
            "abbreviatedOid": "93a6ccf"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks for adding these! Looks good pending comments and question.",
          "createdAt": "2020-02-05T18:39:23Z",
          "updatedAt": "2020-02-05T18:40:07Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "Should we replace \"OPRF\" and \"VOPRF\" in the DST strings with \"RFCXXX-OPRF\" or \"RFCXXX-VOPRF\" (resp.)?",
              "createdAt": "2020-02-05T18:39:23Z",
              "updatedAt": "2020-02-07T12:17:32Z"
            },
            {
              "originalPosition": 10,
              "body": "```suggestion\r\n  - hash-to-curve DST: \"OPRF-curve448-SHA512-SSWU-RO-\"\r\n```\r\n\r\n(here and elsewhere)",
              "createdAt": "2020-02-05T18:39:47Z",
              "updatedAt": "2020-02-07T12:17:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MTE0Nzc2",
          "commit": {
            "abbreviatedOid": "93a6ccf"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-07T12:09:46Z",
          "updatedAt": "2020-02-07T12:09:47Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "Yeah I think that's a good idea.",
              "createdAt": "2020-02-07T12:09:46Z",
              "updatedAt": "2020-02-07T12:17:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MjM4MzE3",
          "commit": {
            "abbreviatedOid": "01f2ab2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-02-07T15:32:19Z",
          "updatedAt": "2020-02-07T15:32:23Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "We should probably keep the JSON representation elsewhere, i.e., not in the main document. Can we reformat this and drop a pointer to a JSON file, perhaps. stored in this repo?",
              "createdAt": "2020-02-07T15:32:19Z",
              "updatedAt": "2020-02-07T15:32:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MzY2MTI3",
          "commit": {
            "abbreviatedOid": "01f2ab2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-27T01:47:38Z",
          "updatedAt": "2020-02-27T01:47:38Z",
          "comments": [
            {
              "originalPosition": 512,
              "body": "Can we remove these, and then make issues for these vectors?",
              "createdAt": "2020-02-27T01:47:38Z",
              "updatedAt": "2020-02-27T01:47:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODc4MjI5",
          "commit": {
            "abbreviatedOid": "01f2ab2"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-01T18:52:10Z",
          "updatedAt": "2020-03-01T18:52:11Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "This change is dealt with in #65, I can merge that branch into this one if you think that would be better?",
              "createdAt": "2020-03-01T18:52:11Z",
              "updatedAt": "2020-03-01T18:52:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODc4MjM1",
          "commit": {
            "abbreviatedOid": "01f2ab2"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-01T18:52:18Z",
          "updatedAt": "2020-03-01T18:52:18Z",
          "comments": [
            {
              "originalPosition": 512,
              "body": "Same as above.",
              "createdAt": "2020-03-01T18:52:18Z",
              "updatedAt": "2020-03-01T18:52:18Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODgwNjE0",
          "commit": {
            "abbreviatedOid": "01f2ab2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-01T19:30:34Z",
          "updatedAt": "2020-03-01T19:30:34Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "Either works for me! Let\u2019s just merge this and fix after. ",
              "createdAt": "2020-03-01T19:30:34Z",
              "updatedAt": "2020-03-01T19:30:34Z"
            }
          ]
        }
      ]
    },
    {
      "number": 65,
      "id": "MDExOlB1bGxSZXF1ZXN0MzcyNTIzMzIy",
      "title": "Add test vectors generated from PoC",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/65",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Uses test vectors generated here: https://github.com/alxdavids/voprf-poc/tree/master/test-vectors\r\n- Still need test vectors for curve448",
      "createdAt": "2020-02-07T17:34:52Z",
      "updatedAt": "2020-03-03T10:41:42Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b9e0a19edea436e815858a357ea7ecc58c704feb",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/test-vectors",
      "headRefOid": "f4573f1dcdf5ec85a4d2c985913b75fc3aaa9cc7",
      "closedAt": "2020-03-03T10:41:42Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "This fixes #51 ",
          "createdAt": "2020-02-10T11:33:54Z",
          "updatedAt": "2020-02-10T11:33:54Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood This should be ready to go now.",
          "createdAt": "2020-03-02T10:53:39Z",
          "updatedAt": "2020-03-02T10:53:39Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Sure, yeah happy to approach this at a later date. Will create a separate PR to remove everything.",
          "createdAt": "2020-03-03T10:41:42Z",
          "updatedAt": "2020-03-03T10:41:42Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MjY3Mjk3",
          "commit": {
            "abbreviatedOid": "f4573f1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Can we remove all vectors until the document is more stable? (Then we can talk about the formatting and tooling around them.)",
          "createdAt": "2020-03-02T15:02:56Z",
          "updatedAt": "2020-03-02T15:03:47Z",
          "comments": [
            {
              "originalPosition": 2285,
              "body": "What are the private and public keys for this test vector?",
              "createdAt": "2020-03-02T15:02:56Z",
              "updatedAt": "2020-03-02T15:03:48Z"
            }
          ]
        }
      ]
    },
    {
      "number": 67,
      "id": "MDExOlB1bGxSZXF1ZXN0MzczMDg1MDYw",
      "title": "Update DLEQ challenge sampling",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/67",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Use HKDF-Expand-SHA512 for sampling scalars in DLEQ\r\n- Fixes #66",
      "createdAt": "2020-02-10T11:33:21Z",
      "updatedAt": "2020-03-02T15:01:03Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "alxdavids/fix-batching-algorithms",
      "baseRefOid": "2915cd17b2cfd9daf713bc37db2a9fe8ae20348c",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/dleq-chl-sample",
      "headRefOid": "15a75d20e246c763b02496e28341b92b5ec0a909",
      "closedAt": "2020-03-02T15:01:03Z",
      "mergedAt": "2020-03-02T15:01:03Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "0c25f28c4e4060255c68c9e44cf6b68a234c6e29"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Approved pending one question above (hash_to_field)!",
          "createdAt": "2020-03-01T21:13:38Z",
          "updatedAt": "2020-03-01T21:13:38Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MzY4NjEx",
          "commit": {
            "abbreviatedOid": "15a75d2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-02-27T01:56:28Z",
          "updatedAt": "2020-03-01T21:13:19Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "We can probably make this text a bit more concise (in the future). I'll suggest a PR after we merge this!",
              "createdAt": "2020-02-27T01:56:29Z",
              "updatedAt": "2020-03-01T21:13:19Z"
            },
            {
              "originalPosition": 360,
              "body": "Can we re-use hash_to_field from the hash-to-curve draft?",
              "createdAt": "2020-02-27T02:10:46Z",
              "updatedAt": "2020-03-01T21:13:19Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MDk1NjUx",
          "commit": {
            "abbreviatedOid": "15a75d2"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-02T10:34:08Z",
          "updatedAt": "2020-03-02T10:34:08Z",
          "comments": [
            {
              "originalPosition": 360,
              "body": "I think we can, but I was waiting for more detailed feedback on the usage of that function before we adopted it here.What do you think?",
              "createdAt": "2020-03-02T10:34:08Z",
              "updatedAt": "2020-03-02T10:34:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MjY1Njg2",
          "commit": {
            "abbreviatedOid": "15a75d2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-02T15:00:57Z",
          "updatedAt": "2020-03-02T15:00:58Z",
          "comments": [
            {
              "originalPosition": 360,
              "body": "Works for me! (Let's merge to keep the ball rolling.)",
              "createdAt": "2020-03-02T15:00:58Z",
              "updatedAt": "2020-03-02T15:00:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 68,
      "id": "MDExOlB1bGxSZXF1ZXN0MzgyMDk3OTEz",
      "title": "Drop OPRF/VOPRF prefix (as it's implied from document context).",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/68",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-03-01T21:33:28Z",
      "updatedAt": "2020-03-02T10:48:24Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "4ca97f73319a737e081b67bb14e1ea5ef624bdfd",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/notation",
      "headRefOid": "424490259a30443a98bf538c791f04dfcbeb0a94",
      "closedAt": "2020-03-02T10:48:24Z",
      "mergedAt": "2020-03-02T10:48:24Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "b9e0a19edea436e815858a357ea7ecc58c704feb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MDk0NTk0",
          "commit": {
            "abbreviatedOid": "4244902"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-03-02T10:32:25Z",
          "updatedAt": "2020-03-02T10:32:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 69,
      "id": "MDExOlB1bGxSZXF1ZXN0MzgyODc4NDQ1",
      "title": "Remove test vectors and add contributors section",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/69",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Remove test vectors section until we have a more stable version of the draft\r\n- Add section with contributors to draft\r\n- Wrap all lines at 72 characters",
      "createdAt": "2020-03-03T10:51:58Z",
      "updatedAt": "2020-03-03T13:46:42Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b9e0a19edea436e815858a357ea7ecc58c704feb",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/remove-test-vectors",
      "headRefOid": "6e59e95cd4535d06e41340b59af3c6d2d8b17d19",
      "closedAt": "2020-03-03T13:46:42Z",
      "mergedAt": "2020-03-03T13:46:42Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2fc87ef77bf9c5604d8d29b6da7561539d3ff40e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3OTg4OTky",
          "commit": {
            "abbreviatedOid": "6e59e95"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-03-03T13:46:33Z",
          "updatedAt": "2020-03-03T13:46:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 70,
      "id": "MDExOlB1bGxSZXF1ZXN0MzgzODY2MTEy",
      "title": "Add domain separation text.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/70",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-03-04T20:49:40Z",
      "updatedAt": "2020-03-06T11:24:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "2fc87ef77bf9c5604d8d29b6da7561539d3ff40e",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/domain-separation",
      "headRefOid": "98655424d93052d42723bfefcb4e0a8a405d2b04",
      "closedAt": "2020-03-06T11:24:49Z",
      "mergedAt": "2020-03-06T11:24:49Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "17375ecdb22bca3ba3f6ef890733723c6f1e5285"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMjU0NTgz",
          "commit": {
            "abbreviatedOid": "9865542"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-03-06T11:24:44Z",
          "updatedAt": "2020-03-06T11:24:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 71,
      "id": "MDExOlB1bGxSZXF1ZXN0MzgzODY3ODk2",
      "title": "Remove client/server integration advice.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/71",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Upon re-review, this seems to distract from the core of this document. Maybe we can move this the PrivacyPass document? (I note that neither hash-to-curve nor HPKE have such integration advice. They just provide the core primitives.) \r\n\r\n@grittygrease, what do you think?",
      "createdAt": "2020-03-04T20:52:11Z",
      "updatedAt": "2020-03-09T09:13:52Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "2fc87ef77bf9c5604d8d29b6da7561539d3ff40e",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/remove-integration",
      "headRefOid": "60718a6e297cb67f784ffd4d5115db5655bb7fca",
      "closedAt": "2020-03-09T09:13:52Z",
      "mergedAt": "2020-03-09T09:13:52Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "f04dafbd80ded32b3fd3a6fd84d77446dda4a9ae"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm happy with removing this",
          "createdAt": "2020-03-06T11:24:11Z",
          "updatedAt": "2020-03-06T11:24:11Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMjU0MTAw",
          "commit": {
            "abbreviatedOid": "60718a6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-03-06T11:23:47Z",
          "updatedAt": "2020-03-06T11:23:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 72,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzg1NDY5NDgw",
      "title": "Certify public key (fixes #29)",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/72",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-03-09T09:19:04Z",
      "updatedAt": "2020-03-09T12:25:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "f04dafbd80ded32b3fd3a6fd84d77446dda4a9ae",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/certify-public-key",
      "headRefOid": "58b9e8544733d6d0af7c248e4c35c1ef4d89244a",
      "closedAt": "2020-03-09T12:25:05Z",
      "mergedAt": "2020-03-09T12:25:05Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "66bddb16c38b581898115a3da015df6862f75cef"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMTE4OTQw",
          "commit": {
            "abbreviatedOid": "58b9e85"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-03-09T12:25:00Z",
          "updatedAt": "2020-03-09T12:25:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 73,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzg1NDc0MDk0",
      "title": "Update changelog for submission",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/73",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Will submit once this PR is merged.",
      "createdAt": "2020-03-09T09:28:30Z",
      "updatedAt": "2020-03-09T12:25:48Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "alxdavids/certify-public-key",
      "baseRefOid": "58b9e8544733d6d0af7c248e4c35c1ef4d89244a",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/update-changelog",
      "headRefOid": "fac1fb0928f96ad955a889b7451ddc880ef3d7f4",
      "closedAt": "2020-03-09T12:25:48Z",
      "mergedAt": "2020-03-09T12:25:48Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "34ee80c2c9a709b2babd577d6dfe59583981c68c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMTE5Mzkz",
          "commit": {
            "abbreviatedOid": "fac1fb0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-03-09T12:25:43Z",
          "updatedAt": "2020-03-09T12:25:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 74,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzg1NjA5MTA5",
      "title": "Update changelog (merge into master)",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/74",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Target branch in #73 should have been master.",
      "createdAt": "2020-03-09T14:07:19Z",
      "updatedAt": "2020-03-09T14:07:53Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "66bddb16c38b581898115a3da015df6862f75cef",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/update-changelog",
      "headRefOid": "774128d2d64244602f117ec2d3e1d6c1066ac66c",
      "closedAt": "2020-03-09T14:07:53Z",
      "mergedAt": "2020-03-09T14:07:53Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "7f5c1eef22bd29539f48ca1127d3dcad354e97d3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 75,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzg1NjIwODU0",
      "title": "Changes before release-03",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/75",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "New document version posted, these changes were made before submission:\r\n\r\n- I noticed that the protocol integration section was replicated in Section 4 and so I removed this before posting.\r\n- Also fixed a section reference",
      "createdAt": "2020-03-09T14:28:05Z",
      "updatedAt": "2020-03-09T14:29:50Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "7f5c1eef22bd29539f48ca1127d3dcad354e97d3",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/release-03",
      "headRefOid": "b29ddafae20d94b6298a209db67ce252ff8ad89d",
      "closedAt": "2020-03-09T14:29:50Z",
      "mergedAt": "2020-03-09T14:29:50Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "3752295a31bf2b6bd971fff159cc11190cee4da9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMjMxMDcz",
          "commit": {
            "abbreviatedOid": "b29ddaf"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-03-09T14:29:33Z",
          "updatedAt": "2020-03-09T14:29:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 78,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI0ODAwMTgy",
      "title": "Some clarifications, but still needs more work to be done.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/78",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Some comments for improving draft.\r\nHappy to hear your thoughts.",
      "createdAt": "2020-05-28T23:40:25Z",
      "updatedAt": "2020-06-02T11:48:20Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "3752295a31bf2b6bd971fff159cc11190cee4da9",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "armfazh/comments",
      "headRefOid": "4c5177c4055df642e29761817a679b0290169087",
      "closedAt": "2020-06-02T11:48:20Z",
      "mergedAt": "2020-06-02T11:48:20Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "5d53337a94898f438d1658c1728d9a7671262612"
      },
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Most suggestions were added and some other comments are now tracked as Issues.\r\n",
          "createdAt": "2020-06-01T17:14:19Z",
          "updatedAt": "2020-06-01T17:14:19Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODY5MTM5",
          "commit": {
            "abbreviatedOid": "23803e9"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Thanks Armando, this is a great start and really helpful. I've left a few comments to address but I think your changes are worthwhile.",
          "createdAt": "2020-05-29T11:28:51Z",
          "updatedAt": "2020-05-29T11:36:17Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "I think this paragraph can be reworded, but I think it may retain importance for situating the security guarantees provided by the protocol. What do you think @chris-wood? ",
              "createdAt": "2020-05-29T11:28:51Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            },
            {
              "originalPosition": 134,
              "body": "```suggestion\r\n    Output h [if b=false: abort]\r\n```",
              "createdAt": "2020-05-29T11:29:42Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            },
            {
              "originalPosition": 175,
              "body": "```suggestion\r\n  representation of x in GG. To do so, the Verifier requires sampling a blind r, which is a scalar value that must be uniformly sampled from GF(p).\r\n```",
              "createdAt": "2020-05-29T11:30:33Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            },
            {
              "originalPosition": 230,
              "body": "```suggestion\r\nA secure instance includes choosing GG as the group of squares of a finite field FF.\r\n```",
              "createdAt": "2020-05-29T11:31:29Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            },
            {
              "originalPosition": 235,
              "body": "```suggestion\r\nA more efficient and secure way to instantiate the (V)OPRF protocol is using\r\n```",
              "createdAt": "2020-05-29T11:31:45Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            },
            {
              "originalPosition": 235,
              "body": "What does \"more secure\" mean here?",
              "createdAt": "2020-05-29T11:32:27Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            },
            {
              "originalPosition": 172,
              "body": "This isn't strictly true, we require hardness from a different assumption. I think it's best to remove the bit about discrete logarithms for now, and I'll completely rework how the Setup phase occurs.",
              "createdAt": "2020-05-29T11:35:17Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwOTE5Nzg0",
          "commit": {
            "abbreviatedOid": "23803e9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-29T12:49:25Z",
          "updatedAt": "2020-05-29T12:49:25Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "Indeed, and it should probably go to the security considerations. Putting it up front can be a bit cumbersome!",
              "createdAt": "2020-05-29T12:49:25Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwOTIwOTYz",
          "commit": {
            "abbreviatedOid": "23803e9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-29T12:50:55Z",
          "updatedAt": "2020-05-29T12:50:55Z",
          "comments": [
            {
              "originalPosition": 175,
              "body": "I don't think we should take this change, as it seems to prohibit fixed-base blinding. Let's revert to the old definition, which permitted additive and multiplicative blindings?",
              "createdAt": "2020-05-29T12:50:55Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwOTIyOTQx",
          "commit": {
            "abbreviatedOid": "23803e9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Looks good overall! I'm requesting changes to address the blinding definition. I'd also like to see us move away from specifics of groups. ",
          "createdAt": "2020-05-29T12:53:38Z",
          "updatedAt": "2020-05-29T12:54:44Z",
          "comments": [
            {
              "originalPosition": 230,
              "body": "Can we do away with this section entirely and just require that groups have prime order, a fixed generator, and can be implemented efficiently? We can then list examples of such groups, ideally in a table with relevant parameters?",
              "createdAt": "2020-05-29T12:53:38Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTc4NDE1",
          "commit": {
            "abbreviatedOid": "23803e9"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-29T18:11:26Z",
          "updatedAt": "2020-05-29T18:11:27Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "I set to be removed as is almost duplicated in Line 499.",
              "createdAt": "2020-05-29T18:11:27Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTgwNzE3",
          "commit": {
            "abbreviatedOid": "23803e9"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-29T18:15:08Z",
          "updatedAt": "2020-05-29T18:15:08Z",
          "comments": [
            {
              "originalPosition": 235,
              "body": "Agree, it does not sound good.",
              "createdAt": "2020-05-29T18:15:08Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTgxMDU1",
          "commit": {
            "abbreviatedOid": "23803e9"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-29T18:15:41Z",
          "updatedAt": "2020-05-29T18:15:42Z",
          "comments": [
            {
              "originalPosition": 235,
              "body": "```suggestion\r\nA more efficient way to instanciate the (V)OPRF protocol is using\r\n```",
              "createdAt": "2020-05-29T18:15:42Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTk4MDA1",
          "commit": {
            "abbreviatedOid": "0fa0c3a"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-29T18:40:04Z",
          "updatedAt": "2020-05-29T18:40:04Z",
          "comments": [
            {
              "originalPosition": 172,
              "body": "reverted",
              "createdAt": "2020-05-29T18:40:04Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTk4MDc2",
          "commit": {
            "abbreviatedOid": "0fa0c3a"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-29T18:40:11Z",
          "updatedAt": "2020-05-29T18:40:11Z",
          "comments": [
            {
              "originalPosition": 175,
              "body": "reverted",
              "createdAt": "2020-05-29T18:40:11Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNzQzODI2",
          "commit": {
            "abbreviatedOid": "1830fd0"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me. Over to @chris-wood for a last check",
          "createdAt": "2020-06-01T10:31:06Z",
          "updatedAt": "2020-06-01T10:31:06Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTI3MzM3",
          "commit": {
            "abbreviatedOid": "1830fd0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-01T15:13:12Z",
          "updatedAt": "2020-06-01T15:19:25Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "Unrelated to this change, but what is `u` here? Is DST guaranteed to be of size `u`? (2HashDH doesn't specify the hash this way. Maybe we ought to go back to what's in the original paper?)",
              "createdAt": "2020-06-01T15:13:12Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            },
            {
              "originalPosition": 104,
              "body": "```suggestion\r\nLet x be an arbitrary-length byte string representing the verifier's input to the OPRF protocol.\r\n```",
              "createdAt": "2020-06-01T15:13:36Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            },
            {
              "originalPosition": 113,
              "body": "```suggestion\r\nmultiplies the blinded value by its secret key and returns the resulting element. \r\nTo finish the protocol, V then removes its blind and uses H_2 to hash the result (along \r\nwith a domain separating label DST) yielding an output.\r\n```",
              "createdAt": "2020-06-01T15:14:11Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            },
            {
              "originalPosition": 139,
              "body": "```suggestion\r\nDLEQ_Verify) are REQUIRED for verifiability. These steps are\r\n```",
              "createdAt": "2020-06-01T15:14:46Z",
              "updatedAt": "2020-06-01T16:47:16Z"
            },
            {
              "originalPosition": 159,
              "body": "Unrelated to this change, but this doesn't match the diagram, where we output `H_2(DST, ...)` rather than `H_2(dk, ...)`.",
              "createdAt": "2020-06-01T15:15:47Z",
              "updatedAt": "2020-06-01T16:47:16Z"
            },
            {
              "originalPosition": 175,
              "body": "Should we unify around DST instead of `aux`?",
              "createdAt": "2020-06-01T15:16:15Z",
              "updatedAt": "2020-06-01T16:47:16Z"
            },
            {
              "originalPosition": 225,
              "body": "Should we include a table that lists the group (name) and its parameters, e.g., the generator, base field prime order, etc.?",
              "createdAt": "2020-06-01T15:18:13Z",
              "updatedAt": "2020-06-01T16:47:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDIzNDY5",
          "commit": {
            "abbreviatedOid": "4c5177c"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-01T17:06:56Z",
          "updatedAt": "2020-06-01T17:06:57Z",
          "comments": [
            {
              "originalPosition": 159,
              "body": "Tracked on #89 ",
              "createdAt": "2020-06-01T17:06:56Z",
              "updatedAt": "2020-06-01T17:06:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDI1MDMx",
          "commit": {
            "abbreviatedOid": "4c5177c"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-01T17:09:11Z",
          "updatedAt": "2020-06-01T17:09:11Z",
          "comments": [
            {
              "originalPosition": 175,
              "body": "Tracked in #83 ",
              "createdAt": "2020-06-01T17:09:11Z",
              "updatedAt": "2020-06-01T17:09:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDI1OTU5",
          "commit": {
            "abbreviatedOid": "4c5177c"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-01T17:10:30Z",
          "updatedAt": "2020-06-01T17:10:31Z",
          "comments": [
            {
              "originalPosition": 225,
              "body": "Tracked in #90 ",
              "createdAt": "2020-06-01T17:10:30Z",
              "updatedAt": "2020-06-01T17:10:31Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDI2NDUx",
          "commit": {
            "abbreviatedOid": "4c5177c"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-01T17:11:16Z",
          "updatedAt": "2020-06-01T17:11:17Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "Tracked in #89 ",
              "createdAt": "2020-06-01T17:11:16Z",
              "updatedAt": "2020-06-01T17:11:17Z"
            }
          ]
        }
      ]
    },
    {
      "number": 91,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI2NTQ5NzE4",
      "title": "Significant API changes",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/91",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The first phase in a large number of changes to the protocol API:\r\n\r\n- Define explicit prime-order group API (#81)\r\n- Use concrete data structures for all types\r\n- Provide Serialization/Deserialization mechanisms for groups (#77)\r\n- Ensure that group elements are not exposed by API\r\n- Removes the Setup algorithm (#88, #82)\r\n- Unifies the DLEQ proof algorithms (#85)\r\n\r\nAddresses: \r\n\r\ncc @armfazh as initial reporter.",
      "createdAt": "2020-06-02T12:23:29Z",
      "updatedAt": "2020-06-04T20:08:24Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "5d53337a94898f438d1658c1728d9a7671262612",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/protocol-api-changes",
      "headRefOid": "375dd77b09152c9ad90fa3b05b094c83081fcba2",
      "closedAt": "2020-06-04T20:08:24Z",
      "mergedAt": "2020-06-04T20:08:24Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "9f736f1b85d8f6d433804a3d300a9981214ebb56"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "We should merge #92 and #93 into this PR before we eventually merge this into master.",
          "createdAt": "2020-06-03T09:59:09Z",
          "updatedAt": "2020-06-03T13:46:01Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjIxNDgy",
          "commit": {
            "abbreviatedOid": "474450d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Great refactor! I left some comments that I think can make things even more clear. ",
          "createdAt": "2020-06-02T12:24:12Z",
          "updatedAt": "2020-06-03T19:13:03Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Is this your markdown editor? :-)",
              "createdAt": "2020-06-02T12:24:13Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 55,
              "body": "```suggestion\r\n- Addition: For any elements `A` and `B` that are members of the\r\n```",
              "createdAt": "2020-06-02T12:24:48Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 55,
              "body": "I might lift field and group operations to their own paragraph:\r\n\r\n```\r\nThe group operation of `GG` is addition (`+`), wherein given any two members \r\n`A` and `B` in `GG`, `C = A + B` is also a member of the group. Scalar \r\nmultiplication (`*`) is a commutative operator that takes as input an element `r` \r\nfrom the base field `GF(p)` and member of `GG` `A` and produces as output \r\n`A + ... + A` (`r` times), denote `r*A`.\r\n```",
              "createdAt": "2020-06-02T12:30:03Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 62,
              "body": "We use `returns` here and `outputs` above -- perhaps we should unify around one of these verbs?",
              "createdAt": "2020-06-02T12:30:52Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 75,
              "body": "```suggestion\r\n  reverse the mapping. For an example of such a mapping to prime-order (sub)groups of elliptic curves, see\r\n```",
              "createdAt": "2020-06-02T12:31:37Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 78,
              "body": "I'd lift this to be closer to the text that discusses point addition and scalar multiplication.",
              "createdAt": "2020-06-02T12:32:21Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 87,
              "body": "```suggestion\r\nin network-order byte array format for the purpose of providing wherever it is\r\n```",
              "createdAt": "2020-06-02T12:32:49Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 112,
              "body": "A reader might ask, \"what does secure mean?\" -- do we need to clarify?",
              "createdAt": "2020-06-02T12:33:37Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 112,
              "body": "Related, this is just an example, right? If we don't want to standardize/support this group, I'd remove this paragraph entirely.",
              "createdAt": "2020-06-02T12:34:43Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 134,
              "body": "We can probably fold this into the preceding bullet, e.g., \"As an example, `x <- {0,1}^u` denotes sampling `x` uniformly from `{0,1}^u.`\"",
              "createdAt": "2020-06-02T12:35:46Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 161,
              "body": "```suggestion\r\nLet GG be an additive group of prime-order p with the interface defined in\r\n```",
              "createdAt": "2020-06-02T12:36:09Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 169,
              "body": "Did we define EncodeToGroup? Maybe this was meant to be HashToGroup?",
              "createdAt": "2020-06-02T12:36:39Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 180,
              "body": "Did we define the type \"PrivateKey\" yet? If not, I might just make this \"private key\". (Same for PublicKey below.)",
              "createdAt": "2020-06-02T12:47:06Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 184,
              "body": "```suggestion\r\nreferred to as a commitment to the OPRF key `k`. Let x be the verifier's arbitrary-length byte array\r\ninput to the OPRF protocol. We provide an overview of the protocol below as an\r\n```",
              "createdAt": "2020-06-02T12:50:06Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 186,
              "body": "s/API/interface, I think",
              "createdAt": "2020-06-02T12:50:18Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 195,
              "body": "We use \"the verifier\" and \"V\" interchangeably -- can we unify around one or the other? V might be better, assuming we define it appropriately.",
              "createdAt": "2020-06-02T12:57:34Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 198,
              "body": "```suggestion\r\nDST) yielding an output. This flow is illustrated below.\r\n```",
              "createdAt": "2020-06-02T12:57:45Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 230,
              "body": "```suggestion\r\nSteps enclosed in `[[ ]]` are REQUIRED for achieving\r\n```",
              "createdAt": "2020-06-02T12:57:58Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 234,
              "body": "```suggestion\r\nverifiable mode, we assume that P's public key is known by V. \r\n\r\nNote that revealing `Y` does not reveal k by the well-known hardness of the\r\ndiscrete log problem.\r\n```",
              "createdAt": "2020-06-02T12:58:24Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 248,
              "body": "```suggestion\r\nThis output is computed when the client\r\n```",
              "createdAt": "2020-06-02T12:58:48Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 342,
              "body": "What if the server wants to publish `kG` non-serialized? We probably don't need to preclude that.",
              "createdAt": "2020-06-02T12:59:55Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 355,
              "body": "Can we use single-character notation for these? It might be confused with scalar multiplication above (e.g., rA).",
              "createdAt": "2020-06-02T14:33:17Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 355,
              "body": "Alternatively, we remove the shorthand `rA` for scalar multiplication and include the operator `r*A`?",
              "createdAt": "2020-06-03T12:24:40Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 511,
              "body": "```suggestion\r\n  Scalar proof<0...2^16-1>; /* optional */\r\n```\r\n\r\nAnd we should probably state that if proof has non-zero length, then it must consist of exactly two Scalar elements, both of which are length-prefixed.",
              "createdAt": "2020-06-03T12:38:21Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 552,
              "body": "What is the value m here? (Also, is this intended to be TLS-style notation? If so, `m` is the upper bound on the number of bytes possibly stored by `inputs`, which I assume is probably `m * sizeof(ClientInput)`.)",
              "createdAt": "2020-06-03T12:40:51Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 795,
              "body": "Do we want a reference to OPAQUE here? (It'll introduce a cyclical dependency.)",
              "createdAt": "2020-06-03T12:42:04Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 824,
              "body": "```suggestion\r\nTherefore, it may be advantageous to implement the OPRF and VOPRF protocols\r\n```",
              "createdAt": "2020-06-03T12:43:32Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 817,
              "body": "```suggestion\r\nThe advantage of FBB is that it allows the client to\r\n```",
              "createdAt": "2020-06-03T12:43:55Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 825,
              "body": "We use FBB and additive blinding somewhat interchangeably -- can we pick one and stick with it? (I prefer additive!)",
              "createdAt": "2020-06-03T12:44:27Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 865,
              "body": "```suggestion\r\n 3. for i = 0 to m:\r\n```",
              "createdAt": "2020-06-03T18:54:23Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 900,
              "body": "```suggestion\r\n 3. for i = 0 to m:\r\n```",
              "createdAt": "2020-06-03T18:54:55Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 934,
              "body": "```suggestion\r\n    1. if (VerifyProof(public_key, blinded_tokens, ev) == false): ABORT\r\n```\r\n\r\nMaybe we should also define ABORT in some section earlier on?",
              "createdAt": "2020-06-03T18:55:28Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 949,
              "body": "```suggestion\r\nthe commutativity of scalar multiplication in GG. \r\n```",
              "createdAt": "2020-06-03T18:55:58Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1016,
              "body": "```suggestion\r\n 3.  (a1, a2) = ComputeComposites(\r\n```\r\n\r\nFor camel-case consistency.",
              "createdAt": "2020-06-03T18:56:35Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1024,
              "body": "In the h2c document, we omit parentheses around `mod p`. Should we do that here?",
              "createdAt": "2020-06-03T18:57:01Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1052,
              "body": "Perhaps we should explain what verified means? The previous text was maybe a bit too specific, but here I think we swung the other way.",
              "createdAt": "2020-06-03T18:58:20Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1081,
              "body": "```suggestion\r\n## ComputeComposites\r\n```",
              "createdAt": "2020-06-03T18:58:29Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1314,
              "body": "```suggestion\r\n 6. Output [GG.Serialize(M), GG.Serialize(Z)]\r\n```\r\n\r\nDo we use list/tuple notation consistently?",
              "createdAt": "2020-06-03T18:59:08Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1309,
              "body": "```suggestion\r\n          1. i = i-1 # decrement and try again\r\n```",
              "createdAt": "2020-06-03T18:59:18Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1320,
              "body": "```suggestion\r\n`H_5`. `H_3` and `H_4` are hash functions that map arbitrary\r\n```",
              "createdAt": "2020-06-03T18:59:32Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1321,
              "body": "What is the output size?",
              "createdAt": "2020-06-03T18:59:54Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1322,
              "body": "Can we borrow language from h2c for this? Namely, \"should induce an output distribution in GF(GG.Order()) is statistically close to uniformly random.\"",
              "createdAt": "2020-06-03T19:01:29Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjU4MjQz",
          "commit": {
            "abbreviatedOid": "63368d1"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-04T09:20:57Z",
          "updatedAt": "2020-06-04T09:20:58Z",
          "comments": [
            {
              "originalPosition": 112,
              "body": "You're right, I've just removed it.",
              "createdAt": "2020-06-04T09:20:57Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjYwMDEy",
          "commit": {
            "abbreviatedOid": "63368d1"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-04T09:23:13Z",
          "updatedAt": "2020-06-04T09:23:13Z",
          "comments": [
            {
              "originalPosition": 195,
              "body": "This is something that is addressed in a later PR so I will leave this for now. Essentially I just do away with all of this and just use `Client` and `Server` as `Verifier` and `Prover` doesn't even make sense in the OPRF case.",
              "createdAt": "2020-06-04T09:23:13Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjYwNDk4",
          "commit": {
            "abbreviatedOid": "63368d1"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-04T09:23:52Z",
          "updatedAt": "2020-06-04T09:23:52Z",
          "comments": [
            {
              "originalPosition": 342,
              "body": "How would you publish it non-serialized?",
              "createdAt": "2020-06-04T09:23:52Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjY0MTEw",
          "commit": {
            "abbreviatedOid": "63368d1"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-04T09:28:19Z",
          "updatedAt": "2020-06-04T09:28:20Z",
          "comments": [
            {
              "originalPosition": 355,
              "body": "I've gone through and replaced `rA` notation with `r * A` as I think this is clearer.",
              "createdAt": "2020-06-04T09:28:19Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjY1MTE5",
          "commit": {
            "abbreviatedOid": "63368d1"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-04T09:29:39Z",
          "updatedAt": "2020-06-04T09:29:40Z",
          "comments": [
            {
              "originalPosition": 552,
              "body": "Ah yes, `m * sizeof(ClientInput)` is correct, I'll change. `m` is some value chosen by the client, wasn't sure how best to articulate this?",
              "createdAt": "2020-06-04T09:29:39Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjY3NzQ5",
          "commit": {
            "abbreviatedOid": "63368d1"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-04T09:32:54Z",
          "updatedAt": "2020-06-04T09:32:54Z",
          "comments": [
            {
              "originalPosition": 552,
              "body": "I've switched it to `Type x[m]` to indicate a fixed-size array corresponding to a size `m` chosen by the client, and added a clarifying paragraph.",
              "createdAt": "2020-06-04T09:32:54Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjY4ODEw",
          "commit": {
            "abbreviatedOid": "63368d1"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-04T09:34:14Z",
          "updatedAt": "2020-06-04T09:34:15Z",
          "comments": [
            {
              "originalPosition": 795,
              "body": "Removed",
              "createdAt": "2020-06-04T09:34:14Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjY4OTU2",
          "commit": {
            "abbreviatedOid": "63368d1"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-04T09:34:26Z",
          "updatedAt": "2020-06-04T09:34:26Z",
          "comments": [
            {
              "originalPosition": 825,
              "body": "Changing to additive and multiplicative",
              "createdAt": "2020-06-04T09:34:26Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NzgyMDAx",
          "commit": {
            "abbreviatedOid": "f04c20b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I still have some comments, but let's land this now so we can keep the diffs small(er) going forward. I'll file issues for my comments!",
          "createdAt": "2020-06-04T19:56:31Z",
          "updatedAt": "2020-06-04T20:05:55Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "```suggestion\r\norder of the group. The fundamental group operation is addition (+) Specifically, for any \r\nelements `A` and `B` that are members of the group `GG`, `A + B = B + A` is also a member \r\nof `GG`. Scalar multiplication (*) is an efficient method for repeated addition operations. \r\nGiven a scalar `r` in `GF(p)` and element `A` in `GG`, `r*A = A + ... + A` (`r` times). \r\n```",
              "createdAt": "2020-06-04T19:56:31Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 210,
              "body": "Why not use camel case here?",
              "createdAt": "2020-06-04T19:57:33Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 229,
              "body": "```suggestion\r\nSteps enclosed in `[[ ]]` are REQUIRED for verifiability.\r\n```",
              "createdAt": "2020-06-04T19:57:58Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 234,
              "body": "```suggestion\r\n```",
              "createdAt": "2020-06-04T19:58:24Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 342,
              "body": "As a (stupid) example, consider an app which runs the client and server in the same process. This app wouldn't need to serialize `kG` for the application to use it. Presumably the client could use whatever type `kG` is directly. \r\n\r\nI guess my point is that this is an application specific concern. If an application needs to publish it and send it over the wire, yeah, they'll need to serialize it. But let's not assume that's always the case. ",
              "createdAt": "2020-06-04T20:01:39Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1052,
              "body": "Is this resolved?",
              "createdAt": "2020-06-04T20:03:50Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1216,
              "body": "```suggestion\r\n`ComputeComposites` is a utility function used in both\r\n```",
              "createdAt": "2020-06-04T20:05:13Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 92,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI3MDk0MzAx",
      "title": "Replace Verifier and Prover references",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/92",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The usage of `Verifier` and `Prover` (or `V` and `P`) is an artifact of only covering the case of VOPRFs. This PR replaces the references with generic `Client` and `Server` references throughout.\r\n\r\ncc @armfazh as initial reporter.\r\n\r\n**This change is based on top of #91, so we should merge this into that PR before we do any merging.**",
      "createdAt": "2020-06-03T09:58:43Z",
      "updatedAt": "2020-06-04T20:10:16Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "alxdavids/protocol-api-changes",
      "baseRefOid": "375dd77b09152c9ad90fa3b05b094c83081fcba2",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/verifier-prover",
      "headRefOid": "4fee087cdda4e7baccc74bb22c344a7785a1528d",
      "closedAt": "2020-06-04T20:10:16Z",
      "mergedAt": "2020-06-04T20:10:16Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "06b69a4bfb7a7de8f39481d10dd9bd203f3b6279"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 93,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI3MjEyNjk5",
      "title": "Remove security parameter",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/93",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Remove mention of security parameter (addresses #84, #87)\r\n- Document setup procedure\r\n- Remove protocol overview (superfluous and notation was inconsistent)\r\n- Shorten ciphersuite spec\r\n\r\ncc @armfazh as initial reporter\r\n\r\n**Should be merged into #91 before that change is merged**",
      "createdAt": "2020-06-03T13:45:37Z",
      "updatedAt": "2020-06-05T14:33:47Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "f132e61d52603b5beb9cab08d5a7bd5493746564",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/remove-sec-param",
      "headRefOid": "a77e0d61278e23a9cff2f49cbf36af5389a84060",
      "closedAt": "2020-06-05T14:33:47Z",
      "mergedAt": "2020-06-05T14:33:47Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "2afa9f9f38b1c0d08bf613e6be50229fbcf2b4f2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODA3NDU5",
          "commit": {
            "abbreviatedOid": "a529938"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Looks good! Left some comments and questions to help clean things up.",
          "createdAt": "2020-06-04T20:34:37Z",
          "updatedAt": "2020-06-04T20:38:24Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Why `public_key` for the serialized version and `PK` for the deserialized one?",
              "createdAt": "2020-06-04T20:34:37Z",
              "updatedAt": "2020-06-05T14:33:22Z"
            },
            {
              "originalPosition": 69,
              "body": "This seems like a weird MUST. What if there's an application that genuinely does not require verifiability? I think we should reframe this a bit, e.g., \"Servers that support verifiability MUST make `public_key` available to clients.\" (And I'd drop the serialization requirement at the same time.)",
              "createdAt": "2020-06-04T20:35:03Z",
              "updatedAt": "2020-06-05T14:33:22Z"
            },
            {
              "originalPosition": 179,
              "body": "This section seems to revert to the old scalar multiplication notation. Is that an intentional regression?",
              "createdAt": "2020-06-04T20:36:07Z",
              "updatedAt": "2020-06-05T14:33:22Z"
            },
            {
              "originalPosition": 376,
              "body": "```suggestion\r\ncomputationally difficult to solve in relation to a particular choice of\r\n```",
              "createdAt": "2020-06-04T20:37:00Z",
              "updatedAt": "2020-06-05T14:33:22Z"
            },
            {
              "originalPosition": 379,
              "body": "```suggestion\r\nsecurity parameter `sp`.\r\n```",
              "createdAt": "2020-06-04T20:37:31Z",
              "updatedAt": "2020-06-05T14:33:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MzQyOTE0",
          "commit": {
            "abbreviatedOid": "a529938"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-05T14:17:30Z",
          "updatedAt": "2020-06-05T14:17:30Z",
          "comments": [
            {
              "originalPosition": 179,
              "body": "Will fix",
              "createdAt": "2020-06-05T14:17:30Z",
              "updatedAt": "2020-06-05T14:33:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MzUzNTY4",
          "commit": {
            "abbreviatedOid": "9e47d56"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-05T14:29:47Z",
          "updatedAt": "2020-06-05T14:31:10Z",
          "comments": [
            {
              "originalPosition": 135,
              "body": "```suggestion\r\nServers that support verifiability MUST make `PK` available to\r\n```",
              "createdAt": "2020-06-05T14:29:48Z",
              "updatedAt": "2020-06-05T14:33:22Z"
            },
            {
              "originalPosition": 290,
              "body": "```suggestion\r\nZ - PKR = k(P + r * G) - (rk) * G = k * P\r\n```",
              "createdAt": "2020-06-05T14:30:24Z",
              "updatedAt": "2020-06-05T14:33:22Z"
            }
          ]
        }
      ]
    },
    {
      "number": 96,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI4NDc2NjM3",
      "title": "Replace Verifier and Prove language",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/96",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Fixes #80\r\n- Verifier and Prover is specific to verifiability mode\r\n- Replace with Client and Server identifiers\r\n\r\nThis change was already reviewed in #92 but merged into the wrong branch. This PR merges it into master.",
      "createdAt": "2020-06-05T14:13:06Z",
      "updatedAt": "2020-06-05T14:13:21Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "9f736f1b85d8f6d433804a3d300a9981214ebb56",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/verifier-prover",
      "headRefOid": "3482ddbbc67cc04daecbb0e3801b605d070e480e",
      "closedAt": "2020-06-05T14:13:21Z",
      "mergedAt": "2020-06-05T14:13:21Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "f132e61d52603b5beb9cab08d5a7bd5493746564"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 97,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM0NzA1ODg5",
      "title": "Use a random oracle, per the 2HashDH construction.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/97",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed!\r\n\r\ncc @armfazh ",
      "createdAt": "2020-06-15T18:36:02Z",
      "updatedAt": "2020-06-16T14:50:07Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "3d26e11c8d5ede019c717c381f2178116a57f105",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/random-oracle",
      "headRefOid": "6cccb5f9dd537118cc41ae5c5d8c6747a18d0971",
      "closedAt": "2020-06-16T14:50:07Z",
      "mergedAt": "2020-06-16T14:50:07Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "e3ac1ba8c964d487f223a6c0cd1e62103ece13e2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMzEwNDEz",
          "commit": {
            "abbreviatedOid": "bdbc746"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Some comments",
          "createdAt": "2020-06-16T09:11:13Z",
          "updatedAt": "2020-06-16T13:59:53Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "Where is this defined? In https://tools.ietf.org/html/rfc8032#section-5.2.2 it is 57 bytes.",
              "createdAt": "2020-06-16T09:11:13Z",
              "updatedAt": "2020-06-16T14:48:13Z"
            },
            {
              "originalPosition": 82,
              "body": "Reference section 2.3.3 in SEC1. Also, does this mean we don't support compressed points?",
              "createdAt": "2020-06-16T09:12:21Z",
              "updatedAt": "2020-06-16T14:48:13Z"
            },
            {
              "originalPosition": 72,
              "body": "My understanding is that SHA512 on its own is not a random oracle because of merkle-damgard length-extension attacks. This is why HMAC was used (which can be shown to be a PRF under PRF assumptions on the compression function). In IKE (https://tools.ietf.org/html/rfc4868), HMAC-SHA*** is used as a PRF.",
              "createdAt": "2020-06-16T09:15:13Z",
              "updatedAt": "2020-06-16T14:48:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTM5Nzg4",
          "commit": {
            "abbreviatedOid": "bdbc746"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-16T14:03:51Z",
          "updatedAt": "2020-06-16T14:03:51Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "We use a prefix-free encoding, which is sufficient to make it a RO per [https://link.springer.com/content/pdf/10.1007/11535218_26.pdf].",
              "createdAt": "2020-06-16T14:03:51Z",
              "updatedAt": "2020-06-16T14:48:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTQwMjIy",
          "commit": {
            "abbreviatedOid": "bdbc746"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-16T14:04:18Z",
          "updatedAt": "2020-06-16T14:04:19Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "We need to make a decision about compressed or not: I went with not compressed.",
              "createdAt": "2020-06-16T14:04:19Z",
              "updatedAt": "2020-06-16T14:48:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTQ4NzE3",
          "commit": {
            "abbreviatedOid": "bdbc746"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-16T14:12:59Z",
          "updatedAt": "2020-06-16T14:12:59Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "Okay let's keep this for now and I'll create an issue to figure this out.",
              "createdAt": "2020-06-16T14:12:59Z",
              "updatedAt": "2020-06-16T14:48:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTQ5NTE1",
          "commit": {
            "abbreviatedOid": "bdbc746"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-16T14:13:53Z",
          "updatedAt": "2020-06-16T14:13:53Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "Sounds good!",
              "createdAt": "2020-06-16T14:13:53Z",
              "updatedAt": "2020-06-16T14:48:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTUwMDA5",
          "commit": {
            "abbreviatedOid": "bdbc746"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-16T14:14:23Z",
          "updatedAt": "2020-06-16T14:14:23Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "Hmm, I was basing this on RFC7748, which has 56 byte keys. (We're not using the Edwards form here.)",
              "createdAt": "2020-06-16T14:14:23Z",
              "updatedAt": "2020-06-16T14:48:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTg1ODA4",
          "commit": {
            "abbreviatedOid": "6cccb5f"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-16T14:49:20Z",
          "updatedAt": "2020-06-16T14:49:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 98,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM0ODE3NTkz",
      "title": "Add 256-bit curves back (for OPAQUE).",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/98",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Static DH oracles are not a concern for OPAQUE, so, let's add back these curves!\r\n\r\ncc @armfazh ",
      "createdAt": "2020-06-15T21:35:31Z",
      "updatedAt": "2020-06-16T14:19:35Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "2afa9f9f38b1c0d08bf613e6be50229fbcf2b4f2",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/256-bit-curves",
      "headRefOid": "09d598e0844dc1368c77b762f8433a5f0d1e2e6e",
      "closedAt": "2020-06-16T14:19:35Z",
      "mergedAt": "2020-06-16T14:19:35Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "3d26e11c8d5ede019c717c381f2178116a57f105"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "In principle I think this could be okay, but there are some things that I'd like to have discussion on.\r\n\r\n1. Do we want to explicitly change the curve25519 and curve448 ciphersuites to actually reference ristretto and decaf? Effectively what we are currently saying is that you need to create a prime-order group and you can do this using ristretto and decaf, but maybe we need to be more explicit in only supporting these instantiations? The reason being that we may end up with a load of un-interoperable implementations with implementers that interpret the spec differently.\r\n\r\n2. I wonder whether we should be explicit on how many bits of security we are offering with each ciphersuite in the case of a static-DH oracle attack? Because P256 and curve25519 are affected differently, and so a curve25519 implementation would actually retain more security, but this is not obvious when just looking at the two group instantiations in isolation.",
          "createdAt": "2020-06-16T09:09:20Z",
          "updatedAt": "2020-06-16T09:09:20Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Do we want to explicitly change the curve25519 and curve448 ciphersuites to actually reference ristretto and decaf? Effectively what we are currently saying is that you need to create a prime-order group and you can do this using ristretto and decaf, but maybe we need to be more explicit in only supporting these instantiations? The reason being that we may end up with a load of un-interoperable implementations with implementers that interpret the spec differently.\r\n\r\nThere's no specification for Decaf, yet, so I'm not sure. Until that's true, I'd prefer we have an entirely separate ciphersuite for Ristretto, which uses the FROM_UNIFORM_BYTES function accordingly. \r\n\r\n> I wonder whether we should be explicit on how many bits of security we are offering with each ciphersuite in the case of a static-DH oracle attack? Because P256 and curve25519 are affected differently, and so a curve25519 implementation would actually retain more security, but this is not obvious when just looking at the two group instantiations in isolation.\r\n\r\nI don't think this is necessary. We already discuss it in the security considerations.",
          "createdAt": "2020-06-16T13:39:49Z",
          "updatedAt": "2020-06-16T13:39:49Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTU1MjE3",
          "commit": {
            "abbreviatedOid": "09d598e"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Makes sense. I'm going to create a new issue to track talking about the prime-order group instantiation for 25519 and 448 a bit more.",
          "createdAt": "2020-06-16T14:19:30Z",
          "updatedAt": "2020-06-16T14:19:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 99,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM1MjIyOTM2",
      "title": "Add initial Sage reference implementation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/99",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @armfazh ",
      "createdAt": "2020-06-16T13:42:29Z",
      "updatedAt": "2020-06-16T13:57:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "2afa9f9f38b1c0d08bf613e6be50229fbcf2b4f2",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/poc",
      "headRefOid": "bcb3ab76e1bee991a49de0b5a73604279bfc5ebf",
      "closedAt": "2020-06-16T13:57:00Z",
      "mergedAt": "2020-06-16T13:57:00Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2ce885137c8e7f0297384da6721ddf6fd744f368"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "LGTM \ud83d\udc4d I think we can tackle verifiability in future PRs.",
          "createdAt": "2020-06-16T13:50:50Z",
          "updatedAt": "2020-06-16T13:50:50Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTIzMDI5",
          "commit": {
            "abbreviatedOid": "bcb3ab7"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-16T13:50:32Z",
          "updatedAt": "2020-06-16T13:50:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 102,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM1ODUxNTIw",
      "title": "Add suffix-free domain separation for H_1.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/102",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-08#section-10.3.",
      "createdAt": "2020-06-17T13:27:06Z",
      "updatedAt": "2020-06-18T08:13:12Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "e3ac1ba8c964d487f223a6c0cd1e62103ece13e2",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/suffix-domain-separation",
      "headRefOid": "a2665e3950ec1732e5f38a7306ebcba07aa3a7e5",
      "closedAt": "2020-06-18T08:13:12Z",
      "mergedAt": "2020-06-18T08:13:12Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "456e2a6b48a5952b27d5ce0e1399078aea224a93"
      },
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Does the purpose of the `info` variable must be user-specific, rather than use it as domain separation tag? \r\nOne can define a separation tag without requiring the user to care about it. do you think this could work?",
          "createdAt": "2020-06-17T16:27:48Z",
          "updatedAt": "2020-06-17T16:27:48Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Does the purpose of the info variable must be user-specific, rather than use it as domain separation tag?\r\n\r\n`info` is an application-specific domain separation string. If absent, we still require domain separation, so there's \"two\" layers of separation in play here.",
          "createdAt": "2020-06-17T17:11:21Z",
          "updatedAt": "2020-06-17T17:11:21Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids if you're OK with these changes, please feel free to merge!",
          "createdAt": "2020-06-17T17:11:35Z",
          "updatedAt": "2020-06-17T17:11:35Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNTE4NDgx",
          "commit": {
            "abbreviatedOid": "697dd1b"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-17T15:25:08Z",
          "updatedAt": "2020-06-17T15:25:09Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "shall we rename this to aux as well?",
              "createdAt": "2020-06-17T15:25:08Z",
              "updatedAt": "2020-06-17T17:01:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNTYxMDI0",
          "commit": {
            "abbreviatedOid": "697dd1b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-17T16:15:28Z",
          "updatedAt": "2020-06-17T16:15:29Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Hmm? It is already named aux.",
              "createdAt": "2020-06-17T16:15:28Z",
              "updatedAt": "2020-06-17T17:01:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNTc1NjM0",
          "commit": {
            "abbreviatedOid": "697dd1b"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-17T16:33:27Z",
          "updatedAt": "2020-06-17T16:33:27Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "oops, I meant `info`.",
              "createdAt": "2020-06-17T16:33:27Z",
              "updatedAt": "2020-06-17T17:01:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNTk5NTE0",
          "commit": {
            "abbreviatedOid": "a2665e3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-17T17:02:03Z",
          "updatedAt": "2020-06-17T17:02:03Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Doh, yes, good catch! Fixed.",
              "createdAt": "2020-06-17T17:02:03Z",
              "updatedAt": "2020-06-17T17:02:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMDQyNzY4",
          "commit": {
            "abbreviatedOid": "a2665e3"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-18T08:13:05Z",
          "updatedAt": "2020-06-18T08:13:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 104,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3MDUxNTE2",
      "title": "Fixes #101: use compressed point encoding",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/104",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-06-19T11:34:38Z",
      "updatedAt": "2020-06-19T16:14:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "75838bcc41235313f4ee3291bf070283255686c7",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/101",
      "headRefOid": "c61ba0c6ecdd1a5697d474d9c99095883aab0c4e",
      "closedAt": "2020-06-19T16:14:01Z",
      "mergedAt": "2020-06-19T16:14:01Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "49c463c9be2da940284eda01d297597e52384bc5"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Rebased and simplified so will merge.",
          "createdAt": "2020-06-19T16:13:57Z",
          "updatedAt": "2020-06-19T16:13:57Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTYyMDM0",
          "commit": {
            "abbreviatedOid": "ed0f91a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-19T15:23:13Z",
          "updatedAt": "2020-06-19T15:23:13Z",
          "comments": [
            {
              "originalPosition": 141,
              "body": "It took me a second to figure out what was happening here -- could we simplify?\r\n\r\n```\r\nb = 3 if sgn == 0 else 2\r\n```",
              "createdAt": "2020-06-19T15:23:13Z",
              "updatedAt": "2020-06-19T16:06:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTYyMzgz",
          "commit": {
            "abbreviatedOid": "ed0f91a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good -- thanks! (please feel free to merge with or without the change above)",
          "createdAt": "2020-06-19T15:23:45Z",
          "updatedAt": "2020-06-19T15:24:03Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTY2MTI4",
          "commit": {
            "abbreviatedOid": "ed0f91a"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-19T15:29:05Z",
          "updatedAt": "2020-06-19T15:29:05Z",
          "comments": [
            {
              "originalPosition": 141,
              "body": "Sure I can simplify",
              "createdAt": "2020-06-19T15:29:05Z",
              "updatedAt": "2020-06-19T16:06:32Z"
            }
          ]
        }
      ]
    },
    {
      "number": 105,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3MDU0MDEx",
      "title": "Fixes #94: use camelcase globally",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/105",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-06-19T11:40:50Z",
      "updatedAt": "2020-06-19T15:37:28Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "456e2a6b48a5952b27d5ce0e1399078aea224a93",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/94",
      "headRefOid": "1906d04c37216381392388d59c128f4ba530b758",
      "closedAt": "2020-06-19T15:37:28Z",
      "mergedAt": "2020-06-19T15:37:28Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "75838bcc41235313f4ee3291bf070283255686c7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTcxNzY3",
          "commit": {
            "abbreviatedOid": "1906d04"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-19T15:37:23Z",
          "updatedAt": "2020-06-19T15:37:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 106,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3MDg5MTQx",
      "title": "Fixes #76: Add KeyGen algorithm",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/106",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This can be used for OPAQUE to generate the Server's key pair",
      "createdAt": "2020-06-19T13:01:49Z",
      "updatedAt": "2020-06-22T08:25:14Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "49c463c9be2da940284eda01d297597e52384bc5",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/76",
      "headRefOid": "e049f3f57f46c91a2f036da6ed14134705f6d62d",
      "closedAt": "2020-06-22T08:25:14Z",
      "mergedAt": "2020-06-22T08:25:13Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "b2f7bcb5a3681cf5219a4c5f87a70119d0267cad"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids after the resolve the conflicts, can you merge?",
          "createdAt": "2020-06-19T17:26:17Z",
          "updatedAt": "2020-06-19T17:26:17Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "> @alxdavids after the resolve the conflicts, can you merge?\r\n\r\nRebased, and merging",
          "createdAt": "2020-06-22T08:25:09Z",
          "updatedAt": "2020-06-22T08:25:09Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTQxODc0",
          "commit": {
            "abbreviatedOid": "a07068f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "The KeyGen function looks good! I only have a blocking comment on notation.",
          "createdAt": "2020-06-19T14:55:22Z",
          "updatedAt": "2020-06-19T14:59:08Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\ud83d\udc4d ",
              "createdAt": "2020-06-19T14:55:22Z",
              "updatedAt": "2020-06-22T08:23:59Z"
            },
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nThe Server MUST run `KeyGen` to generate `(skS, pkS)`. The\r\n```\r\n\r\nOver in HPKE land, we use the terminology (skX, pkX) to denote private/public key pairs. Can we use that here? It might help keep things consistent across documents. An added bonus is that we can replace generic uses of \"publicKey\" with \"pkS\" to make it more clear whose public key it is.\r\n",
              "createdAt": "2020-06-19T14:56:11Z",
              "updatedAt": "2020-06-22T08:23:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjMwMDEx",
          "commit": {
            "abbreviatedOid": "e42cd5d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-19T17:12:27Z",
          "updatedAt": "2020-06-19T17:12:27Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MzczMzIw",
          "commit": {
            "abbreviatedOid": "e42cd5d"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-19T22:56:09Z",
          "updatedAt": "2020-06-19T22:56:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 107,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3MTAzNjUw",
      "title": "Fixes #79",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/107",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Removes H3 as it is the same as H1\r\n- Add prefix-free domain separation for hash function calls\r\n\r\ncc @armfazh ",
      "createdAt": "2020-06-19T13:31:12Z",
      "updatedAt": "2020-06-22T14:54:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b2f7bcb5a3681cf5219a4c5f87a70119d0267cad",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/79",
      "headRefOid": "11214132b52ad3d34b7e56f8cfc44ed56e88b9b9",
      "closedAt": "2020-06-22T14:54:08Z",
      "mergedAt": "2020-06-22T14:54:08Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "7adc603724b59701199c83e19389aa94865c4ed9"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "> Nice reduction :) I only have one blocking comment on the DSTs. Namely, who specifies them? I think it should be this specification, and here's why: if an application chooses to not set these to anything, i.e., they're some default string or they're the same string across challenge, seed, and composite, then they don't do their job of effectively cloning the oracles. If the protocol specifies them as \"RFCXXXX-Challenge\", \"RFXXXX-Seed\", and \"RFCXXX-Composite\", for example, the application gets this separation for free.\r\n\r\nThanks for the review! Yeah you make a good point. I agree with this change, I'll make it and update the commit.",
          "createdAt": "2020-06-19T14:58:59Z",
          "updatedAt": "2020-06-19T14:58:59Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTI3ODY5",
          "commit": {
            "abbreviatedOid": "9187d7a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Nice reduction :) I only have one blocking comment on the DSTs. Namely, who specifies them? I think it should be this specification, and here's why: if an application chooses to not set these to anything, i.e., they're some default string or they're the same string across challenge, seed, and composite, then they don't do their job of effectively cloning the oracles. If the protocol specifies them as \"RFCXXXX-Challenge\", \"RFXXXX-Seed\", and \"RFCXXX-Composite\", for example, the application gets this separation for free.",
          "createdAt": "2020-06-19T14:36:58Z",
          "updatedAt": "2020-06-19T14:55:03Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\n 1. finalizeDST = \"RFCXXXX-Finalize\"\r\n```",
              "createdAt": "2020-06-19T14:36:58Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            },
            {
              "originalPosition": 36,
              "body": "```suggestion\r\nEach of these variables MUST be chosen by the Server implementation.\r\n```",
              "createdAt": "2020-06-19T14:37:28Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            },
            {
              "originalPosition": 37,
              "body": "```suggestion\r\nIn addition, the choice SHOULD be made available to the Client.\r\n```",
              "createdAt": "2020-06-19T14:37:36Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            },
            {
              "originalPosition": 60,
              "body": "```suggestion\r\n 8.  h2Input = I2OSP(len(gen), 2) || gen || \r\n               I2OSP(len(public_key), 2) || public_key || \r\n               I2OSP(len(a1), 2) || a1 || I2OSP(len(a2), 2) || a2 || \r\n               I2OSP(len(a3), 2) || a3 || I2OSP(len(a4), 2) || a4 || \r\n               I2OSP(len(challengeDST), 2) || challengeDST\r\n```",
              "createdAt": "2020-06-19T14:38:49Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            },
            {
              "originalPosition": 85,
              "body": "```suggestion\r\n 8.  h2Input = I2OSP(len(gen), 2) || gen || \r\n            I2OSP(len(public_key), 2) || public_key || \r\n            I2OSP(len(a1), 2) || a1 || I2OSP(len(a2), 2) || a2 || \r\n            I2OSP(len(a3), 2) || a3 || I2OSP(len(a4), 2) || a4 || \r\n            I2OSP(len(challengeDST), 2) || challengeDST\r\n```",
              "createdAt": "2020-06-19T14:39:50Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            },
            {
              "originalPosition": 60,
              "body": "(Noting for later -- `h2Input` case is inconsistent with `public_key` case.)",
              "createdAt": "2020-06-19T14:40:17Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            },
            {
              "originalPosition": 123,
              "body": "Do we need to encode the length of `seed` here, as it's fixed-length based on H_1? (I don't see the harm in doing so. Just thinking out loud.)",
              "createdAt": "2020-06-19T14:41:37Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            },
            {
              "originalPosition": 27,
              "body": "Since these are domain separators for the protocol, shouldn't we define them here, rather than punting to the application? We do this for `Finalize()` above, for example. ",
              "createdAt": "2020-06-19T14:52:59Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTQ1MzUz",
          "commit": {
            "abbreviatedOid": "9187d7a"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-19T14:59:38Z",
          "updatedAt": "2020-06-19T14:59:39Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "Since we specify `H_1` as part of the ciphersuite, I think it's worth being consistent in case we decide to change it.",
              "createdAt": "2020-06-19T14:59:39Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjA0ODU4",
          "commit": {
            "abbreviatedOid": "9187d7a"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-19T16:27:59Z",
          "updatedAt": "2020-06-19T16:27:59Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "Yep, will address this",
              "createdAt": "2020-06-19T16:27:59Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjI2MTA0",
          "commit": {
            "abbreviatedOid": "00e2fd2"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-19T17:05:15Z",
          "updatedAt": "2020-06-19T17:05:16Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Made this change",
              "createdAt": "2020-06-19T17:05:16Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjI3NzMz",
          "commit": {
            "abbreviatedOid": "00e2fd2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-19T17:08:14Z",
          "updatedAt": "2020-06-19T17:08:14Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Should we move these to the functions where they're used, as we did with Finalize?",
              "createdAt": "2020-06-19T17:08:14Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0Mzc5NzQz",
          "commit": {
            "abbreviatedOid": "00e2fd2"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "this looks good",
          "createdAt": "2020-06-19T23:31:27Z",
          "updatedAt": "2020-06-19T23:31:27Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NzEyNzUw",
          "commit": {
            "abbreviatedOid": "1121413"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-22T08:34:31Z",
          "updatedAt": "2020-06-22T08:34:32Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Sure, just made that change now",
              "createdAt": "2020-06-22T08:34:31Z",
              "updatedAt": "2020-06-22T08:34:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDA0MDY3",
          "commit": {
            "abbreviatedOid": "1121413"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-22T14:53:53Z",
          "updatedAt": "2020-06-22T14:53:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 108,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3MzAxMzkx",
      "title": "Description of group properties.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/108",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Clarifies a bit the properties of the group. Feel free to edit if needed.",
      "createdAt": "2020-06-19T21:24:46Z",
      "updatedAt": "2020-06-22T16:38:50Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "d8e807e9828ea69c86761406bceeecbebf155f15",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "armfazh/jun19",
      "headRefOid": "c50a62078494757cdcfa58ab60c4d94a3e4e84d7",
      "closedAt": "2020-06-22T16:38:49Z",
      "mergedAt": "2020-06-22T16:38:49Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d118c741e60320de2cd9df98beb58d46cf07f547"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NzE0NTI4",
          "commit": {
            "abbreviatedOid": "b72d533"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM! I'll leave to @chris-wood to approve & merge.",
          "createdAt": "2020-06-22T08:36:54Z",
          "updatedAt": "2020-06-22T08:38:01Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDkzMTE2",
          "commit": {
            "abbreviatedOid": "b72d533"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-22T16:33:57Z",
          "updatedAt": "2020-06-22T16:33:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 117,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3NzgwNDM0",
      "title": "Fixes #114: unify byte array terminology",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/117",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @armfazh ",
      "createdAt": "2020-06-22T08:42:00Z",
      "updatedAt": "2020-06-22T16:28:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "378b4f88d01c6d4f9f9e4e244bc2d74c2cac5f57",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/114",
      "headRefOid": "d06dcc000a5374d937fdff34664821e976698f10",
      "closedAt": "2020-06-22T16:28:51Z",
      "mergedAt": "2020-06-22T16:28:51Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c53b7e5be4a3f6a5947013a0e43cb6a1de017f88"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDA0Njky",
          "commit": {
            "abbreviatedOid": "4ac7494"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-22T14:54:31Z",
          "updatedAt": "2020-06-22T14:54:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 118,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3Nzg1MTEx",
      "title": "Fixes #113: removes verifiable variables",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/118",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @armfazh ",
      "createdAt": "2020-06-22T08:50:18Z",
      "updatedAt": "2020-06-22T15:42:44Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b2f7bcb5a3681cf5219a4c5f87a70119d0267cad",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/113",
      "headRefOid": "3a590b1bf6a6bce68e4826476732c005051b280c",
      "closedAt": "2020-06-22T15:42:44Z",
      "mergedAt": "2020-06-22T15:42:44Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "378b4f88d01c6d4f9f9e4e244bc2d74c2cac5f57"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDQ5NjM5",
          "commit": {
            "abbreviatedOid": "3a590b1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-22T15:42:33Z",
          "updatedAt": "2020-06-22T15:42:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 119,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3Nzg2NjI5",
      "title": "Fixes #112: Use big-endian byte order",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/119",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @armfazh ",
      "createdAt": "2020-06-22T08:52:59Z",
      "updatedAt": "2020-06-22T15:40:59Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b2f7bcb5a3681cf5219a4c5f87a70119d0267cad",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/112",
      "headRefOid": "805ddcf34d33791ae44f9cbe67e1e63897310f75",
      "closedAt": "2020-06-22T15:40:59Z",
      "mergedAt": "2020-06-22T15:40:59Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "574d47dc47ed281f28c74ab6244275c7c3f02992"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDQ4MjYx",
          "commit": {
            "abbreviatedOid": "805ddcf"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-22T15:40:54Z",
          "updatedAt": "2020-06-22T15:40:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 120,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3Nzg5NzU0",
      "title": "Fixes #111: Clarify GF(p)",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/120",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @armfazh ",
      "createdAt": "2020-06-22T08:58:14Z",
      "updatedAt": "2020-06-22T16:29:59Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b2f7bcb5a3681cf5219a4c5f87a70119d0267cad",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/111",
      "headRefOid": "08c195664dcb130cd9a2cc15f7eb1e5719f63d88",
      "closedAt": "2020-06-22T16:29:59Z",
      "mergedAt": "2020-06-22T16:29:59Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d8e807e9828ea69c86761406bceeecbebf155f15"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDg5Mzc2",
          "commit": {
            "abbreviatedOid": "8aff5af"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-22T16:29:21Z",
          "updatedAt": "2020-06-22T16:29:45Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\norder of the group. We use `GF(p)` to represent the finite field of\r\n```",
              "createdAt": "2020-06-22T16:29:21Z",
              "updatedAt": "2020-06-22T16:29:52Z"
            }
          ]
        }
      ]
    },
    {
      "number": 121,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3ODA1MDI1",
      "title": "Fixes #100: Add group instantiation advice",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/121",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @armfazh ",
      "createdAt": "2020-06-22T09:24:16Z",
      "updatedAt": "2020-06-24T08:41:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "d118c741e60320de2cd9df98beb58d46cf07f547",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/100",
      "headRefOid": "3ee92c5abc3162d5bb4d2a741926c9c79abfc3e8",
      "closedAt": "2020-06-24T08:41:36Z",
      "mergedAt": "2020-06-24T08:41:36Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "89b8e8414f1d78d3c50b3dacda075f5a1bb1519a"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This is *great* -- thanks! Please feel free to merge, or wait for @armfazh to give it another review.",
          "createdAt": "2020-06-23T12:42:44Z",
          "updatedAt": "2020-06-23T12:42:44Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "cc @armfazh if you want to take another look before I merge.",
          "createdAt": "2020-06-23T12:58:27Z",
          "updatedAt": "2020-06-23T12:58:27Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDA4MTQ1",
          "commit": {
            "abbreviatedOid": "f31e7bb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "The structure of the NIST and curve2559/448 sections is inconsistent. Could we make the uniform in some way? For example:\r\n\r\n## curve2559 and curve448\r\n\r\nFor curve25519 and curve448, applications MUST validate each untrusted point\r\nby checking for all-zero outputs resulting from scalar multiplication wherever\r\nused with said point. The `HashToGroup`, `Serialize`, and `Deserialize` algorithms \r\nare handled as explained in the ciphersuite definition. The generators of these\r\ngroups are the base points given by\r\n\r\nx = 9\r\ny = 14781619447589544791020593568409986887264606134616475288964881837755586237401.\r\n\r\n(likewise for curve448)\r\n\r\nThe identity element is the point at infinity. The `Order` function returns\r\n2^252 + 0x14def9dea2f79cd65812631a5cf5d3ed and (curve448 value).",
          "createdAt": "2020-06-22T14:57:57Z",
          "updatedAt": "2020-06-22T15:21:10Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "```suggestion\r\nfrom {{protocol}}. We discuss how the definition of these curves\r\n```",
              "createdAt": "2020-06-22T14:57:57Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            },
            {
              "originalPosition": 95,
              "body": "```suggestion\r\nFor P256, P384, and P521, the instantiation of a\r\n```",
              "createdAt": "2020-06-22T14:58:06Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            },
            {
              "originalPosition": 101,
              "body": "```suggestion\r\nRoughly speaking, any valid point on the curve is a\r\ngroup element. Adding curve points corresponds to point addition, and\r\n```",
              "createdAt": "2020-06-22T14:58:53Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            },
            {
              "originalPosition": 107,
              "body": "Should we list these values inline, to make the document self-contained?",
              "createdAt": "2020-06-22T14:59:42Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            },
            {
              "originalPosition": 112,
              "body": "```suggestion\r\ncurve25519 and curve448 come with extra considerations surrounding scalar\r\nmultiplication since the cofactor of each is `4`. This means\r\n```",
              "createdAt": "2020-06-22T15:00:25Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            },
            {
              "originalPosition": 114,
              "body": "```suggestion\r\nthat curve points can either belong to a small subgroups that are not of \r\nprime order. The larger prime-order subgroup\r\n```",
              "createdAt": "2020-06-22T15:01:00Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTY3OTM1",
          "commit": {
            "abbreviatedOid": "f31e7bb"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-22T18:19:44Z",
          "updatedAt": "2020-06-22T18:19:44Z",
          "comments": [
            {
              "originalPosition": 112,
              "body": "since the cofactor is `8` and `4`, respectively.",
              "createdAt": "2020-06-22T18:19:44Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTcwNTQ5",
          "commit": {
            "abbreviatedOid": "f31e7bb"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-22T18:23:34Z",
          "updatedAt": "2020-06-22T18:23:35Z",
          "comments": [
            {
              "originalPosition": 116,
              "body": "What is the reasoning supporting this paragraph? ",
              "createdAt": "2020-06-22T18:23:35Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTk2MDU2",
          "commit": {
            "abbreviatedOid": "f31e7bb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-22T19:02:49Z",
          "updatedAt": "2020-06-22T19:02:49Z",
          "comments": [
            {
              "originalPosition": 116,
              "body": "Can you elaborate on the question?",
              "createdAt": "2020-06-22T19:02:49Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MjEyMDk4",
          "commit": {
            "abbreviatedOid": "f31e7bb"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-22T19:28:42Z",
          "updatedAt": "2020-06-22T19:28:43Z",
          "comments": [
            {
              "originalPosition": 116,
              "body": ">To ensure that all operations are performed in this subgroup, any implementer must check for all-zero outputs of the scalar multiplication algorithms wherever they are used.\r\n\r\nI don't see the relation between performing operations in the subgroup versus cheking for all-zeros.\r\n\r\n*Recall that the procedures described in rfc7748 are specially crafted for a Diffie-Hellman protocol.\r\n\r\n",
              "createdAt": "2020-06-22T19:28:42Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NzQwNzkz",
          "commit": {
            "abbreviatedOid": "2b21347"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-23T12:42:18Z",
          "updatedAt": "2020-06-23T12:42:18Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NzQyMjc0",
          "commit": {
            "abbreviatedOid": "2b21347"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T12:44:09Z",
          "updatedAt": "2020-06-23T12:44:10Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Should we clarify that these are affine coordinates?",
              "createdAt": "2020-06-23T12:44:09Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1OTg1OTUx",
          "commit": {
            "abbreviatedOid": "cf89b13"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "A couple of nits only.",
          "createdAt": "2020-06-23T17:09:47Z",
          "updatedAt": "2020-06-23T17:36:56Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "This number should be in hex too.",
              "createdAt": "2020-06-23T17:09:47Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            },
            {
              "originalPosition": 30,
              "body": "Validation is not as easy as all-zero checking. I think it's better to add that \"points must be in the prime order subgroup\". ",
              "createdAt": "2020-06-23T17:25:06Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            },
            {
              "originalPosition": 65,
              "body": "ANSI X9.62 is the usual reference for elliptic curves.",
              "createdAt": "2020-06-23T17:32:36Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 122,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM4MTgwNzc1",
      "title": "Refactor the API around contexts and modes",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/122",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This change decouples the notion of verifiability from the ciphersuite definition, since the algorithms in use do not affect how verifiability works. There are now two \"modes\" for the OPRF protocol: base mode and verifiability mode. Clients and servers run a \"setup\" step that produces a client or server context (respectively), which has the relevant APIs on them (blind, unblind, and finalize for clients, and evaluate for servers). The verifiable mode augments (extends) these contexts to provide the additional proof generation and verification logic. \r\n\r\nI also updated the ciphersuite definitions to move H2, which was previously \"hash to scalar element,\" to the GG API. This lets us use hash-to-field from draft-irtf-cfrg-hash-to-curve, which is nice. It will also let us easily adopt ristretto255 (and Decaf), since those have a similar API shape.\r\n\r\ncc @armfazh @grittygrease ",
      "createdAt": "2020-06-22T21:14:19Z",
      "updatedAt": "2020-06-25T18:42:27Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "89b8e8414f1d78d3c50b3dacda075f5a1bb1519a",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/refactor",
      "headRefOid": "917082745d7066cd4c62e1336f2d18bb76af6942",
      "closedAt": "2020-06-25T12:25:08Z",
      "mergedAt": "2020-06-25T12:25:08Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "3a62ce0d394d59785a9c3fb348c365f25a7ce9d1"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Apologies for the list of individual review comments. I was using the VS code GitHub PR review integration for the first time and it has come out rather strangely.",
          "createdAt": "2020-06-23T10:08:28Z",
          "updatedAt": "2020-06-23T10:08:56Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids this is ready to go! I'm making it an official PR.",
          "createdAt": "2020-06-24T21:50:35Z",
          "updatedAt": "2020-06-24T21:50:35Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjEzOTMy",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T09:39:14Z",
          "updatedAt": "2020-06-23T09:55:02Z",
          "comments": [
            {
              "originalPosition": 91,
              "body": "I'm don't think that this makes sense as a group API function. There's no concept of a keypair in a group.",
              "createdAt": "2020-06-23T09:39:14Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 103,
              "body": "I think that the `KeyGen` function should be removed from here and we can just talk about these types when we get to the protocol.",
              "createdAt": "2020-06-23T09:40:13Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 13,
              "body": "Is there a reason why this has been removed, is it just not required? FWIW I'm not necessarily against it.",
              "createdAt": "2020-06-23T09:40:53Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 179,
              "body": "We seem to have gone back to snake case here :) It seems that a lot of the H2C functions are in snake case, and we use camel case in this document exclusively. Maybe we should make everything snake case instead?",
              "createdAt": "2020-06-23T09:42:13Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 197,
              "body": "```suggestion\r\n   Client(inputs, pkS, info)                 Server(skS, pkS)\r\n```",
              "createdAt": "2020-06-23T09:45:03Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 214,
              "body": "I tried to deliberately move away from the word \"signed\" in the past as it sounds like a signature scheme. For Privacy Pass we use \"issued\", do you think that could work here? I don't have many better suggestions.",
              "createdAt": "2020-06-23T09:46:35Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 224,
              "body": "Noticed a typo in line 523 above: `in (V)OPRF the protocol` -> `in the (V)OPRF protocol`",
              "createdAt": "2020-06-23T09:48:01Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 236,
              "body": "Has `suite` been defined somewhere previously?",
              "createdAt": "2020-06-23T09:48:51Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 244,
              "body": "Maybe we need to say around here that the server should make this public key public?",
              "createdAt": "2020-06-23T09:49:44Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 361,
              "body": "```suggestion\n  SerializedElement blindedTokens[m]\n```",
              "createdAt": "2020-06-23T09:50:34Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 369,
              "body": "```suggestion\n  Evaluation Ev\n```",
              "createdAt": "2020-06-23T09:51:20Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 453,
              "body": "Is rejection sampling not carried out in `hash_to_field`?",
              "createdAt": "2020-06-23T09:52:21Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 432,
              "body": "Maybe include an extra hyphen for DSTs: `\"RFCXXXX-seed-\" + self.contextString`, to make it clear that the final part is a separate identifier?",
              "createdAt": "2020-06-23T09:54:04Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 520,
              "body": "`Evaluate` is the most important algorithm in this section, should we have it above the utility functions above?",
              "createdAt": "2020-06-23T09:55:01Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjI2MzU5",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T09:55:28Z",
          "updatedAt": "2020-06-23T09:55:28Z",
          "comments": [
            {
              "originalPosition": 551,
              "body": "```suggestion\n  proof = GenerateProof(skS, pkS, blindedTokens, Ev)\n```",
              "createdAt": "2020-06-23T09:55:28Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjI2ODcy",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T09:56:08Z",
          "updatedAt": "2020-06-23T09:56:08Z",
          "comments": [
            {
              "originalPosition": 675,
              "body": "This paragraph is already said above and so it can be removed.",
              "createdAt": "2020-06-23T09:56:08Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjI3NDE3",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T09:56:52Z",
          "updatedAt": "2020-06-23T09:56:52Z",
          "comments": [
            {
              "originalPosition": 693,
              "body": "For consistency:\n```suggestion\n  Evaluation Ev\n```",
              "createdAt": "2020-06-23T09:56:52Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjI5NTgy",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T09:59:37Z",
          "updatedAt": "2020-06-23T09:59:37Z",
          "comments": [
            {
              "originalPosition": 901,
              "body": "Is `ABORT()` explained anywhere?",
              "createdAt": "2020-06-23T09:59:37Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjMwMjk3",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T10:00:32Z",
          "updatedAt": "2020-06-23T10:00:33Z",
          "comments": [
            {
              "originalPosition": 753,
              "body": "```suggestion\ndef Unblind(pkS, tokens, blindedTokens, Ev):\n```",
              "createdAt": "2020-06-23T10:00:32Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjMwNTQx",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T10:00:51Z",
          "updatedAt": "2020-06-23T10:00:51Z",
          "comments": [
            {
              "originalPosition": 757,
              "body": "```suggestion\n    Z = GG.Deserialize(Ev.elements[i])\n```",
              "createdAt": "2020-06-23T10:00:51Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjMxMTAw",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T10:01:37Z",
          "updatedAt": "2020-06-23T10:01:37Z",
          "comments": [
            {
              "originalPosition": 835,
              "body": "```suggestion\n  Evaluation Ev\n```",
              "createdAt": "2020-06-23T10:01:37Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjMxMTI4",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T10:01:39Z",
          "updatedAt": "2020-06-23T10:01:40Z",
          "comments": [
            {
              "originalPosition": 844,
              "body": "```suggestion\ndef VerifyProof(pkS, blindedTokens, Ev, proof):\n```",
              "createdAt": "2020-06-23T10:01:39Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjMxNjU1",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T10:02:22Z",
          "updatedAt": "2020-06-23T10:02:22Z",
          "comments": [
            {
              "originalPosition": 891,
              "body": "```suggestion\n  Evaluation Ev\n```",
              "createdAt": "2020-06-23T10:02:22Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjMyMjUy",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T10:03:09Z",
          "updatedAt": "2020-06-23T10:03:09Z",
          "comments": [
            {
              "originalPosition": 931,
              "body": "```suggestion\n    Z = GG.Deserialize(Ev.elements[i])\n```",
              "createdAt": "2020-06-23T10:03:09Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjMzMTEy",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Final comments.",
          "createdAt": "2020-06-23T10:04:18Z",
          "updatedAt": "2020-06-23T10:07:26Z",
          "comments": [
            {
              "originalPosition": 947,
              "body": "This is a really nice interface! :) I'm glad that we could get rid of the HKDF.",
              "createdAt": "2020-06-23T10:04:18Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 13,
              "body": "ignore, I see that you've moved it below! \ud83d\udc4d ",
              "createdAt": "2020-06-23T10:05:03Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 899,
              "body": "```suggestion\ndef Unblind(pkS, tokens, blindedTokens, Ev):\n```",
              "createdAt": "2020-06-23T10:06:13Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 900,
              "body": "```suggestion\n  if VerifyProof(pkS, blindedTokens, Ev) == false:\n```",
              "createdAt": "2020-06-23T10:06:14Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDIyMjAz",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:32:39Z",
          "updatedAt": "2020-06-24T21:32:39Z",
          "comments": [
            {
              "originalPosition": 91,
              "body": "Hmm, but there is a notion of a scalar and element of the group, right? ",
              "createdAt": "2020-06-24T21:32:39Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDIzODM2",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:35:33Z",
          "updatedAt": "2020-06-24T21:35:33Z",
          "comments": [
            {
              "originalPosition": 179,
              "body": "Good catch! I'll make this snake case.",
              "createdAt": "2020-06-24T21:35:33Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDI0MTk3",
          "commit": {
            "abbreviatedOid": "41654be"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:36:14Z",
          "updatedAt": "2020-06-24T21:36:15Z",
          "comments": [
            {
              "originalPosition": 224,
              "body": "Eagle eye!",
              "createdAt": "2020-06-24T21:36:15Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDI0Mzc4",
          "commit": {
            "abbreviatedOid": "41654be"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:36:34Z",
          "updatedAt": "2020-06-24T21:36:34Z",
          "comments": [
            {
              "originalPosition": 214,
              "body": "I think issued will work. Let's go with that!",
              "createdAt": "2020-06-24T21:36:34Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDI2MTAz",
          "commit": {
            "abbreviatedOid": "41654be"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:39:42Z",
          "updatedAt": "2020-06-24T21:39:43Z",
          "comments": [
            {
              "originalPosition": 244,
              "body": "Yep, that'll work. ",
              "createdAt": "2020-06-24T21:39:42Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDI2MTcx",
          "commit": {
            "abbreviatedOid": "41654be"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:39:49Z",
          "updatedAt": "2020-06-24T21:39:50Z",
          "comments": [
            {
              "originalPosition": 236,
              "body": "I forgot to pass it to this function. Fixed!",
              "createdAt": "2020-06-24T21:39:49Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDI2OTU3",
          "commit": {
            "abbreviatedOid": "69cd6f9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:41:18Z",
          "updatedAt": "2020-06-24T21:41:18Z",
          "comments": [
            {
              "originalPosition": 520,
              "body": "Yep, I'm fine with that. I'll bump it up.",
              "createdAt": "2020-06-24T21:41:18Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDI3NzUw",
          "commit": {
            "abbreviatedOid": "69cd6f9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:42:39Z",
          "updatedAt": "2020-06-24T21:42:39Z",
          "comments": [
            {
              "originalPosition": 675,
              "body": "Good catch!",
              "createdAt": "2020-06-24T21:42:39Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDI4Nzg5",
          "commit": {
            "abbreviatedOid": "16cec54"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:44:44Z",
          "updatedAt": "2020-06-24T21:44:45Z",
          "comments": [
            {
              "originalPosition": 901,
              "body": "It is now. :)",
              "createdAt": "2020-06-24T21:44:44Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDMwNzY4",
          "commit": {
            "abbreviatedOid": "dbfa174"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:48:28Z",
          "updatedAt": "2020-06-24T21:48:28Z",
          "comments": [
            {
              "originalPosition": 947,
              "body": "Me too!",
              "createdAt": "2020-06-24T21:48:28Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDMwOTA0",
          "commit": {
            "abbreviatedOid": "dbfa174"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:48:47Z",
          "updatedAt": "2020-06-24T21:48:48Z",
          "comments": [
            {
              "originalPosition": 453,
              "body": "Nope -- it's deterministic.",
              "createdAt": "2020-06-24T21:48:48Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDMxMDk4",
          "commit": {
            "abbreviatedOid": "dbfa174"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:49:12Z",
          "updatedAt": "2020-06-24T21:49:12Z",
          "comments": [
            {
              "originalPosition": 432,
              "body": "Good idea. I'll add that.",
              "createdAt": "2020-06-24T21:49:12Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MzQ0MTQx",
          "commit": {
            "abbreviatedOid": "e805f72"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me! Just a few nits.",
          "createdAt": "2020-06-25T09:56:51Z",
          "updatedAt": "2020-06-25T10:13:11Z",
          "comments": [
            {
              "originalPosition": 205,
              "body": "```suggestion\r\nseparation in the (V)OPRF protocol. Specifically, any system which has\r\n```",
              "createdAt": "2020-06-25T09:56:51Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 368,
              "body": "```suggestion\r\n  Evaluation Ev\r\n```",
              "createdAt": "2020-06-25T10:05:41Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 400,
              "body": "Do we need to make these functions snake-case? It looks like they are in sage. Or maybe this is just because it is python syntax?",
              "createdAt": "2020-06-25T10:06:36Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NDM5ODgy",
          "commit": {
            "abbreviatedOid": "9170827"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-25T12:25:01Z",
          "updatedAt": "2020-06-25T12:25:01Z",
          "comments": [
            {
              "originalPosition": 400,
              "body": "I think the functions should all consistently use camel-cased. Snake case in the code is just a Python-ism (I think). ",
              "createdAt": "2020-06-25T12:25:01Z",
              "updatedAt": "2020-06-25T12:25:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 123,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQwMDAwNTk2",
      "title": "Remove rejection sampling",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/123",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-06-25T12:53:00Z",
      "updatedAt": "2020-06-25T12:59:17Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "3a62ce0d394d59785a9c3fb348c365f25a7ce9d1",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/remove-rejection-sampling",
      "headRefOid": "26718b550e52c22d3b5199889dcf789af97b36fa",
      "closedAt": "2020-06-25T12:59:17Z",
      "mergedAt": "2020-06-25T12:59:17Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "73492d2727115a7591a3d340e31f0565465348a7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NDY2OTA4",
          "commit": {
            "abbreviatedOid": "26718b5"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-25T12:59:11Z",
          "updatedAt": "2020-06-25T12:59:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 125,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQwMjYwMjI3",
      "title": "Simplifies some parameters and functions.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/125",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Solving some issues that I detected during the review. ",
      "createdAt": "2020-06-25T21:12:30Z",
      "updatedAt": "2020-06-26T11:29:48Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "73492d2727115a7591a3d340e31f0565465348a7",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "armfazh/jun25",
      "headRefOid": "403d3e35215852503c2b2e05dbcdc0226fe80050",
      "closedAt": "2020-06-26T11:29:48Z",
      "mergedAt": "2020-06-26T11:29:48Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "032860a2ca062d69b47457e8721f74f702a3c61a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODgzMTAw",
          "commit": {
            "abbreviatedOid": "a135d48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-25T21:48:34Z",
          "updatedAt": "2020-06-25T21:50:33Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "Please revert this -- the old notation was correct!",
              "createdAt": "2020-06-25T21:48:34Z",
              "updatedAt": "2020-06-25T22:48:19Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODk5NDI1",
          "commit": {
            "abbreviatedOid": "a135d48"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-25T22:21:54Z",
          "updatedAt": "2020-06-25T22:21:55Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "What this notation `proof<0...2^16-1>` means?",
              "createdAt": "2020-06-25T22:21:54Z",
              "updatedAt": "2020-06-25T22:48:19Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3OTA2NDAz",
          "commit": {
            "abbreviatedOid": "a135d48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-25T22:38:55Z",
          "updatedAt": "2020-06-25T22:38:55Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "It's TLS notation -- it means that `proof` is a list of `Scalar` elements consisting of anywhere from 0 to 2^16-1 bytes.",
              "createdAt": "2020-06-25T22:38:55Z",
              "updatedAt": "2020-06-25T22:48:19Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MTE3Njky",
          "commit": {
            "abbreviatedOid": "403d3e3"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-26T08:41:05Z",
          "updatedAt": "2020-06-26T08:41:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 127,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQwNjczNDMz",
      "title": "Add separation between base and verifiable mode setup functions.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/127",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-06-26T16:20:05Z",
      "updatedAt": "2020-06-26T16:43:15Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "627c224a9f024edcae01e80c6ed03cbfca6834f3",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/clarity-edits",
      "headRefOid": "7c311fdf7d986b594033ed655cab2198de1ee6f0",
      "closedAt": "2020-06-26T16:43:15Z",
      "mergedAt": "2020-06-26T16:43:15Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "febf436f7929bf987f290a5b1559588c5cfecc3c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NDQzMDE5",
          "commit": {
            "abbreviatedOid": "7c311fd"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-26T16:43:08Z",
          "updatedAt": "2020-06-26T16:43:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 128,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQwNjc3Mzg0",
      "title": "Add EvaluateInput API for PrivacyPass.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/128",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "PrivacyPass can use this without having to use any group operations from VOPRF.",
      "createdAt": "2020-06-26T16:29:03Z",
      "updatedAt": "2020-06-29T13:11:38Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "5c28ca526c03329940406554c659e40ee51694de",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/evaluate-input",
      "headRefOid": "5ab0d74988cc35621c48ffe6b0afd5df28f43171",
      "closedAt": "2020-06-29T13:11:37Z",
      "mergedAt": "2020-06-29T13:11:37Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b307fa0b428aeeb3b8c754550dcf93ce97d5bf2e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4OTk5OTQ1",
          "commit": {
            "abbreviatedOid": "375b506"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Yep looks good, feel free to merge once the conflict is sorted.",
          "createdAt": "2020-06-29T08:43:13Z",
          "updatedAt": "2020-06-29T08:43:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 129,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQxNDQwNDQy",
      "title": "Remove batch notation from all main function descriptions.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/129",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Batch notation is only useful in ComputeComposites. This change optimizes all other functions for the common, non-batched case. Hopefully this makes use of these APIs easier in other protocols such as OPAQUE.",
      "createdAt": "2020-06-29T14:07:47Z",
      "updatedAt": "2020-06-30T07:42:28Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b307fa0b428aeeb3b8c754550dcf93ce97d5bf2e",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/remove-batch",
      "headRefOid": "e4755a228df0afd282ba9a21f13b6b19bb071897",
      "closedAt": "2020-06-30T07:42:28Z",
      "mergedAt": "2020-06-30T07:42:28Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "8bf2d234585002ee57e6ecabb9af5ddfae70e094"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NzUwOTA3",
          "commit": {
            "abbreviatedOid": "e4755a2"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-30T07:42:15Z",
          "updatedAt": "2020-06-30T07:42:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 130,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ2ODkxNjI5",
      "title": "Read-through and deleting old material",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/130",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Rewording\r\n- Removed privacy considerations as they're app-specific\r\n- Remove application section as it was just reiterating stuff in the intro\r\n\r\n(It's a big diff, but most of it is just re-wrapping lines etc)",
      "createdAt": "2020-07-09T14:19:29Z",
      "updatedAt": "2020-07-13T08:41:37Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "a729c70f9761825c912e32721bb80e70862ea431",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/readthrough",
      "headRefOid": "aeeda9a8608824391715238fde9347548408306a",
      "closedAt": "2020-07-13T08:41:36Z",
      "mergedAt": "2020-07-13T08:41:36Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "bd81b95dee48de6f6cf06e393a8628ff45afb4ce"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NzEzMzEx",
          "commit": {
            "abbreviatedOid": "6dbc03e"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I suggest moving the suite IDs to the beginning of the parameter list. ",
          "createdAt": "2020-07-10T21:34:45Z",
          "updatedAt": "2020-07-10T21:41:15Z",
          "comments": [
            {
              "originalPosition": 609,
              "body": "Beware of the [errata](https://www.rfc-editor.org/errata/eid4730) that flips the y-coordinate of the generator.",
              "createdAt": "2020-07-10T21:34:46Z",
              "updatedAt": "2020-07-13T08:40:30Z"
            },
            {
              "originalPosition": 845,
              "body": "```suggestion\r\ncurve setting, this function deterministically maps inputs x (as byte arrays) to\r\n```",
              "createdAt": "2020-07-10T21:38:36Z",
              "updatedAt": "2020-07-13T08:40:30Z"
            }
          ]
        }
      ]
    },
    {
      "number": 131,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ3NDUwMDM2",
      "title": "Curve{25519,448}: correctly check points and correct order",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/131",
      "state": "MERGED",
      "author": "bwesterb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I'd prefer just specifying ristretto/decaf, but if you're going to use plain Curve25519 and Curve448, you'd better check those input points for membership correctly.  (RFC7748 only hints of a method which is not even sufficient.)",
      "createdAt": "2020-07-10T13:46:03Z",
      "updatedAt": "2020-07-10T17:21:25Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "8bf2d234585002ee57e6ecabb9af5ddfae70e094",
      "headRepository": "bwesterb/draft-irtf-cfrg-voprf",
      "headRefName": "patch-1",
      "headRefOid": "1b91ac215c209ed39b79d28cb0319963a90b4a4f",
      "closedAt": "2020-07-10T17:21:25Z",
      "mergedAt": "2020-07-10T17:21:25Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a729c70f9761825c912e32721bb80e70862ea431"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NDE2MTk0",
          "commit": {
            "abbreviatedOid": "ee49f8b"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-10T13:48:46Z",
          "updatedAt": "2020-07-10T13:50:49Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Nit: remove whitespace\r\n```suggestion\r\n  - Deserialization: Implementers must check for each untrusted input point\r\n    whether it's a member of the big prime-order subgroup of the curve.\r\n    This can be done by scalar multiplying the point by Order() and checking\r\n    whether it's zero.\r\n```",
              "createdAt": "2020-07-10T13:48:47Z",
              "updatedAt": "2020-07-10T13:52:32Z"
            },
            {
              "originalPosition": 32,
              "body": "Nit: spelling.\r\n```suggestion\r\n  - Deserialization: Implementers must check for each untrusted input point\r\n```",
              "createdAt": "2020-07-10T13:49:57Z",
              "updatedAt": "2020-07-10T13:52:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NTcwMjM2",
          "commit": {
            "abbreviatedOid": "1b91ac2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-10T17:21:19Z",
          "updatedAt": "2020-07-10T17:21:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 132,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ4MTM2OTc1",
      "title": "release -04 change",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/132",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Made before uploading",
      "createdAt": "2020-07-13T09:39:36Z",
      "updatedAt": "2020-08-07T17:00:50Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "bd81b95dee48de6f6cf06e393a8628ff45afb4ce",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/draft-04",
      "headRefOid": "56a0387b03f29893936d6a62d04d4e81cadc69d0",
      "closedAt": "2020-08-07T17:00:50Z",
      "mergedAt": "2020-08-07T17:00:50Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a906157cb8669ae0896bf7d92a3af1a1305a31d1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDY1OTA1",
          "commit": {
            "abbreviatedOid": "56a0387"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-08-07T17:00:45Z",
          "updatedAt": "2020-08-07T17:00:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 134,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU5NjkwMjgx",
      "title": "suggested small edits for clarity",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/134",
      "state": "MERGED",
      "author": "tatianab",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-07-31T00:30:19Z",
      "updatedAt": "2020-07-31T00:31:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "bd81b95dee48de6f6cf06e393a8628ff45afb4ce",
      "headRepository": "tatianab/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "a37bc9fd4427131ee65f40bd08226cf56a9109b8",
      "closedAt": "2020-07-31T00:31:56Z",
      "mergedAt": "2020-07-31T00:31:56Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "aa753421895fba50007660d1f91668b6ded8fecb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODQ4NTUy",
          "commit": {
            "abbreviatedOid": "a37bc9f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-31T00:31:51Z",
          "updatedAt": "2020-07-31T00:31:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 136,
      "id": "MDExOlB1bGxSZXF1ZXN0NDY2MzQxNjk1",
      "title": "renaming for consistency",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/136",
      "state": "MERGED",
      "author": "tatianab",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "blindedToken --> blindToken\r\nunblindedToken --> issuedToken",
      "createdAt": "2020-08-11T20:34:57Z",
      "updatedAt": "2020-08-11T21:50:57Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "a906157cb8669ae0896bf7d92a3af1a1305a31d1",
      "headRepository": "tatianab/draft-irtf-cfrg-voprf",
      "headRefName": "tatianab/clarity",
      "headRefOid": "585bcc815266bfe04cfcbfbcc9b03da2255e9663",
      "closedAt": "2020-08-11T21:50:57Z",
      "mergedAt": "2020-08-11T21:50:57Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "269a97896e87c3948c24a11e6db6d832c6cbbadd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDUzNjcy",
          "commit": {
            "abbreviatedOid": "585bcc8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-08-11T21:50:52Z",
          "updatedAt": "2020-08-11T21:50:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 137,
      "id": "MDExOlB1bGxSZXF1ZXN0NDY2ODY1MzY4",
      "title": "unify append notation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/137",
      "state": "MERGED",
      "author": "tatianab",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "change + to || when referring to byte arrays",
      "createdAt": "2020-08-12T16:00:13Z",
      "updatedAt": "2020-08-18T23:31:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "269a97896e87c3948c24a11e6db6d832c6cbbadd",
      "headRepository": "tatianab/draft-irtf-cfrg-voprf",
      "headRefName": "tatianab/clarity",
      "headRefOid": "07e68939aa40f6261f1774e4ed624536f1f4e093",
      "closedAt": "2020-08-18T23:31:05Z",
      "mergedAt": "2020-08-18T23:31:05Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "9aebfaef81dde5a5815ac80cb6d02b82ff6ccc01"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks!",
          "createdAt": "2020-08-18T23:30:58Z",
          "updatedAt": "2020-08-18T23:30:58Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODk3NTA1",
          "commit": {
            "abbreviatedOid": "07e6893"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-08-18T23:30:52Z",
          "updatedAt": "2020-08-18T23:30:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 138,
      "id": "MDExOlB1bGxSZXF1ZXN0NDcwNTI4NTg5",
      "title": "Adding a description of HashToScalar function",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/138",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The implementation of HashToScalar can be performed by reusing the hash_to_field function from Hash to Curve draft.\r\n\r\n\r\nCloses #135 ",
      "createdAt": "2020-08-20T00:29:21Z",
      "updatedAt": "2020-09-09T10:39:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "9aebfaef81dde5a5815ac80cb6d02b82ff6ccc01",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "addHashToScalar",
      "headRefOid": "9e3393777cd797bf954aa205ad72643c62d97c93",
      "closedAt": "2020-09-09T10:39:01Z",
      "mergedAt": "2020-09-09T10:39:00Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "751c0307f9e3585cb0b14884b23517eecca9f7b8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODc5MTg5",
          "commit": {
            "abbreviatedOid": "9e33937"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-09-09T10:38:50Z",
          "updatedAt": "2020-09-09T10:38:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 141,
      "id": "MDExOlB1bGxSZXF1ZXN0NDgyNzUyMDYw",
      "title": "Adding Armando as document author",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/141",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Hey @armfazh, thanks for all the work that you have done on this document so far. It's about time you were added as a full author! Feel free to suggest changes to any of the details if I have got anything incorrect.\r\n\r\ncc @chris-wood ",
      "createdAt": "2020-09-09T10:46:45Z",
      "updatedAt": "2020-09-10T15:56:03Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "751c0307f9e3585cb0b14884b23517eecca9f7b8",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/add-author",
      "headRefOid": "0a2d50b49447a8e788dadd797a0adf3ff55c4bf6",
      "closedAt": "2020-09-10T15:56:03Z",
      "mergedAt": "2020-09-10T15:56:03Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "fbd93a2d3820d74f0b76e070c0d50832fa187473"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0OTUzMDgz",
          "commit": {
            "abbreviatedOid": "6658f78"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-09-09T12:25:25Z",
          "updatedAt": "2020-09-09T12:25:25Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Can we make this alphabetical?",
              "createdAt": "2020-09-09T12:25:25Z",
              "updatedAt": "2020-09-10T14:28:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1OTk1ODg0",
          "commit": {
            "abbreviatedOid": "0a2d50b"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-09-10T14:28:47Z",
          "updatedAt": "2020-09-10T14:28:47Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Yep, my bad, that's fixed now!",
              "createdAt": "2020-09-10T14:28:47Z",
              "updatedAt": "2020-09-10T14:28:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MDgyMjIy",
          "commit": {
            "abbreviatedOid": "0a2d50b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-09-10T15:55:55Z",
          "updatedAt": "2020-09-10T15:55:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 149,
      "id": "MDExOlB1bGxSZXF1ZXN0NDkzNTc1NTY2",
      "title": "Cite TLS notation.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/149",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #145.",
      "createdAt": "2020-09-26T13:13:44Z",
      "updatedAt": "2020-09-28T17:46:18Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "cd85b5938e1e3ee17e325fa1c598565f400f1473",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/cite-tls",
      "headRefOid": "6a0baff40109f92f558ac16f8c11f0137082c3e0",
      "closedAt": "2020-09-28T17:46:18Z",
      "mergedAt": "2020-09-28T17:46:18Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "4773361d19f00550d58c35e92d074ceadd7891d7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NzU5MjE3",
          "commit": {
            "abbreviatedOid": "6a0baff"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-09-28T17:43:30Z",
          "updatedAt": "2020-09-28T17:43:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 150,
      "id": "MDExOlB1bGxSZXF1ZXN0NDk0MjgzMjc1",
      "title": "Grammar checks",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/150",
      "state": "MERGED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-09-28T17:01:52Z",
      "updatedAt": "2020-09-28T17:46:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "cd85b5938e1e3ee17e325fa1c598565f400f1473",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "a0de89c8dc75ef8c51e2d0a0e8d2919c8f3fdb33",
      "closedAt": "2020-09-28T17:46:51Z",
      "mergedAt": "2020-09-28T17:46:51Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "3947f0563ce8db1f9a8bc8765989946ee52e3415"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NzU4ODMy",
          "commit": {
            "abbreviatedOid": "a0de89c"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-09-28T17:42:59Z",
          "updatedAt": "2020-09-28T17:42:59Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NzYxNjAy",
          "commit": {
            "abbreviatedOid": "a0de89c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-09-28T17:46:46Z",
          "updatedAt": "2020-09-28T17:46:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 156,
      "id": "MDExOlB1bGxSZXF1ZXN0NDk4MjM2OTI4",
      "title": "Clarify inputs for functions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/156",
      "state": "MERGED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-06T03:22:40Z",
      "updatedAt": "2020-10-08T15:43:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "3947f0563ce8db1f9a8bc8765989946ee52e3415",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "beefc37a0a70a94ca24b5391e4efb04aa8252ab0",
      "closedAt": "2020-10-08T15:43:56Z",
      "mergedAt": "2020-10-08T15:43:56Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "be81e97a16dac7fa0a6b93bda85e8c5d4a934740"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNjI1MjI1",
          "commit": {
            "abbreviatedOid": "d3de1c5"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-06T06:43:14Z",
          "updatedAt": "2020-10-06T06:47:13Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nFor base mode, servers don't need the public key `pkS` produced by KeyGen.\r\n```",
              "createdAt": "2020-10-06T06:43:14Z",
              "updatedAt": "2020-10-08T15:43:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0OTA1NzI0",
          "commit": {
            "abbreviatedOid": "dca4dd1"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-08T15:28:06Z",
          "updatedAt": "2020-10-08T15:28:06Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0OTE5NDMz",
          "commit": {
            "abbreviatedOid": "dca4dd1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM pending the suggestions!",
          "createdAt": "2020-10-08T15:42:29Z",
          "updatedAt": "2020-10-08T15:43:17Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nFor base mode, servers do not need the public key `pkS` produced by KeyGen.\r\n```",
              "createdAt": "2020-10-08T15:42:30Z",
              "updatedAt": "2020-10-08T15:43:48Z"
            },
            {
              "originalPosition": 73,
              "body": "```suggestion\r\nA ciphersuite (also referred as 'suite' in this document) for the protocol\r\n```",
              "createdAt": "2020-10-08T15:42:50Z",
              "updatedAt": "2020-10-08T15:43:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0OTIwNTY0",
          "commit": {
            "abbreviatedOid": "cc02f71"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-08T15:43:43Z",
          "updatedAt": "2020-10-08T15:43:43Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "```suggestion\r\nA ciphersuite (also referred to as 'suite' in this document) for the protocol\r\n```",
              "createdAt": "2020-10-08T15:43:43Z",
              "updatedAt": "2020-10-08T15:43:48Z"
            }
          ]
        }
      ]
    },
    {
      "number": 158,
      "id": "MDExOlB1bGxSZXF1ZXN0NTAxODU5Mjk0",
      "title": "Create new test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/158",
      "state": "MERGED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-12T22:43:27Z",
      "updatedAt": "2020-10-19T16:26:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "f4d1a6586609184e930ba35d698698c72a8062c4",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "54dd331ce9a3854c8c94ee4b19884e5491abb0c0",
      "closedAt": "2020-10-19T16:26:01Z",
      "mergedAt": "2020-10-19T16:26:01Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "37afd613897bfbd722ada6d126f0ea8bcf9da0d9"
      },
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "cc. @chris-wood and @armfazh . ",
          "createdAt": "2020-10-13T11:25:17Z",
          "updatedAt": "2020-10-13T11:25:17Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@armfazh @chris-wood please, take a look at this.",
          "createdAt": "2020-10-18T20:59:27Z",
          "updatedAt": "2020-10-18T20:59:27Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NjQxOTc3",
          "commit": {
            "abbreviatedOid": "c060030"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-10-15T18:08:18Z",
          "updatedAt": "2020-10-15T19:19:47Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": " SHA256 or SHA512 for the suite?",
              "createdAt": "2020-10-15T18:08:18Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 2,
              "body": "In the Table 2 of h2c, we only announce `P256_XMD:SHA-256_SSWU_RO_` for P-256. \r\nThis doesn't block us to define an analogous one using SHA512, but I think it's better to stick on the one that is recommended. \r\n\r\n@chris-wood  thoughts?",
              "createdAt": "2020-10-15T18:13:03Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 5,
              "body": "You must add the backslash to avoid the loss of underscores in the html converter.\r\n\r\n```suggestion\r\n    \"RFCXXXX-P256_XMD:SHA-512_SSWU_RO\\_\"\r\n```",
              "createdAt": "2020-10-15T18:21:07Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 58,
              "body": "Are we using HKDF for voprf? if not, the name of suites could be shortened. \r\n",
              "createdAt": "2020-10-15T18:24:32Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 240,
              "body": "Suite field is wrong for verifiable modes.\r\n```sh\r\n$ cat vectors/allVectors.json | jq '.[].\"suite\"'\r\n\"OPRF-P256-HKDF-SHA512-SSWU-RO\"\r\n\"OPRF-P384-HKDF-SHA512-SSWU-RO\"\r\n\"OPRF-P521-HKDF-SHA512-SSWU-RO\"\r\n\"OPRF-P256-HKDF-SHA512-SSWU-RO\"\r\n\"OPRF-P384-HKDF-SHA512-SSWU-RO\"\r\n\"OPRF-P521-HKDF-SHA512-SSWU-RO\"\r\n\r\n```",
              "createdAt": "2020-10-15T18:31:43Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 241,
              "body": "It's better a name without spaces on it. \r\n\r\n```suggestion\r\n    \"dst\": \"RFCXXXX-P256_XMD:SHA-512_SSWU_RO_\",\r\n```",
              "createdAt": "2020-10-15T18:32:28Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 8,
              "body": "@chris-wood @alxdavids \r\nDoes a single ciphersuite name is intended to support both modes? or do we need to specify identifiers for each mode?",
              "createdAt": "2020-10-15T18:58:36Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 59,
              "body": "Test vectors change between runs. It is expected that this script returns the same vectors everytime we run it.",
              "createdAt": "2020-10-15T19:19:21Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5OTI1MTA4",
          "commit": {
            "abbreviatedOid": "c060030"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-16T00:23:45Z",
          "updatedAt": "2020-10-16T00:23:45Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "Yeah.. it was like that since the beginning of the POC.. and I didn't know if that is what was wanted (as it was there). I can create a 'random scalar generation' function that always return the same valid scalar for creating same test vectors. \r\ncc. @chris-wood ",
              "createdAt": "2020-10-16T00:23:45Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5OTI2Njkw",
          "commit": {
            "abbreviatedOid": "c060030"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-16T00:24:51Z",
          "updatedAt": "2020-10-16T00:24:51Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "Interesting. Personally, I think it will be better if we use SHA-256, as the size is smaller. But maybe this was targeted for an specific security level that SHA512 gives. Let's discuss tomorrow.",
              "createdAt": "2020-10-16T00:24:51Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5OTMyNTIw",
          "commit": {
            "abbreviatedOid": "c060030"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-16T00:29:21Z",
          "updatedAt": "2020-10-16T00:29:22Z",
          "comments": [
            {
              "originalPosition": 240,
              "body": "Oh, yes. Names get repeated. I'll change.",
              "createdAt": "2020-10-16T00:29:22Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNDc0NDI0",
          "commit": {
            "abbreviatedOid": "c060030"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-16T13:33:23Z",
          "updatedAt": "2020-10-16T13:42:15Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "We should go with SHA256!",
              "createdAt": "2020-10-16T13:33:24Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 58,
              "body": "Yeah, good catch. We're not using HKDF anymore. ",
              "createdAt": "2020-10-16T13:41:21Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 59,
              "body": "We can make them deterministic, but let's do that in a separate change.",
              "createdAt": "2020-10-16T13:41:32Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 34,
              "body": "```suggestion\r\n        vector[\"dst\"] = client.suite.dst\r\n```",
              "createdAt": "2020-10-16T13:42:07Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNjk3MTQ4",
          "commit": {
            "abbreviatedOid": "c060030"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-16T18:08:51Z",
          "updatedAt": "2020-10-16T18:08:51Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Got it ;)",
              "createdAt": "2020-10-16T18:08:51Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMTczNTky",
          "commit": {
            "abbreviatedOid": "c060030"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-18T19:18:33Z",
          "updatedAt": "2020-10-18T19:18:33Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "Ok ;)",
              "createdAt": "2020-10-18T19:18:33Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMTczODQ2",
          "commit": {
            "abbreviatedOid": "c060030"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-18T19:21:43Z",
          "updatedAt": "2020-10-18T19:21:43Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "Changed ;)",
              "createdAt": "2020-10-18T19:21:43Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMTc0MDAy",
          "commit": {
            "abbreviatedOid": "c060030"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-18T19:23:43Z",
          "updatedAt": "2020-10-18T19:23:43Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "I'll do that in another PR.",
              "createdAt": "2020-10-18T19:23:43Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMjAwMjMz",
          "commit": {
            "abbreviatedOid": "a070f6a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-18T20:59:09Z",
          "updatedAt": "2020-10-18T20:59:10Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I'll open an issue for tracking this.",
              "createdAt": "2020-10-18T20:59:09Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNzkxMDAx",
          "commit": {
            "abbreviatedOid": "a070f6a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-10-19T13:58:30Z",
          "updatedAt": "2020-10-19T13:59:59Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Why are these separate? The only difference between VOPRF and OPRF the mode, right?",
              "createdAt": "2020-10-19T13:58:30Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 72,
              "body": "(I recommend deleting them)",
              "createdAt": "2020-10-19T13:58:50Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 22,
              "body": "Why is \"Point\" needed?",
              "createdAt": "2020-10-19T13:59:21Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 60,
              "body": "I'd revert this change. ",
              "createdAt": "2020-10-19T13:59:54Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExODkxMzY3",
          "commit": {
            "abbreviatedOid": "a070f6a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-19T15:31:16Z",
          "updatedAt": "2020-10-19T15:31:17Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "OK. ",
              "createdAt": "2020-10-19T15:31:17Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExODkzMTc3",
          "commit": {
            "abbreviatedOid": "a070f6a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-19T15:33:03Z",
          "updatedAt": "2020-10-19T15:33:04Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Yes.. it was manly to address a comment by @armfazh that the names of the ciphersuites do not reflect the mode, as, in the past, it was only: `OPRF-P256-SHA256-SSWU-RO`. I'll delete them.",
              "createdAt": "2020-10-19T15:33:03Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExODk0MTA1",
          "commit": {
            "abbreviatedOid": "a070f6a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-19T15:33:59Z",
          "updatedAt": "2020-10-19T15:33:59Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Not really needed. It was for debugging.",
              "createdAt": "2020-10-19T15:33:59Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTQzMTE2",
          "commit": {
            "abbreviatedOid": "54dd331"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-19T16:25:56Z",
          "updatedAt": "2020-10-19T16:25:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 160,
      "id": "MDExOlB1bGxSZXF1ZXN0NTA0ODU5NjI1",
      "title": "Remove note about big endian storage.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/160",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #148.",
      "createdAt": "2020-10-16T13:41:05Z",
      "updatedAt": "2020-10-17T16:05:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "be81e97a16dac7fa0a6b93bda85e8c5d4a934740",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/remove-endian-note",
      "headRefOid": "e4c47a0548803a3288629565ed465df72007e758",
      "closedAt": "2020-10-17T16:05:56Z",
      "mergedAt": "2020-10-17T16:05:56Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "6557b831a3f9f6fd745daea7bc31cd9551c3def3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTU5ODk3",
          "commit": {
            "abbreviatedOid": "e4c47a0"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-17T07:53:42Z",
          "updatedAt": "2020-10-17T07:53:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 161,
      "id": "MDExOlB1bGxSZXF1ZXN0NTA0ODY3NzEy",
      "title": "Change placeholder DST.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/161",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #143.\r\n\r\ncc @davidben",
      "createdAt": "2020-10-16T13:51:42Z",
      "updatedAt": "2020-10-17T16:09:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "4cb07ebc3c98bf1324a7dda0e2ec224a4327ee13",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/change-dst",
      "headRefOid": "638df93e14794724400988b38caee5155ec35b88",
      "closedAt": "2020-10-17T16:09:50Z",
      "mergedAt": "2020-10-17T16:09:50Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "4338efd66ce5f513e4acefaaa48d470c22f16dfa"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "That's already in the change:\r\n\r\n```\r\n[[RFC editor: please change \"VOPRF05\" to \"RFCXXXX\", where XXXX is the final number, here and elsewhere before publication.]]\r\n```",
          "createdAt": "2020-10-17T16:07:20Z",
          "updatedAt": "2020-10-17T16:07:20Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTU5ODQw",
          "commit": {
            "abbreviatedOid": "02e2835"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good! Do we need something like this somewhere:\r\n\r\n> \r\n\r\n    [[RFC editor: please change \"HPKE-05\" to \"RFCXXXX\", where XXXX is the final number, before publication.]]\r\n\r\nas mentioned in #143?",
          "createdAt": "2020-10-17T07:52:31Z",
          "updatedAt": "2020-10-17T07:52:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 162,
      "id": "MDExOlB1bGxSZXF1ZXN0NTA0ODcxMzAy",
      "title": "Remove serialized generator from the context string.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/162",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The suite ID covers this value, so it's not necessary to include in the hash input.\r\n\r\nCloses #147.\r\n\r\nThanks, @davidben!",
      "createdAt": "2020-10-16T13:57:12Z",
      "updatedAt": "2020-10-17T16:06:52Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "6557b831a3f9f6fd745daea7bc31cd9551c3def3",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/remove-serialized-gen",
      "headRefOid": "e067eca1103880a399b8607efa0883438da7c259",
      "closedAt": "2020-10-17T16:06:52Z",
      "mergedAt": "2020-10-17T16:06:52Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "4cb07ebc3c98bf1324a7dda0e2ec224a4327ee13"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTU5ODg1",
          "commit": {
            "abbreviatedOid": "8744204"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-17T07:53:19Z",
          "updatedAt": "2020-10-17T07:53:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 166,
      "id": "MDExOlB1bGxSZXF1ZXN0NTA2MDQwMzE3",
      "title": "Fix a seed used to derive all test vectors.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/166",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @claucece ",
      "createdAt": "2020-10-19T14:41:42Z",
      "updatedAt": "2020-10-19T16:22:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "f4d1a6586609184e930ba35d698698c72a8062c4",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/deterministic-seeds",
      "headRefOid": "89533bc9afc896c4a49210c35ea8ae930acf6bda",
      "closedAt": "2020-10-19T16:22:50Z",
      "mergedAt": "2020-10-19T16:22:50Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ed52d45b15f428dfba77b4b71c7828106f06ea27"
      },
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thank you! Looks great.",
          "createdAt": "2020-10-19T15:44:25Z",
          "updatedAt": "2020-10-19T15:44:25Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 167,
      "id": "MDExOlB1bGxSZXF1ZXN0NTA2MzA5NTE5",
      "title": "Make vectors deterministic",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/167",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This fixes the deterministic seed, as apparently it has to be used immediately before calling any other random module function: https://pynative.com/python-random-seed/ \r\n\r\ncc./ @chris-wood ",
      "createdAt": "2020-10-19T22:11:09Z",
      "updatedAt": "2020-10-19T22:33:43Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "37afd613897bfbd722ada6d126f0ea8bcf9da0d9",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "7643dec44db39f8f5d0825fd855666832a5f5f26",
      "closedAt": "2020-10-19T22:33:43Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 169,
      "id": "MDExOlB1bGxSZXF1ZXN0NTA2ODUzMDgw",
      "title": "Address issues in the draft",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/169",
      "state": "MERGED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-20T14:30:33Z",
      "updatedAt": "2020-10-26T19:03:09Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "37afd613897bfbd722ada6d126f0ea8bcf9da0d9",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "c2ea70fb8b5c70aaee18cba68c510de75f0de706",
      "closedAt": "2020-10-26T19:03:09Z",
      "mergedAt": "2020-10-26T19:03:09Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "0b677c52483da13a1eb72ee62455e4206d74e939"
      },
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@armfazh @chris-wood please, review until here prior to me changing the poc vectors.",
          "createdAt": "2020-10-23T18:53:24Z",
          "updatedAt": "2020-10-23T18:53:24Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@claucece is this now ready for a full review, or is it still WIP?",
          "createdAt": "2020-10-23T19:23:39Z",
          "updatedAt": "2020-10-23T19:23:39Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood this should close: #168 #163 #155 #154 #152 #151 #142.. I'm still missing to solve #165.. can you maybe take a look at the issue?",
          "createdAt": "2020-10-26T10:55:37Z",
          "updatedAt": "2020-10-26T10:55:37Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood @armfazh it is ready now.",
          "createdAt": "2020-10-26T15:44:47Z",
          "updatedAt": "2020-10-26T15:44:47Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTI4NDU3",
          "commit": {
            "abbreviatedOid": "dae1265"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-10-22T21:21:11Z",
          "updatedAt": "2020-10-22T21:26:44Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\n  - Name: ristretto255 {{RISTRETTO}}\r\n```",
              "createdAt": "2020-10-22T21:21:11Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 26,
              "body": "Can we reference the relevant hash-to-curve section in the document?",
              "createdAt": "2020-10-22T21:21:39Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 41,
              "body": "Can we simply reference the [`Encode`](https://tools.ietf.org/html/draft-irtf-cfrg-ristretto255-decaf448-00#section-4.3.2) and `Decode` APIs? We shouldn't specify anything else, I think. ",
              "createdAt": "2020-10-22T21:23:25Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n```",
              "createdAt": "2020-10-22T21:24:22Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 60,
              "body": "```suggestion\r\n```",
              "createdAt": "2020-10-22T21:24:31Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 41,
              "body": "(DItto for decaf448)",
              "createdAt": "2020-10-22T21:24:46Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 26,
              "body": "Those sections are [here for ristretto255](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-10#appendix-B) and [here for decaf448](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-10#appendix-C)",
              "createdAt": "2020-10-22T21:25:52Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTYzMjgw",
          "commit": {
            "abbreviatedOid": "dae1265"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-22T22:27:19Z",
          "updatedAt": "2020-10-22T22:27:19Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "ok ;)",
              "createdAt": "2020-10-22T22:27:19Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTY0NTk4",
          "commit": {
            "abbreviatedOid": "dae1265"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-22T22:30:19Z",
          "updatedAt": "2020-10-22T22:30:20Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "For elements (or points), yes, there is no need of anything but the encode and decode. But for scalars, these are not the functions specified for them. That is why I added a serialization of them in accordance with the Ristretto draft.",
              "createdAt": "2020-10-22T22:30:20Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTY0NzU4",
          "commit": {
            "abbreviatedOid": "dae1265"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-22T22:30:44Z",
          "updatedAt": "2020-10-22T22:30:44Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Ok.",
              "createdAt": "2020-10-22T22:30:44Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTY0ODI1",
          "commit": {
            "abbreviatedOid": "dae1265"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-22T22:30:53Z",
          "updatedAt": "2020-10-22T22:30:54Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "Ok.",
              "createdAt": "2020-10-22T22:30:53Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MjIyMzIx",
          "commit": {
            "abbreviatedOid": "7c7e506"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T01:32:41Z",
          "updatedAt": "2020-10-23T01:32:42Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Serialization of scalars is mostly universal, since they are positive numbers less than group order. Then implementor can just call I2OSP \r\n\r\n",
              "createdAt": "2020-10-23T01:32:42Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1ODU1ODc1",
          "commit": {
            "abbreviatedOid": "3a82a9d"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T17:10:50Z",
          "updatedAt": "2020-10-23T17:10:50Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Removed now. ",
              "createdAt": "2020-10-23T17:10:50Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTI3ODMx",
          "commit": {
            "abbreviatedOid": "c4ccb5a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T18:53:01Z",
          "updatedAt": "2020-10-23T18:53:01Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Done :)",
              "createdAt": "2020-10-23T18:53:01Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1ODg2ODEx",
          "commit": {
            "abbreviatedOid": "e0b3d26"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Some comments",
          "createdAt": "2020-10-23T17:56:51Z",
          "updatedAt": "2020-10-23T18:53:47Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "display all numbers in hex na dprefix them with 0x,\r\nso people don't confuse numbers with bytes.",
              "createdAt": "2020-10-23T17:56:51Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 87,
              "body": "```suggestion\r\n    The byte encoding of the generator is:\r\n```",
              "createdAt": "2020-10-23T17:59:25Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n- Order(): Outputs the order of GG (i.e. `p`).\r\n```",
              "createdAt": "2020-10-23T18:06:02Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 16,
              "body": "```suggestion\r\n  defined in {{I-D.irtf-cfrg-hash-to-curve}} setting the target field to GF(p).\r\n```",
              "createdAt": "2020-10-23T18:09:10Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 26,
              "body": "In the spec, the Setup functions are called once, so they are in charge to generate keys. \r\nOtherwise, you also need to specify how those keys were generated.\r\n",
              "createdAt": "2020-10-23T18:11:35Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 36,
              "body": "revert this",
              "createdAt": "2020-10-23T18:11:57Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 130,
              "body": "```suggestion\r\n  - Deserialization: Converts a valid 32-byte string to \r\n    a group element by using the 'Decode' function from {{!RISTRETTO}}.\r\n```",
              "createdAt": "2020-10-23T18:15:18Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 128,
              "body": "```suggestion\r\n  - Serialization: Converts a group element to a 32-byte string \r\n    using the 'Encode' function from {{!RISTRETTO}}.\r\n```",
              "createdAt": "2020-10-23T18:16:15Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 115,
              "body": "Following Appendix B of hash to curve draft.\r\nit might be:  VOPRF05-ristretto25519\\_XMD:SHA-256\\_RS255MAP\\_RO\\_",
              "createdAt": "2020-10-23T18:51:46Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 204,
              "body": "likewise `VOPRF05-decaf448_XMD:SHA-512_D448MAP_RO_`",
              "createdAt": "2020-10-23T18:53:21Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTMyMTMy",
          "commit": {
            "abbreviatedOid": "4b7692a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T18:59:55Z",
          "updatedAt": "2020-10-23T18:59:55Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "Ok.",
              "createdAt": "2020-10-23T18:59:55Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTMyNTAx",
          "commit": {
            "abbreviatedOid": "4b7692a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:00:30Z",
          "updatedAt": "2020-10-23T19:00:30Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Ok.",
              "createdAt": "2020-10-23T19:00:30Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTMyNzk4",
          "commit": {
            "abbreviatedOid": "4b7692a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:01:00Z",
          "updatedAt": "2020-10-23T19:01:00Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Ok.",
              "createdAt": "2020-10-23T19:01:00Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTMzNTE3",
          "commit": {
            "abbreviatedOid": "4b7692a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:02:12Z",
          "updatedAt": "2020-10-23T19:02:12Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Mmm.. this was trying to solve: https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/168.. what do you suggest instead?",
              "createdAt": "2020-10-23T19:02:12Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTM0MzE0",
          "commit": {
            "abbreviatedOid": "4b7692a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:03:34Z",
          "updatedAt": "2020-10-23T19:03:35Z",
          "comments": [
            {
              "originalPosition": 130,
              "body": "Ok.",
              "createdAt": "2020-10-23T19:03:34Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTM0ODQ3",
          "commit": {
            "abbreviatedOid": "4b7692a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:04:26Z",
          "updatedAt": "2020-10-23T19:04:26Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "Ok.",
              "createdAt": "2020-10-23T19:04:26Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTM0OTQ1",
          "commit": {
            "abbreviatedOid": "4b7692a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:04:35Z",
          "updatedAt": "2020-10-23T19:04:36Z",
          "comments": [
            {
              "originalPosition": 115,
              "body": "Solved.",
              "createdAt": "2020-10-23T19:04:36Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTM0OTky",
          "commit": {
            "abbreviatedOid": "4b7692a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:04:40Z",
          "updatedAt": "2020-10-23T19:04:41Z",
          "comments": [
            {
              "originalPosition": 204,
              "body": "Solved.",
              "createdAt": "2020-10-23T19:04:41Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTM3NTk5",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:09:13Z",
          "updatedAt": "2020-10-23T19:09:13Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "Solved. ",
              "createdAt": "2020-10-23T19:09:13Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTQ0Mzg3",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:21:02Z",
          "updatedAt": "2020-10-23T19:21:03Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "No, please don't revert this. We need to allow context setup using external keys. This is needed for OPAQUE.",
              "createdAt": "2020-10-23T19:21:02Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTQ0NDg5",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:21:12Z",
          "updatedAt": "2020-10-23T19:21:13Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "This is fine as-is. Please keep it.",
              "createdAt": "2020-10-23T19:21:12Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTQ0OTMx",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-23T19:22:03Z",
          "updatedAt": "2020-10-23T19:22:03Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTUwMTUz",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:31:06Z",
          "updatedAt": "2020-10-23T19:31:06Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Let's remove this line, and assert that `skS` is valid in the text. We can then say that `KeyGen` is used to generate `skS` (and `pkS` for the verifiable mode) and passed to `SetupBaseServer` when needed.",
              "createdAt": "2020-10-23T19:31:06Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDM3NDQw",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T22:11:33Z",
          "updatedAt": "2020-10-23T22:11:33Z",
          "comments": [
            {
              "originalPosition": 218,
              "body": "```suggestion\r\n    directly corresponds with scalar multiplication in the Edwards curve.\r\n```",
              "createdAt": "2020-10-23T22:11:33Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDM3NjI2",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T22:12:07Z",
          "updatedAt": "2020-10-23T22:12:08Z",
          "comments": [
            {
              "originalPosition": 178,
              "body": "```suggestion\r\n    directly corresponds with scalar multiplication in the Edwards curve.\r\n```",
              "createdAt": "2020-10-23T22:12:07Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDM3ODY4",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-23T22:12:53Z",
          "updatedAt": "2020-10-23T22:12:53Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NjYwOTI4",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T10:53:39Z",
          "updatedAt": "2020-10-26T10:53:39Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Ok ;)",
              "createdAt": "2020-10-26T10:53:39Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NjY1NzI4",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T11:00:07Z",
          "updatedAt": "2020-10-26T11:00:08Z",
          "comments": [
            {
              "originalPosition": 178,
              "body": "Done",
              "createdAt": "2020-10-26T11:00:07Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NjY1ODE5",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T11:00:14Z",
          "updatedAt": "2020-10-26T11:00:14Z",
          "comments": [
            {
              "originalPosition": 218,
              "body": "Done.",
              "createdAt": "2020-10-26T11:00:14Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2Njc1NjE4",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T11:14:14Z",
          "updatedAt": "2020-10-26T11:14:14Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "I think is solved now ;)",
              "createdAt": "2020-10-26T11:14:14Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2Njc2MjE4",
          "commit": {
            "abbreviatedOid": "39c651c"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T11:15:09Z",
          "updatedAt": "2020-10-26T11:15:09Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Ok ;)",
              "createdAt": "2020-10-26T11:15:09Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDE1Njcx",
          "commit": {
            "abbreviatedOid": "7937500"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-26T17:29:21Z",
          "updatedAt": "2020-10-26T17:29:21Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDI0MDI5",
          "commit": {
            "abbreviatedOid": "7937500"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Nearly there! ",
          "createdAt": "2020-10-26T17:39:05Z",
          "updatedAt": "2020-10-26T17:44:04Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "This is redundant with the sentence above, I think. \r\n\r\n```suggestion\r\n```",
              "createdAt": "2020-10-26T17:39:05Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 50,
              "body": "```suggestion\r\n```",
              "createdAt": "2020-10-26T17:39:41Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 114,
              "body": "Isn't it also true that `FullEvaluate` is not used in the main OPRF protocol? If so, can we note that?",
              "createdAt": "2020-10-26T17:40:29Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 115,
              "body": "```suggestion\r\n`FullEvaluate` and takes ClientInput values, and it is useful for applications\r\nthat need to compute the whole OPRF protocol on the server side only.\r\n```",
              "createdAt": "2020-10-26T17:40:55Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 121,
              "body": "```suggestion\r\nexposed as an API for building higher-level protocols.\r\n\r\nNote that `FullEvaluate` and `VerifyFinalize` are not used in \r\nthe main OPRF protocol.\r\n```",
              "createdAt": "2020-10-26T17:41:29Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 162,
              "body": "```suggestion\r\noutput. This functionality lets applications batch inputs together to\r\n```",
              "createdAt": "2020-10-26T17:41:52Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 193,
              "body": "Is the generator useful information for ristretto255? (I don't think users need it to implement the OPRF, right?)",
              "createdAt": "2020-10-26T17:42:20Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 219,
              "body": "```suggestion\r\n  - Scalar multiplication: Scalar multiplication according to {{!RISTRETTO}}.\r\n```",
              "createdAt": "2020-10-26T17:43:26Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 233,
              "body": "Ditto here for the decaf448 generator.",
              "createdAt": "2020-10-26T17:43:33Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 259,
              "body": "```suggestion\r\n  - Scalar multiplication: Scalar multiplication according to {{!RISTRETTO}}.\r\n```",
              "createdAt": "2020-10-26T17:43:55Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDMxMzU5",
          "commit": {
            "abbreviatedOid": "7937500"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T17:47:49Z",
          "updatedAt": "2020-10-26T17:47:50Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Ok. ",
              "createdAt": "2020-10-26T17:47:49Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDMyNzE4",
          "commit": {
            "abbreviatedOid": "7937500"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T17:49:26Z",
          "updatedAt": "2020-10-26T17:49:26Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "Yes!",
              "createdAt": "2020-10-26T17:49:26Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDM3OTkz",
          "commit": {
            "abbreviatedOid": "7937500"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T17:55:40Z",
          "updatedAt": "2020-10-26T17:55:40Z",
          "comments": [
            {
              "originalPosition": 193,
              "body": "They do. You do:\r\n\r\n```\r\n  G = GG.Generator()\r\n```\r\n\r\nfor `GenerateProof()`.",
              "createdAt": "2020-10-26T17:55:40Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDM4OTk0",
          "commit": {
            "abbreviatedOid": "7937500"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T17:56:53Z",
          "updatedAt": "2020-10-26T17:56:53Z",
          "comments": [
            {
              "originalPosition": 219,
              "body": "Done.",
              "createdAt": "2020-10-26T17:56:53Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDM5Nzc3",
          "commit": {
            "abbreviatedOid": "7937500"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T17:57:48Z",
          "updatedAt": "2020-10-26T17:57:48Z",
          "comments": [
            {
              "originalPosition": 259,
              "body": "Done.",
              "createdAt": "2020-10-26T17:57:48Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDQwMTQx",
          "commit": {
            "abbreviatedOid": "7937500"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T17:58:14Z",
          "updatedAt": "2020-10-26T17:58:14Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Ok.",
              "createdAt": "2020-10-26T17:58:14Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDgxNzE0",
          "commit": {
            "abbreviatedOid": "37e4a31"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-26T18:52:10Z",
          "updatedAt": "2020-10-26T18:52:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 170,
      "id": "MDExOlB1bGxSZXF1ZXN0NTEwODA4ODM1",
      "title": "Change dst of hashToGroup #165",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/170",
      "state": "MERGED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-27T14:44:35Z",
      "updatedAt": "2020-10-28T12:33:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "0b677c52483da13a1eb72ee62455e4206d74e939",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "b9b88a0c5e997dcfba1fe16907d27f7f374433b2",
      "closedAt": "2020-10-28T12:33:36Z",
      "mergedAt": "2020-10-28T12:33:36Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b983cd46b09812e15a591a3ca67670fa561391c7"
      },
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "cc. @chris-wood @armfazh ",
          "createdAt": "2020-10-27T14:45:06Z",
          "updatedAt": "2020-10-27T14:45:06Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjYwMTgy",
          "commit": {
            "abbreviatedOid": "59bc330"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-10-28T01:20:32Z",
          "updatedAt": "2020-10-28T01:20:37Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "`self.contextString` is a little hard to parse here (out of context), so how about:\r\n\r\n```suggestion\r\n    \"VOPRF05\" || contextString, where `contextString` is that which is computed in the Setup functions.\r\n```\r\n\r\n(or something like that)\r\n",
              "createdAt": "2020-10-28T01:20:32Z",
              "updatedAt": "2020-10-28T12:32:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NTU5MTA0",
          "commit": {
            "abbreviatedOid": "59bc330"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-28T11:23:13Z",
          "updatedAt": "2020-10-28T11:23:13Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Changed.",
              "createdAt": "2020-10-28T11:23:13Z",
              "updatedAt": "2020-10-28T12:32:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjA4ODAw",
          "commit": {
            "abbreviatedOid": "bffc55d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-28T12:31:29Z",
          "updatedAt": "2020-10-28T12:32:20Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n    \"VOPRF05\" || contextString, where `contextString` is that which is\r\n```",
              "createdAt": "2020-10-28T12:31:29Z",
              "updatedAt": "2020-10-28T12:32:51Z"
            },
            {
              "originalPosition": 19,
              "body": "```suggestion\r\n    \"VOPRF05\" || contextString, where `contextString` is that which is\r\n```",
              "createdAt": "2020-10-28T12:31:54Z",
              "updatedAt": "2020-10-28T12:32:51Z"
            },
            {
              "originalPosition": 31,
              "body": "```suggestion\r\n    \"VOPRF05\" || contextString, where `contextString` is that which is\r\n```",
              "createdAt": "2020-10-28T12:32:00Z",
              "updatedAt": "2020-10-28T12:32:51Z"
            },
            {
              "originalPosition": 43,
              "body": "```suggestion\r\n    \"VOPRF05\" || contextString, where `contextString` is that which is\r\n```",
              "createdAt": "2020-10-28T12:32:06Z",
              "updatedAt": "2020-10-28T12:32:51Z"
            },
            {
              "originalPosition": 55,
              "body": "```suggestion\r\n    \"VOPRF05\" || contextString, where `contextString` is that which is\r\n```",
              "createdAt": "2020-10-28T12:32:13Z",
              "updatedAt": "2020-10-28T12:32:51Z"
            }
          ]
        }
      ]
    },
    {
      "number": 172,
      "id": "MDExOlB1bGxSZXF1ZXN0NTExNTIxNzc1",
      "title": "Clean up ciphersuite section. Fix some references too.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/172",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This does a couple things:\r\n\r\n- Removes `Order()` -- it was never used.\r\n- Unifies Serialization content. \r\n- Removes scalar multiplication instructions, as I think these are unnecessary.\r\n\r\nIt also fixes some references (uses updated versions and removes unused references).\r\n\r\ncc @claucece ",
      "createdAt": "2020-10-28T12:49:32Z",
      "updatedAt": "2020-10-28T16:27:46Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b983cd46b09812e15a591a3ca67670fa561391c7",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/cleanup-suites-and-refs",
      "headRefOid": "6c50301ab7d12eea9f90a5fd993521dff8f5cfd2",
      "closedAt": "2020-10-28T16:27:46Z",
      "mergedAt": "2020-10-28T16:27:45Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e41082d92c95c5e098872cc15afcbdd03cfec109"
      },
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM. Thanks!",
          "createdAt": "2020-10-28T13:25:57Z",
          "updatedAt": "2020-10-28T13:25:57Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 173,
      "id": "MDExOlB1bGxSZXF1ZXN0NTExNzE2Nzcx",
      "title": "replaces client by self in contextString",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/173",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-28T17:26:41Z",
      "updatedAt": "2020-10-29T00:20:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "e41082d92c95c5e098872cc15afcbdd03cfec109",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "patch-1",
      "headRefOid": "2b2a288cc928a87e668e386874ba96406f7bc868",
      "closedAt": "2020-10-29T00:20:00Z",
      "mergedAt": "2020-10-29T00:20:00Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b85b915c5ece2fe99cd39afc15107c1f16db3b35"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MjAxOTAx",
          "commit": {
            "abbreviatedOid": "2b2a288"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Good catch -- I didn't notice this.",
          "createdAt": "2020-10-29T00:19:55Z",
          "updatedAt": "2020-10-29T00:19:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 175,
      "id": "MDExOlB1bGxSZXF1ZXN0NTEyMzI5MTI2",
      "title": "Update POC",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/175",
      "state": "MERGED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-29T14:45:59Z",
      "updatedAt": "2020-10-30T18:04:54Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b85b915c5ece2fe99cd39afc15107c1f16db3b35",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "c869e617d9590da4582637752c9a9e26e0f1b42d",
      "closedAt": "2020-10-30T18:04:54Z",
      "mergedAt": "2020-10-30T18:04:53Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e9ab7975c888d574b6b723b4ae8a003ab6a93055"
      },
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood all methods implemented now. There are some todos, I'll solve tomorrow. There is a really weird python error with `expand_message_xof`, which idk why is occurring. If you can, please, check it.",
          "createdAt": "2020-10-30T00:20:50Z",
          "updatedAt": "2020-10-30T00:20:50Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood solved the bug now. Except for a check I want to do tomorrow and some recfator, this is now done.",
          "createdAt": "2020-10-30T01:36:13Z",
          "updatedAt": "2020-10-30T01:36:13Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMDc0MDUz",
          "commit": {
            "abbreviatedOid": "65c6b4d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-29T20:54:41Z",
          "updatedAt": "2020-10-29T20:54:42Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Why did we remove these? Aren't they needed?",
              "createdAt": "2020-10-29T20:54:42Z",
              "updatedAt": "2020-10-30T12:12:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMDkzMjc3",
          "commit": {
            "abbreviatedOid": "dcad238"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-29T21:15:25Z",
          "updatedAt": "2020-10-29T21:15:25Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "They were not used anywhere, not sure why they were there..",
              "createdAt": "2020-10-29T21:15:25Z",
              "updatedAt": "2020-10-30T12:12:35Z"
            }
          ]
        }
      ]
    },
    {
      "number": 176,
      "id": "MDExOlB1bGxSZXF1ZXN0NTEzMjE5ODUw",
      "title": "Refactor to remove special-case ristretto255/decaf448 paths.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/176",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @claucece, @armfazh ",
      "createdAt": "2020-10-30T18:57:09Z",
      "updatedAt": "2020-10-30T23:20:17Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "ef887bf21534054a16230309d01d94a0bd6403cd",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/refactor-ristretto",
      "headRefOid": "7c2f5ba57ea2b88758a10c1d7a839ed3c57184eb",
      "closedAt": "2020-10-30T23:20:17Z",
      "mergedAt": "2020-10-30T23:20:17Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "59739a24e25337bd3c190e41f2959bf13c5c0fd6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwOTY2NTk1",
          "commit": {
            "abbreviatedOid": "629d78a"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-30T19:21:32Z",
          "updatedAt": "2020-10-30T19:21:32Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDcwMDMz",
          "commit": {
            "abbreviatedOid": "629d78a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-30T22:31:49Z",
          "updatedAt": "2020-10-30T22:36:39Z",
          "comments": [
            {
              "originalPosition": 132,
              "body": "Per ristretto et al draft, it should be:\r\n\r\n```\r\n        u = expand_message_xof(msg, dst, int(112), hashlib.shake_256, 224)\r\n        P1 = self.map(u[0:32])\r\n        P2 = self.map(u[32:64])\r\n        P = P1 + P2\r\n```",
              "createdAt": "2020-10-30T22:31:49Z",
              "updatedAt": "2020-10-30T23:20:02Z"
            },
            {
              "originalPosition": 133,
              "body": "I'm not sure the internals of this.. but it need to be expanded to a 112 array, which will no be given with sha512. That is why it was using shake256. ",
              "createdAt": "2020-10-30T22:32:42Z",
              "updatedAt": "2020-10-30T23:20:02Z"
            },
            {
              "originalPosition": 104,
              "body": "Per ristretto et al draft, it should be:\r\n\r\n```\r\n        u = expand_message_xmd(msg, dst, int(64), hashlib.sha512, 128)\r\n        P1 = self.map(u[0:32])\r\n        P2 = self.map(u[32:64])\r\n        P = P1 + P2\r\n        return P\r\n```",
              "createdAt": "2020-10-30T22:33:16Z",
              "updatedAt": "2020-10-30T23:20:02Z"
            },
            {
              "originalPosition": 105,
              "body": "Here we need to expand it to 64, which I'm not sure the sha256 will give.",
              "createdAt": "2020-10-30T22:33:49Z",
              "updatedAt": "2020-10-30T23:20:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDcxNzIz",
          "commit": {
            "abbreviatedOid": "629d78a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-30T22:38:02Z",
          "updatedAt": "2020-10-30T22:38:03Z",
          "comments": [
            {
              "originalPosition": 132,
              "body": "No, see: https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-10#appendix-B",
              "createdAt": "2020-10-30T22:38:02Z",
              "updatedAt": "2020-10-30T23:20:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDcxNzY1",
          "commit": {
            "abbreviatedOid": "629d78a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-30T22:38:10Z",
          "updatedAt": "2020-10-30T22:38:10Z",
          "comments": [
            {
              "originalPosition": 104,
              "body": "See above!",
              "createdAt": "2020-10-30T22:38:10Z",
              "updatedAt": "2020-10-30T23:20:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDcxODkz",
          "commit": {
            "abbreviatedOid": "629d78a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-30T22:38:40Z",
          "updatedAt": "2020-10-30T22:38:40Z",
          "comments": [
            {
              "originalPosition": 105,
              "body": "See above!",
              "createdAt": "2020-10-30T22:38:40Z",
              "updatedAt": "2020-10-30T23:20:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDczNjgw",
          "commit": {
            "abbreviatedOid": "629d78a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-30T22:45:08Z",
          "updatedAt": "2020-10-30T22:45:09Z",
          "comments": [
            {
              "originalPosition": 132,
              "body": "I'm not sure about that. See the comment for the `MAP` function in ristretto et al draft:\r\n\r\n```\r\nThe MAP function is defined on a 32-bytes string as:\r\n```\r\n\r\nThe string here is 64. \r\n\r\nWhich means that it should use the one-way-map function of the ristretto et al draft, which is:\r\n\r\n```\r\n1. Compute P1 as \"MAP(b[0:32])\".\r\n2. Compute P2 as \"MAP(b[32:64])\".\r\n3. Return P1 + P2.\r\n```\r\n\r\nMeaning that:\r\n\r\n```\r\n   1. uniform_bytes = expand_message(msg, DST, 64)\r\n   2. P = ristretto255_map(uniform_bytes)\r\n   3. return P\r\n```\r\n\r\n`istretto255_map(uniform_bytes)` refers to the one-way-map. Otherwise, the map will only handle the first 32 bytes.",
              "createdAt": "2020-10-30T22:45:09Z",
              "updatedAt": "2020-10-30T23:20:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDc3MDYy",
          "commit": {
            "abbreviatedOid": "629d78a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-30T22:57:42Z",
          "updatedAt": "2020-10-30T22:57:42Z",
          "comments": [
            {
              "originalPosition": 132,
              "body": "`ristretto255_map` indeed refers to the one-way map, and not the internal `MAP` function. :) ",
              "createdAt": "2020-10-30T22:57:42Z",
              "updatedAt": "2020-10-30T23:20:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 177,
      "id": "MDExOlB1bGxSZXF1ZXN0NTEzMzI3Mzkz",
      "title": "Use hash_to_group",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/177",
      "state": "MERGED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@chris-wood ",
      "createdAt": "2020-10-30T23:19:04Z",
      "updatedAt": "2020-10-30T23:20:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "caw/refactor-ristretto",
      "baseRefOid": "629d78a84d627f6958bf488ff76b2fe7b08e3edc",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "caw/refactor-ristretto",
      "headRefOid": "4da74311296f378f2f14caa01ccabcc98736f757",
      "closedAt": "2020-10-30T23:20:01Z",
      "mergedAt": "2020-10-30T23:20:01Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "7c2f5ba57ea2b88758a10c1d7a839ed3c57184eb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDgyNTc3",
          "commit": {
            "abbreviatedOid": "4da7431"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-30T23:19:55Z",
          "updatedAt": "2020-10-30T23:19:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 178,
      "id": "MDExOlB1bGxSZXF1ZXN0NTEzOTY3NzI5",
      "title": "Fix predictable randomness",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/178",
      "state": "MERGED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "For decaf and ristretto.",
      "createdAt": "2020-11-02T10:44:43Z",
      "updatedAt": "2020-11-02T15:02:45Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "59739a24e25337bd3c190e41f2959bf13c5c0fd6",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "acff89e923c417cfdd34c95c5f086d4eca605ee3",
      "closedAt": "2020-11-02T15:02:45Z",
      "mergedAt": "2020-11-02T15:02:45Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "3148ab6419838f838ea02246a6c8f1269beaab7c"
      },
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "cc./ @chris-wood ",
          "createdAt": "2020-11-02T10:44:52Z",
          "updatedAt": "2020-11-02T10:44:52Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNzA5MjI3",
          "commit": {
            "abbreviatedOid": "acff89e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-02T15:02:39Z",
          "updatedAt": "2020-11-02T15:02:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 179,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE0MjE5Nzk2",
      "title": "Note base point (generator).",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/179",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @claucece, @armfazh ",
      "createdAt": "2020-11-02T17:43:30Z",
      "updatedAt": "2020-11-02T17:46:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "3148ab6419838f838ea02246a6c8f1269beaab7c",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/nit",
      "headRefOid": "36a7f5fa49739dae1a6acf835903362f28baac2a",
      "closedAt": "2020-11-02T17:46:49Z",
      "mergedAt": "2020-11-02T17:46:49Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d918062798adc4be69d424f272e42700bf920487"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxODYxNzM1",
          "commit": {
            "abbreviatedOid": "36a7f5f"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-02T17:46:39Z",
          "updatedAt": "2020-11-02T17:46:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 180,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE0MjI5MTQ3",
      "title": "Change expand func",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/180",
      "state": "MERGED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-11-02T18:02:00Z",
      "updatedAt": "2020-11-02T18:26:58Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "222feacd94adc39ea4525cc43398e68742fc781c",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "42f87bb20b907418dcdc13f879127054dcc375ba",
      "closedAt": "2020-11-02T18:26:58Z",
      "mergedAt": "2020-11-02T18:26:58Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e09a990450eae5dd28c04e5ddb8ee7fecfad2c61"
      },
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "cc./ @chris-wood ",
          "createdAt": "2020-11-02T18:05:17Z",
          "updatedAt": "2020-11-02T18:05:17Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxODkwNDg2",
          "commit": {
            "abbreviatedOid": "42f87bb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-02T18:26:54Z",
          "updatedAt": "2020-11-02T18:26:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 181,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE0MjQzMzY5",
      "title": "Clarify the expand_message implementation for ristretto255 and decaf448.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/181",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This clarifies the change in #180.\r\n\r\ncc @armfazh, @claucece ",
      "createdAt": "2020-11-02T18:30:01Z",
      "updatedAt": "2020-11-02T22:10:44Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "e09a990450eae5dd28c04e5ddb8ee7fecfad2c61",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/clarify-expand-msg",
      "headRefOid": "8e9b1c11e72009448016c4ec4842907a61ee44c7",
      "closedAt": "2020-11-02T22:10:44Z",
      "mergedAt": "2020-11-02T22:10:44Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ba8f046f0030700ceca00defffdaabaee2a959e2"
      },
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM.",
          "createdAt": "2020-11-02T19:05:04Z",
          "updatedAt": "2020-11-02T19:05:04Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTY0Njc3",
          "commit": {
            "abbreviatedOid": "1c87be5"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T20:20:53Z",
          "updatedAt": "2020-11-02T20:20:54Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n    {{!I-D.irtf-cfrg-hash-to-curve}} with DST =\r\n```\r\nand the same for other suites.",
              "createdAt": "2020-11-02T20:20:53Z",
              "updatedAt": "2020-11-02T22:10:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTY1NDc3",
          "commit": {
            "abbreviatedOid": "1c87be5"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T20:22:11Z",
          "updatedAt": "2020-11-02T20:22:11Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Can you please turn the others into suggestions?",
              "createdAt": "2020-11-02T20:22:11Z",
              "updatedAt": "2020-11-02T22:10:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTY1ODkw",
          "commit": {
            "abbreviatedOid": "1c87be5"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T20:22:53Z",
          "updatedAt": "2020-11-02T20:22:54Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Looking at the .txt output file the use of (') is replaced by quotes. So we might want to remove apostrofes everywhere.",
              "createdAt": "2020-11-02T20:22:53Z",
              "updatedAt": "2020-11-02T22:10:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTY2NzQw",
          "commit": {
            "abbreviatedOid": "1c87be5"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T20:24:21Z",
          "updatedAt": "2020-11-02T20:24:54Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\n    {{!I-D.irtf-cfrg-hash-to-curve}} with DST =\r\n```",
              "createdAt": "2020-11-02T20:24:21Z",
              "updatedAt": "2020-11-02T22:10:27Z"
            },
            {
              "originalPosition": 34,
              "body": "```suggestion\r\n    {{!I-D.irtf-cfrg-hash-to-curve}} with DST =\r\n```",
              "createdAt": "2020-11-02T20:24:33Z",
              "updatedAt": "2020-11-02T22:10:27Z"
            },
            {
              "originalPosition": 45,
              "body": "```suggestion\r\n    {{!I-D.irtf-cfrg-hash-to-curve}} with DST =\r\n```",
              "createdAt": "2020-11-02T20:24:41Z",
              "updatedAt": "2020-11-02T22:10:27Z"
            },
            {
              "originalPosition": 56,
              "body": "```suggestion\r\n    {{!I-D.irtf-cfrg-hash-to-curve}} with DST =\r\n```",
              "createdAt": "2020-11-02T20:24:50Z",
              "updatedAt": "2020-11-02T22:10:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTgwNjUw",
          "commit": {
            "abbreviatedOid": "0a6b7c2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T20:47:32Z",
          "updatedAt": "2020-11-02T20:47:32Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Hmm... good catch. I'll change that after merging.",
              "createdAt": "2020-11-02T20:47:32Z",
              "updatedAt": "2020-11-02T22:10:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTg2OTM3",
          "commit": {
            "abbreviatedOid": "344bb8f"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-02T20:57:39Z",
          "updatedAt": "2020-11-02T20:57:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 183,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE0MzYzMjUz",
      "title": "Define KeyGen. Fix escapes.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/183",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #182.\r\n\r\ncc @armfazh ",
      "createdAt": "2020-11-02T22:15:23Z",
      "updatedAt": "2020-11-02T22:22:40Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "ba8f046f0030700ceca00defffdaabaee2a959e2",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/nits2",
      "headRefOid": "2912dbae976f142ae13b3c24afc4b82baf52c59c",
      "closedAt": "2020-11-02T22:22:40Z",
      "mergedAt": "2020-11-02T22:22:40Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "efbe9863166b998c090bc50e6ba98fa88549ff10"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDUzNzYz",
          "commit": {
            "abbreviatedOid": "9a0c369"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T22:19:24Z",
          "updatedAt": "2020-11-02T22:19:25Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\ngenerates a private and public key pair (`skS`, `pkS`), where `skS` is a\r\nnon-zero element chosen at random from the scalar field of the \r\ncorresponding group and `pkS = ScalarBaseMult(skS)`.\r\n\r\n```",
              "createdAt": "2020-11-02T22:19:24Z",
              "updatedAt": "2020-11-02T22:22:30Z"
            }
          ]
        }
      ]
    },
    {
      "number": 184,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE0MzY5MDc5",
      "title": "Fixing some typos.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/184",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-11-02T22:29:10Z",
      "updatedAt": "2020-11-02T23:15:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "efbe9863166b998c090bc50e6ba98fa88549ff10",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "armfazh/revNov02",
      "headRefOid": "5d9f92be6725dc8ef2e3a5972f3acc325124b5aa",
      "closedAt": "2020-11-02T23:15:49Z",
      "mergedAt": "2020-11-02T23:15:49Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "86d83a42b269693c0764a7e55ac5e9f60ca77831"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDY4ODkz",
          "commit": {
            "abbreviatedOid": "296c476"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-11-02T22:29:54Z",
          "updatedAt": "2020-11-02T22:32:10Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "What does \"valid\" mean?",
              "createdAt": "2020-11-02T22:29:54Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            },
            {
              "originalPosition": 55,
              "body": "This wasn't a typo -- it's mean to output both the context and the public key, so the latter can be distributed to clients.\r\n\r\n```suggestion\r\n  return VerifiableServerContext(contextString, skS), pkS\r\n```",
              "createdAt": "2020-11-02T22:31:02Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            },
            {
              "originalPosition": 76,
              "body": "Hah, oops.",
              "createdAt": "2020-11-02T22:31:14Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            },
            {
              "originalPosition": 151,
              "body": "Merge conflict -- please fix.",
              "createdAt": "2020-11-02T22:31:51Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            },
            {
              "originalPosition": 85,
              "body": "Why did we make this change?",
              "createdAt": "2020-11-02T22:32:04Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDcyMDE2",
          "commit": {
            "abbreviatedOid": "6793936"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T22:33:08Z",
          "updatedAt": "2020-11-02T22:33:09Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "valid means the output of Serialized,",
              "createdAt": "2020-11-02T22:33:09Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDcyMjY0",
          "commit": {
            "abbreviatedOid": "6793936"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T22:33:18Z",
          "updatedAt": "2020-11-02T22:33:18Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "ok, reverting",
              "createdAt": "2020-11-02T22:33:18Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDcyODc2",
          "commit": {
            "abbreviatedOid": "6793936"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T22:33:38Z",
          "updatedAt": "2020-11-02T22:33:39Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "ComputeComposites returns an array/vector\r\n",
              "createdAt": "2020-11-02T22:33:39Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDkzMjg0",
          "commit": {
            "abbreviatedOid": "274ff98"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T23:03:36Z",
          "updatedAt": "2020-11-02T23:03:37Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Can you clarify that?",
              "createdAt": "2020-11-02T23:03:36Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDkzMzY3",
          "commit": {
            "abbreviatedOid": "274ff98"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T23:03:47Z",
          "updatedAt": "2020-11-02T23:03:48Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "Okay, and is this reflected in the Sage code?",
              "createdAt": "2020-11-02T23:03:48Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDk0NTE4",
          "commit": {
            "abbreviatedOid": "274ff98"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T23:06:14Z",
          "updatedAt": "2020-11-02T23:06:14Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "yes, see the updated version",
              "createdAt": "2020-11-02T23:06:14Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDk4NjM0",
          "commit": {
            "abbreviatedOid": "274ff98"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T23:15:25Z",
          "updatedAt": "2020-11-02T23:15:26Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\n- RandomScalar(): A member function of `GG` that chooses at random a\r\n```",
              "createdAt": "2020-11-02T23:15:25Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDk4NzQx",
          "commit": {
            "abbreviatedOid": "5d9f92b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-02T23:15:40Z",
          "updatedAt": "2020-11-02T23:15:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 185,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE1NDI2NTgz",
      "title": "Change tests vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/185",
      "state": "OPEN",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-11-04T14:36:19Z",
      "updatedAt": "2020-11-04T23:07:04Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "e02cf3466fbf033f1e9e92c04b069a8072b31072",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "5a7d45fd2cf45b332314f28b1cacf80d9a7884fa",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "cc./ @chris-wood ",
          "createdAt": "2020-11-04T14:44:48Z",
          "updatedAt": "2020-11-04T14:44:48Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Two things,\r\nas I mentioned in the other repo, I prefer to mantain the 0x prefix for test vectors in sage.\r\n\r\nsecond, as you can see test vectors are not running deterministically since the change not only the 0x prefix.",
          "createdAt": "2020-11-04T16:37:21Z",
          "updatedAt": "2020-11-04T16:37:21Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> as I mentioned in the other repo, I prefer to mantain the 0x prefix for test vectors in sage.\r\n\r\nGo can't parse them as-is, so let's drop the prefix.\r\n\r\n> second, as you can see test vectors are not running deterministically since the change not only the 0x prefix.\r\n\r\nRun the following:\r\n\r\n```\r\n$ make vectors\r\n$ cp vectors/allVectors.json vectors.json\r\n$ make vectors\r\n$ diff vectors/allVectors.json vectors.json\r\n```\r\n\r\nAnd you'll see no output change.\r\n",
          "createdAt": "2020-11-04T17:07:55Z",
          "updatedAt": "2020-11-04T17:07:55Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\r\n> Go can't parse them as-is, so let's drop the prefix.\r\n\r\n```\r\n  s := \"0x6432\"\r\n  fmt.Println( hex.DecodeString(s[2:]))\r\n```\r\n\r\n> And you'll see no output change.\r\n\r\nI may be running things the wrong way, but why vectors change in this PR? \r\n",
          "createdAt": "2020-11-04T17:24:30Z",
          "updatedAt": "2020-11-04T17:24:30Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll let @claucece comment on the hex formatting. If Go can parse them, then why are we making this change? :) ",
          "createdAt": "2020-11-04T17:30:30Z",
          "updatedAt": "2020-11-04T17:30:30Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@armfazh @chris-wood , for me the test vectors do change all the time:\r\n\r\n```\r\n~/repos/projects/mine-oprf/poc (master \u2714) \u1405 make vectors\r\nParsing test_oprf.sage\r\nRemoving vectors folder, if present\r\nCreating vectors folder\r\nsage test_oprf.sage\r\nTesting with test Vectors on Ed25519Point\r\nTesting with test Vectors on Ed448GoldilocksPoint\r\nTesting one way map on Ed25519Point\r\nTesting one way map on Ed448GoldilocksPoint\r\n\r\n~/repos/projects/mine-oprf/poc (master \u2718)\u2739 \u1405 cp vectors/allVectors.json vectors.json\r\n\r\n~/repos/projects/mine-oprf/poc (master \u2718)\u2739\u272d \u1405 make vectors\r\nRemoving vectors folder, if present\r\nCreating vectors folder\r\nsage test_oprf.sage\r\nTesting with test Vectors on Ed25519Point\r\nTesting with test Vectors on Ed448GoldilocksPoint\r\nTesting one way map on Ed25519Point\r\nTesting one way map on Ed448GoldilocksPoint\r\n~/repos/projects/mine-oprf/poc (master \u2718)\u2739\u272d \u1405 diff vectors/allVectors.json vectors.json\r\n4c4\r\n<     \"skS\": \"6174f54bbdafdd3bcfd4a06041237b0dba55be738921ac19f934c9916d2e3c53\",\r\n---\r\n>     \"skS\": \"3f3d86c3e0e019c1c5e47d3b1743cf3b333d8459e92f1fa45c1a19c8421ac689\",\r\n9,10c9,10\r\n<           \"BlindedElement\": \"037f8f555d4f6a2c3b21f6a353a52f01bea3b5a2b8436ec2c01a01cf67eee96517\",\r\n<           \"Token\": \"46736c42376170a98651af33ac718e4c44f8220586a8e4ee92157925c3aef53a\"\r\n---\r\n>           \"BlindedElement\": \"02e53afa2302fad27acf2d56bbea38074dbbbc23fb7363c43496769e579d5220d7\",\r\n>           \"Token\": \"83bcf6b5fa1b088c15dc297ae2353f198dac2e3e2fefd7ef7a5f3a9396560271\"\r\n12c12\r\n<         \"ClientOutput\": \"879c5725eef4f560969043f3cf932720f386ab54f9a135106d23e81c30884fcd\",\r\n---\r\n>         \"ClientOutput\": \"656284f1224bf7216757ffc81859aeb334344777b89d1e9ee02a955d7152f146\",\r\n14c14\r\n<           \"EvaluatedElement\": \"039ee453ad56d5fd62228c9b903b9818ba8f096af8edada5256e19a598f1d4190b\"\r\n---\r\n>           \"EvaluatedElement\": \"02239be9838d4ab2d5b7eb03cad5c612f5362f3a1fedeb46660b88d46791811f34\"\r\n20c20\r\n<           \"IssuedToken\": \"02af20a9f92e8bdbca7b2b7b450043a8e349f7ff58327157301814bf0f3585f77c\"\r\n---\r\n>           \"IssuedToken\": \"022c6578d014c3b68ffd5e6138c2b6d352593d4175328b019b8350f6019f375c61\"\r\n25,26c25,26\r\n<           \"BlindedElement\": \"0328a3f25f1cd537e3410f709a014b91744284a610aec49010e424b18190338447\",\r\n<           \"Token\": \"ed8bc3e0f19f3828ac0dda46ffefed869b3573a28845a1cdc8156dda1cb42c82\"\r\n---\r\n>           \"BlindedElement\": \"03e55aa5f117628888914e252f2eb8c40069b8634532cc7c9c1fb0e8f27353890f\",\r\n>           \"Token\": \"17538a0fbdafe78930da224d276e7d03c38c59e8f4c6d683e352d59ad8f1d0e6\"\r\n28c28\r\n<         \"ClientOutput\": \"0a717871858c02c190dc47fe7fa233a66fc65c43b0a4b2114a891f1ac1d13465\",\r\n---\r\n>         \"ClientOutput\": \"bef6f03c6d4e839171c2038ff206efdf9175a1b71702afde959989c1c7316669\",\r\n30c30\r\n<           \"EvaluatedElement\": \"0242331d23898daf954efc95972ee966e4f9d50f6ecb21dfd854dc5b39558805c1\"\r\n---\r\n>           \"EvaluatedElement\": \"039cf32aa7c47d37b39dec187baeedf64ecb288a44641fdc55b6bbba99bd8c3605\"\r\n36c36\r\n<           \"IssuedToken\": \"034cd19cf5644905d8262c548f63c1277498e003c0a543076687ca76764f35ebf7\"\r\n---\r\n>           \"IssuedToken\": \"02e65e3c2f9cbc94d12fbddd1fa848199318890cd6d7604ae5a9c2bfbe24848395\"\r\n41,42c41,42\r\n<           \"BlindedElement\": \"024b37f532b61b952a3c1475ce3fe27df2ef9916287036d52987d8e4de17baff9b\",\r\n<           \"Token\": \"a24e01948190264065c6060ee1ed79677099ee55b43d6b3d9473f5183433b3eb\"\r\n---\r\n>           \"BlindedElement\": \"02e11a9284e7181ad29031868dfc84fc2d228283538e57d3257e84d012705adb29\",\r\n>           \"Token\": \"59518b657d3f019ddf427d1950cbf23edd454f187bbd19256cf2d550fd06ae74\"\r\n44c44\r\n<         \"ClientOutput\": \"0f2f9d00bf266a1b9edda5968c6636f3fb450b73ec74a102d79f34ab345ffc79\",\r\n---\r\n>         \"ClientOutput\": \"b9507a0d95e82bfa96b85fd18e5297ba0b690aef4d139a3f20793d0f84dcd0bb\",\r\n46c46\r\n<           \"EvaluatedElement\": \"03e23a4a316185015eb275ab0120b712359ee9a0af771d9912cc8279e89ae41e45\"\r\n---\r\n>           \"EvaluatedElement\": \"02cc74d13f8d75d25e3e7862eecf144b9eeae9776c02e1b7cbfefc5264b7714bed\"\r\n52c52\r\n<           \"IssuedToken\": \"035ad651c35210bc756028cb55dc53af49617fe96691b6aef5a1067ca0e86a1075\"\r\n---\r\n>           \"IssuedToken\": \"03b31879fc43c0182370d231535d2665001534259f04d3f254e039fe31adf6b06f\"\r\n59c59\r\n<     \"skS\": \"2c5ca1fb743a013921efc828bcea630c81fb4ca9b4ed2e09e10462af8cb5b7dbed8c74aa895813ec9605646aa81c7f7\",\r\n---\r\n>     \"skS\": \"bbbb68e65c633c6711c1c75c215f7276f527714e9150ceeac5f8fcf0720308d07cdac06b8ed12948946f1eba55b2349b\",\r\n64,65c64,65\r\n<           \"BlindedElement\": \"023b6f6c633ab3e0e8445a458e031c60be181ca7085a3df52521692292e1cacfcef85a8291a980d3ad37d0953b7abc1b5c\",\r\n<           \"Token\": \"579f77ec5404344e35fc5f0d5fa1d5c3402f39795135b314b9a56c2dbcfa8db48c88e11a9b70ab7226e92d354d0a0d08\"\r\n---\r\n>           \"BlindedElement\": \"034767a26aafb0de6ca31d1d29fd26dc3880893dd2122fbd84d16292d99955f8580ecddcd1347bcb0f8cfa64620b884bf2\",\r\n>           \"Token\": \"bfaba18e6da8cc89f57dcfa306363716edf0d84fa4ffd1ad521e1982d0c95e3640d0c9b6d03ec2b88a359bd81a60509c\"\r\n67c67\r\n<         \"ClientOutput\": \"d869372ea764097af2ef2340deb47952dbed81a63ce837d9c041bb791160720ad25aa55dd08c93f574d32d1c11a89e3d4f0d7698fcefb70eef6c5da983364356\",\r\n---\r\n>         \"ClientOutput\": \"16e4511da9d3676eaa87ff7c7ee8a3b3c6d02f9eff3f2839fcdfacfeaa52d3dc53c6ef81b4c7479061f7b213c3e14d1728c6cddfa874fb4234cdb927173e49c3\",\r\n69c69\r\n<           \"EvaluatedElement\": \"02e4883484118fdd15e080a280d1b66cd2733dbc9bf81d8d96affa3975ee02a74c903547add3b240b1bad34d2bb234502f\"\r\n---\r\n>           \"EvaluatedElement\": \"02903c0efd55a302aae1b78bd7fd86a4fe505ac82e6c6a49ea895314aafe5534680c7d1595f2602d2d7a1bab55494851ce\"\r\n75c75\r\n<           \"IssuedToken\": \"02f849a885c0953f9f7e08a58f59f0e1e0ec48842aaf0744f9e756459dddba929bd74bb9f68223236a3f2eb3340504cc5d\"\r\n---\r\n>           \"IssuedToken\": \"024c96c8afcd4fd80c1b3b3c630435e0bc7dd7ddc9e9d72c85c26580487d78759d055d046de8d1ce8aca484a5036388310\"\r\n80,81c80,81\r\n<           \"BlindedElement\": \"0290d8c766bfdc4cc3b116cb6055c8021a9ac054484db952749701b1dbf8b683f3410382908852a0757d77c87b406a4ffd\",\r\n<           \"Token\": \"ad4f8d61d3eb4357b2a483be55992e2ee92317a26274bde189712cce3955d9f6329eea5c98a24d7ee5b56a88a373455f\"\r\n---\r\n>           \"BlindedElement\": \"02182ddf4f4ab91fa8e075ba047af978243a15b1b06d3c3ca0c7abb5b6cdd9db0643e64624772db804cb22b3504141b5c6\",\r\n>           \"Token\": \"d51f11c35a47716c1b629a77b16d934b631f0582cea43441a161b28e01e4e165958be2a15be54ac701d4f3be1d776858\"\r\n83c83\r\n<         \"ClientOutput\": \"c57befcbb9deb2635d81557ea4c012ca5402dc2399bc51c8526999785d88968326f80b919cc074e401b5f2568b4a4d5bdabbc3e73457855183434f046c5ef065\",\r\n---\r\n>         \"ClientOutput\": \"6e4066baa388bc7e44c5f1c17ab80069cd79036d6162cc40e7bf40a13ab1f547c8416d7b2cbf2e266171c25c04fa16a48610f8f93e203b4ac0ba0c44d4bbbdd1\",\r\n85c85\r\n<           \"EvaluatedElement\": \"0256f199d65eb1945b1d436847eaa9e02a8366f94dca3029acf9d1eae327fdd9715c638fa4d106a646ff79e31aba8a9880\"\r\n---\r\n>           \"EvaluatedElement\": \"0397b129a689b31f11a8b1bf45fa25139cd7a7ca29e2f25c8c73c50d11a1d89838adf130dd7b5ac1fffeb00e9383ebad2f\"\r\n91c91\r\n<           \"IssuedToken\": \"0350f953c1ec74002d3bb1582350070ce1aec577d488afa508e091f27e765eea69dd8a814455b8cdaaa5f9391d9978b320\"\r\n---\r\n>           \"IssuedToken\": \"022a1898b473f9eaca1ac88583e776b3ee9d45ae47dc8bafd301eeb5c78bc82935cd1b17cf6b666748aa9b20765bff2c66\"\r\n96,97c96,97\r\n<           \"BlindedElement\": \"0392c7f6b0bfecf05fca809fb1680e4e1c9499f9bef5168f3358031aa2ccd43566f66d926b374047b64a6f3fbc7ccfb767\",\r\n<           \"Token\": \"f162ac7cdaf719be997bbf22f4982eddffa371fab8dcfa66f1a4f80542c3fe50d9dd39f68aa5ef9bed0ba57d4788728c\"\r\n---\r\n>           \"BlindedElement\": \"032f9229686646403b19c3b10d4a24e5000fd37d2edf1ef36a96154affcdfdeefcae1df012d359eb0e3ff4fdf57bdc994e\",\r\n>           \"Token\": \"8c8ff1b2555a3f1a7d4d381f767bfa65b65714e55153fef6d1116e4b8b3dc9794481fea792e8d1df369f9213b7593a71\"\r\n99c99\r\n<         \"ClientOutput\": \"e9cf62d33ff968ce9bcb0515e53c14d39aeb48e6d57c240843609f8c9df062e1f49a61881351f3a1f9b70faf252829ebe07353a2e692f38dcaa18186c7e61028\",\r\n---\r\n>         \"ClientOutput\": \"52e1dab55d32ef0d7adc7ea24e232c56c66a418b64e6ed79c5498435c38a41496807094463ba3053d01061c0b08746708d534e6511e3c7a4f6f1a539c0e4094f\",\r\n101c101\r\n<           \"EvaluatedElement\": \"03bd9b1aa2b33eb0a56e761bef359e6febb383aeeb20eb1486625b1bf292016c8842fae7dd91ee04a953e6f59f795b8312\"\r\n---\r\n>           \"EvaluatedElement\": \"025f93ffb14c148eca64b100087a80567cb0938329a6f2cdbee156b6124b5acd28e7aee52c9c46c2f69811b5092fb9637d\"\r\n107c107\r\n<           \"IssuedToken\": \"0226d98bb4c63350227040b5fa10423634e35c2d949b1699b329c6d6bca3899e57d56716d8dfe9f88aa5e2aada149ab1f9\"\r\n---\r\n>           \"IssuedToken\": \"029a7d9ab353ff96fa5341d834af74bd4dc4555aa26e57ea21f5674a3363dead8543d442e4d03b4c38174a82dbbbd0f9a6\"\r\n114c114\r\n<     \"skS\": \"e47cdac06b8ed12948946f1eba55b2349a448bec98cc9ce2dc3992a8989882a0f2257f7ae8250bf7f992b0e07477e3d32487b2d637e712ef4ee28dc1da700bcb8b\",\r\n---\r\n>     \"skS\": \"ee4e4b8316a1b0a0229b0775217c99815e2036aff826a4044cb752ade92250668c87a2b78b3c9d5035ba8122e3e2bb11dfc2576c462f407ab5cf6e2ce5946f594c\",\r\n119,120c119,120\r\n<           \"BlindedElement\": \"03013882282350ffde8f72c7be44eda738a1f7d93a670da0471db06278eb58a5235ee82c022be887c82778d39bc91808f5cdbac8f555d9b7740a32d4352a06d9ffb8bc\",\r\n<           \"Token\": \"1ea06363716edf0d84fa4ffd1ad521e1982d0c95e3640d0c9b6d03ec2b88a359bd81a60509bbbbb68e65c633c6711c1c75c215f7276f527714e9150ceeac5f8fcf1\"\r\n---\r\n>           \"BlindedElement\": \"030093b99790d563b9e364d9fe7072059587afa902f84b948775309bf7cb17cdfd5c31d48731dbeeb33a85646927f707f27e017d5a0a3f469ec33b24f80b253a430bde\",\r\n>           \"Token\": \"124c3aef5396174f54bbdafdd3bcfd4a06041237b0dba55be738921ac19f934c9916d2e3c527eaf00310a7fd2a0cb9f3a195cbdfe78b1e1b08905452c6decee5f7a\"\r\n122c122\r\n<         \"ClientOutput\": \"b100889151cfe48d945b0416c136c2619c5fe64c39427a88ff809882c62f2b7ce41f936fbc9ed9f4600c4e781be22b766eff6274c9cc8f411f5b27ed35380793\",\r\n---\r\n>         \"ClientOutput\": \"cb87ad8b356dd23f5b3a5dd731bc346ab39747b98bdca43f660aa00c4cff31f93c263417f9af0943b57e76cda34884b709a6af871e622a7bfa476d6f7d7080c6\",\r\n124c124\r\n<           \"EvaluatedElement\": \"0301216693f872a462351211b718cc1d8f532a06c9bd72e5ea08dc08e71957630dffeb00fa1ff15dcbe1afb179634f51c070c2e4cf866689f88e8bd07f600ef1b121dc\"\r\n---\r\n>           \"EvaluatedElement\": \"02013ecc1b238d6636a1d622cc3a43c35a873de21988bf4376d174ac41fbff267aa7135e2580ec6deb4b496d5805120b34d183d8e98c6233584264e15c5de50cf2a44d\"\r\n130c130\r\n<           \"IssuedToken\": \"0300d5b04cec85c99abf4a79481180883059d4943f1f403ef982559969abcea44443ac6fa3d2f31b82884fe39fbdba69896ec230fa7e396bac0389a27bf15934a2de46\"\r\n---\r\n>           \"IssuedToken\": \"020022a74693d7c764c781c1767d466bdfa1dda0702081ccd20baa946da6b091b6cd96ce8ce77c9b0db5a25fcd9555cd852a18bd573669db71f1f0ea0517769b816c78\"\r\n135,136c135,136\r\n<           \"BlindedElement\": \"0200f20ab103e0c06b2912c56fef4ecb350edff38baff3afe10f32243c7ebb76b86170bbc15310e6cb839dfbc727596804a144a178aec61bf7e9b36bb82022bdc37dbb\",\r\n<           \"Token\": \"125369f9213b7593a70d51f11c35a47716c1b629a77b16d934b631f0582cea43441a161b28e01e4e165958be2a15be54ac701d4f3be1d776857bfaba18e6da8cc8a\"\r\n---\r\n>           \"BlindedElement\": \"020073498f6c2831b022b95ed0c615d646f0d7c67670e200262f0169b2c558be3af66f126c67f914d142e4d9a1688b7cfada464f1301f2d0dfe10c5ba77e250461f94b\",\r\n>           \"Token\": \"1689473f5183433b3eaed8bc3e0f19f3828ac0dda46ffefed869b3573a28845a1cdc8156dda1cb42c8146736c42376170a98651af33ac718e4c44f8220586a8e4ef\"\r\n138c138\r\n<         \"ClientOutput\": \"ede70ff8af02ab958b74e7afb7d7b7b0deaf728a9a7ebbd7c4375178a3d975d71b671084baf3fbc9cdc87c42482f159fed67e59f087771ae2a6fb135f6a510c2\",\r\n---\r\n>         \"ClientOutput\": \"c96d5d946f3e415c2c6d6fcff4b9bbb3c005cff993f199f1b1efe9ba9649b3a966e5c121ae33c6023c38306ed1576499654cf35e04eddc2f5d8aec065aef0c3f\",\r\n140c140\r\n<           \"EvaluatedElement\": \"030157acefdbd151996ecba56f89b25ca6059744b38bbe0dc38677b7f7070a21829d822db232799d402528358ee76c9907c6d1ab3336d0ebb4fc7d4b6a919ad7905b5d\"\r\n---\r\n>           \"EvaluatedElement\": \"02010a0dc4cf4b9c3363245a8d2b57c9a46a26ad3a572ebbf929858803312e22b32b4bdbd2a0227d6c118331502a021de6f73bc6f555f02ad6aa12d973e4fc81b3ab92\"\r\n146c146\r\n<           \"IssuedToken\": \"020190e1f213c29169e7ad6ffab903286678b09747229c2f18b850925ac864ec341e573e1c7e2bb111ce28d4154796578d3c50bedabf4ce3c24db0e08a0fdd0dafe7df\"\r\n---\r\n>           \"IssuedToken\": \"0200894c7040a43ace82edebcb2d1a06d56193c608403e73b9adabb3721558f6402a8d1b9d7224aeaccc394c2369ca83a80bf9292c387b9823dea65af20df0a518cf35\"\r\n151,152c151,152\r\n<           \"BlindedElement\": \"0200c44d867e9b49d1861b54395ed1b33fcdb4324b5b826913d640eca17b19be70809edf4cbbcbd2ad47b60087cc5e36fd800139e82b1fae336dfcf43afab4ab67351f\",\r\n<           \"Token\": \"17a3d18a67b0a52d73984dda94a864450bb45c3f128107ec2e1f2ecd4538c8ff1b2555a3f1a7d4d381f767bfa65b65714e55153fef6d1116e4b8b3dc9794481fea8\"\r\n---\r\n>           \"BlindedElement\": \"0200ea5d6d0303dc76567c758032a90954a0cb47e5ff282805561f385fd024c8a4bd7f87c565c7784a8bbcb9a0630f7b2c4f7208adbef9845f81c71faed5afbd7e51fa\",\r\n>           \"Token\": \"89cc9ce2dc3992a8989882a0f2257f7ae8250bf7f992b0e07477e3d32487b2d637e712ef4ee28dc1da700bcb8aa24e01948190264065c6060ee1ed79677099ee56\"\r\n154c154\r\n<         \"ClientOutput\": \"35cd3b488013d418059a143de8128964bfa309888574c5009f1e383f0ae6f14195525b60f281fc66e72c164ad245e46a9712d78f2ee87ad011f6bf8654eb5d86\",\r\n---\r\n>         \"ClientOutput\": \"c13073d8f4a82bd73849dd25de2e24c9fdd527d6c196499bd04f4137e6d62a63ba520c371a6eec0f4c5ec37d384264678b62d9cec0ea1bbc90b20ab03505ed9f\",\r\n156c156\r\n<           \"EvaluatedElement\": \"0201cb719c8861ab1c15d74162db321626c59e032a8614f8ac563a093090cdf424b5c9038e3a9d5d6764c8a64d96da45350f6044b38dcd55a22f18ddff712e54050406\"\r\n---\r\n>           \"EvaluatedElement\": \"020081d9257f409fd40453438e440a226d2ebbb115a778cba980a55338b928e1067ea7076334a688337f635e3346299daf6aa6e75a53324151ead243b0615bf3569bf1\"\r\n162c162\r\n<           \"IssuedToken\": \"0301b96ed63d62d386ec4e09f79e141c1fc6543dd426e968a81e83d0850acaf017c61328ecfbc73338d7ba24e6dada357972d30bbd7d3b64fa97ddf15925be957f68f8\"\r\n---\r\n>           \"IssuedToken\": \"020054741927ae19c858b214df703179c725c59d871f8a4b8e59143c7b8dc424c755b34df875157bacfb0bc798f764bc33c2bd81e944e368a4dc12d41cb37c9239737a\"\r\n169c169\r\n<     \"skS\": \"5770a5ee2353f198dac2e3e2fefd7ef7a5f3a93965602703f3d86c3e0e019c1c5e47d3b1743cf3b333d8459e92f1fa45c1a19c8421ac689\",\r\n---\r\n>     \"skS\": \"2784118af8cb5b7dbed8c74aa895813ec9605646aa81c7f6bd08ef503d18a67b0a52d73984dda94a864450bb45c3f128107ec2e1f2ecd454\",\r\n174,175c174,175\r\n<           \"BlindedElement\": \"e0ea2f22dde84dca57717c4adfcc453a4c4d50c5889ccb29086d849bbe905167a8bd045b79ec9aad5355abceeb9fb44dd48034e3c7b38ea2\",\r\n<           \"Token\": \"375153c67bbd19256cf2d550fd06ae7317538a0fbdafe78930da224d276e7d03c38c59e8f4c6d683e352d59ad8f1d0e583bcf6b5fa1b088d\"\r\n---\r\n>           \"BlindedElement\": \"30c8cb21e965b109c36f87492c6bf11bfd44966b08e5c4b896110cbb2430ff48dcd25e5216868a98b4b263906796f33abf4bea3a2c3056bd\",\r\n>           \"Token\": \"100bce5e5135b314b9a56c2dbcfa8db48c88e11a9b70ab7226e92d354d0a0d0702c5ca1fb743a013921efc828bcea630c81fb4ca9b4ed2e1\"\r\n177c177\r\n<         \"ClientOutput\": \"b067b9fd27390c783f3bbb24a20de5946f2426dd85f4af5276608a930556ef3f3dec707f2d224643ae2c144118bdfc619aa5d302218bcf4bdbc5205f06413e9f\",\r\n---\r\n>         \"ClientOutput\": \"bea446a2843bac516271f0883de1f4e67aa73b3beb00b7b31f16fea804a5fd7868f62b95d345cc6f2e21700c60ce3a2a93315b87bdd399bde5befb1943ac5d73\",\r\n179c179\r\n<           \"EvaluatedElement\": \"1ca041092b7cdb2e04dc92a94007ab477d441d03dc90f29a7c8cc4e05ff26875e6808496134d2360858590f79d0ab317aa0d06c239f2d85b\"\r\n---\r\n>           \"EvaluatedElement\": \"143ec4abaf1aeb37ae32b9dd230edff5a85fbf0b39ac6c6be0943dab48e7931bf5de33968f274c6ab8292ad519e764d4b7d76b021c0c09a5\"\r\n185c185\r\n<           \"IssuedToken\": \"c4c51cc0d922df7bc8d88621094bff32f504390eb74248e4c4a71ca84bd5710c82cb5132b8d7c6887df7630cab6a388d01a00cc6cf10ebda\"\r\n---\r\n>           \"IssuedToken\": \"caff5c88c69cafaef955c83cb1217353ccf0cdb82dfbb0e6adc20b35c25095e461116357cbf80a21e2bb327f25d38ca70a41032ed248aa13\"\r\n190,191c190,191\r\n<           \"BlindedElement\": \"9445363fa3e4fa228c7c902ff42ad2fd2655d126f913813d8df0f705a19ce4f728e9d9c745e17c1126fd433fa4611b2c084a6d4aa77702c0\",\r\n<           \"Token\": \"2dd4ab7a2250668c87a2b78b3c9d5035ba8122e3e2bb11dfc2576c462f407ab5cf6e2ce5946f594b59518b657d3f019ddf427d1950cbf23f\"\r\n---\r\n>           \"BlindedElement\": \"b6192fa845c24290c3c10a3c8515289e17045d0db5d289aa83fe6d6a02531d4fd4bfe0d69b7bfab99bb3f701752dd5b3fb028d7393d78f73\",\r\n>           \"Token\": \"2ca920ef55992e2ee92317a26274bde189712cce3955d9f6329eea5c98a24d7ee5b56a88a373455e579f77ec5404344e35fc5f0d5fa1d5c4\"\r\n193c193\r\n<         \"ClientOutput\": \"2c2ebf3dd46269ba79bdfa29b91a555b4dc946914f93c501ce1907a1c6ea520f51c39ee631db3e5513872355e34a59812dee7ba9270ea8daa0a7386a77e1d424\",\r\n---\r\n>         \"ClientOutput\": \"aeb406e96e4c5e70aced93f95eafe2c1b77c5c448d1bac8bf112f493f7a846937ec79e23ad2155ba92b96fbe5d753379f553db17cf340b4de6253108ccf7e358\",\r\n195c195\r\n<           \"EvaluatedElement\": \"10c0552bdf7aaca16c704276bc105bfc4871bcf3e2e06d4abb8fd727f98887101d5bdd2dafd144b1cc3ed9eed42f54efa62ef0ab1ded1af2\"\r\n---\r\n>           \"EvaluatedElement\": \"7a5261ce2dcd93208961adf1384def543d8395a056bc2a60d15045e9824b2058f0c873f95a3e1342fde3e5d1d4d1c808fc9f62aca5671c22\"\r\n201c201\r\n<           \"IssuedToken\": \"36b2b19829ffe8b5b3158500d8210cd247e2ab8b8400edd77f2529a5be031f56050bd64a0c2dc23cbdf06c3210391266c1eafd2322feb4d2\"\r\n---\r\n>           \"IssuedToken\": \"ccb9a3aa1e1fa93e920bdab1333ab3f0939a22e4061d3e647edfdb1597a43ce669b2444d2be02b34d167837533f7e5afc13f576f8d8723b5\"\r\n206,207c206,207\r\n<           \"BlindedElement\": \"d43a09c3a0f0cd344e5472b39ad8b16acf70436e0d54192d3a4c8f2f49854da72494fedf7964b5eb9bd57cf5aee52cce91953f4c9e67ad7f\",\r\n<           \"Token\": \"1fabc00c0a7fd2a0cb9f3a195cbdfe78b1e1b08905452c6decee5f79773e517f4e4b8316a1b0a0229b0775217c99815e2036aff826a4044d\"\r\n---\r\n>           \"BlindedElement\": \"043980e769478a64f59ddf48e35f3b15ea2c5ece2c4b0c1891896441154961df3ad7beebc4a32f6a9abf159fd3aa9c2e052be54d5513b524\",\r\n>           \"Token\": \"3c58ab1fdaf719be997bbf22f4982eddffa371fab8dcfa66f1a4f80542c3fe50d9dd39f68aa5ef9bed0ba57d4788728bad4f8d61d3eb4358\"\r\n209c209\r\n<         \"ClientOutput\": \"84bf2f3a73dcb5b1d3d51ffab411a372ec0809bde06605bd779301f174234ae4994dc9ef610edc73956f910494ef722c9f1bd8d76dd13c23ec8f5597e6d02c3e\",\r\n---\r\n>         \"ClientOutput\": \"7815d117f71a82b266b18c764c5122c13c8315205ccc3bb8a4fbbbd9f01e462bc61c6fc73ac9819e8e9b7cad1a3f8d0a0b09fc637aeff851d60cf4048a343aa8\",\r\n211c211\r\n<           \"EvaluatedElement\": \"c0f6b008bc988b0e1353245eaa4e550f9404c603fe0b6ef9b54fbf63e9d3c8d64076435d007b4a12576094bfe1fa4651a38a065a78d7759e\"\r\n---\r\n>           \"EvaluatedElement\": \"044e2c35b72c18caf54d6ede128e8463081cb2ded37b4411d91adaa0c3541e7c6346db9c6656c9c9cc0fed407776b1a3d7796e33e219897d\"\r\n217c217\r\n<           \"IssuedToken\": \"20cd9ac3ea4e6ba3f4f9bfc902ea851b71d747425fe9ab45ae56408b85eabcad8565ca09fe39d5a3fc62de393a5bf8a23f079a187e1df16f\"\r\n---\r\n>           \"IssuedToken\": \"8cefdce950ea1ede25757ec905db9dea218a9da3250325b26f5c074b54d560ac49aeb66fb5eb33338d413a1e952f49ed625635f71c8642f1\"\r\n279c279\r\n<     \"skS\": \"bd83679b4c1e67ed82f2891751aa7094602be672c324929abb1876a7f7165ac8\",\r\n---\r\n>     \"skS\": \"f66d9fdbd94a53533e7c5057e09e220065ea8c257c0dd6055c4b401063eff0c0\",\r\n284,285c284,285\r\n<           \"BlindedElement\": \"03044b4734b43d53b545f726830e9b977cc1efd6e13f944b81e7b15d28c21bba35\",\r\n<           \"Token\": \"3bf1d9f39878b22e5c4833d34c486a8510e7cca4c1b81ece04f47e8d2554a5f\"\r\n---\r\n>           \"BlindedElement\": \"0385180714033c6d015c85410eaeedda8c88defe1e1f0d02161e2949b8e227c207\",\r\n>           \"Token\": \"f8e926ffe4854a58f6b3e908bdb38e3c626a939e19daca653b9217801b5d51cf\"\r\n287c287\r\n<         \"ClientOutput\": \"cacc0c520aaba389a59269f7796e8af6cac69d37138c649c1866c22c72913a70\",\r\n---\r\n>         \"ClientOutput\": \"90100e4d865ce19578b46c83701efe3febfb4ab02a208bc5f6a3ae9d6a73f1e3\",\r\n289c289\r\n<           \"EvaluatedElement\": \"02f96c274f72acd1c08dc58fd51036717e08ddf5700d4243d2235853e98e82069a\",\r\n---\r\n>           \"EvaluatedElement\": \"0320c00f0db3bdc410a97da2c60840af38385be00499246c6c14474eba4d19258c\",\r\n291,292c291,292\r\n<             \"c\": \"c3eda728e8ffc89fd1c32e03ba7df4d7d8fa4fe04c91c797b1c73da4b9e24615\",\r\n<             \"s\": \"4cc1a9076b54e3912cbd3d1fd452c1b30bcfcff8c092697cd54d3021b3542abc\"\r\n---\r\n>             \"c\": \"bb5dc4c8c15cfffc3bedf4327533765abd1ee1be70564c6cbe7ad37c29ebf528\",\r\n>             \"s\": \"901f008afcfef2f2812c64c40d15b3aacc1d36e4da3cd228a2ff957b4b54ba72\"\r\n299c299\r\n<           \"IssuedToken\": \"0365e1e78669c2a11999ad151b83d52c446785344f4c186e8889a73874db97440c\"\r\n---\r\n>           \"IssuedToken\": \"0388682f8076cf52eb43dd6db208daceac8bdb3f0f7e4389c770508c953160fc2d\"\r\n304,305c304,305\r\n<           \"BlindedElement\": \"02f43fde9fd97f6932051e44eb1bd3e7ead16377aa6ad2a8a3e92982bdd34bb3f2\",\r\n<           \"Token\": \"ea420f8d0c793f9f51171628f1d28bb7402ca4aea6465e267b7f977a1fb71594\"\r\n---\r\n>           \"BlindedElement\": \"03abdbdebc61960bf8e5ddd7700500e1dc607e91c429ff9ea4fed906aef803577f\",\r\n>           \"Token\": \"49615162a416d507a6532c99c1ea3f03d05f6e78dc1edabd3b9631be9f8b274e\"\r\n307c307\r\n<         \"ClientOutput\": \"1f17a5ce207e7014cd991e8063685550734fbc36bc888a444320cc1d8aa000a7\",\r\n---\r\n>         \"ClientOutput\": \"04089e7bffb1ed98ed024899d27a13ea648d0f8a4af71709baa50632bffab19e\",\r\n309c309\r\n<           \"EvaluatedElement\": \"028cc5879241ce078e4b14da40b4b9a1a618f852a98f3e31e9242cf8230393a227\",\r\n---\r\n>           \"EvaluatedElement\": \"0335948e0feb13e631d744802bbeb481e9f9c70d637e6d0490081751470a108310\",\r\n311,312c311,312\r\n<             \"c\": \"168fb4fba1d1ba623efb075ef2226136b8360f6d61319c5ceb266db48a9168b4\",\r\n<             \"s\": \"987a8554c2653042f09bb9c6bd766dd835f0d58cdb872f36f8ee5a9a33f1c3ad\"\r\n---\r\n>             \"c\": \"bf628b6c62151464de4aa15ae81cc6bf157d7c2b82ad843786671675d1963a11\",\r\n>             \"s\": \"f0d56d54e9213ddb6f92cc3415a51f6148f2cb9d4f263c3f9097e784f20bf047\"\r\n319c319\r\n<           \"IssuedToken\": \"0317bbb97dd6e8f2ded0e2e3a43ff8134dc157cdbe6743eb552399a88ab2c6b492\"\r\n---\r\n>           \"IssuedToken\": \"0362c14486afb97ce4689a0c77dc1c06d72106651ffb27edd5a857da46d5ae0a0c\"\r\n324,325c324,325\r\n<           \"BlindedElement\": \"030b9331261284fc56202046e053baf08abd92afe4e4013235c31f4a87583beb94\",\r\n<           \"Token\": \"f671d326e196e8a21bf6cfd40327a95f1ccfc82a9f83a75dae86286729214a1c\"\r\n---\r\n>           \"BlindedElement\": \"0317fd65d37f4210c9529df8ce7e0601e4395d5a3dc5ec2ed0c9aad59e416a3fa7\",\r\n>           \"Token\": \"d423b59de7b0df382902c13bdc9993d3717bda68fc080b9802ae4effd5dc972e\"\r\n327c327\r\n<         \"ClientOutput\": \"5b94f7c0ebd3dfb5a87de2629871beee8d722c2fdae611acc14a131f0e379910\",\r\n---\r\n>         \"ClientOutput\": \"a42c18d9350b603eaf321b15db9b8d6ca41d853a75dec55be5c5fb88883b95a3\",\r\n329c329\r\n<           \"EvaluatedElement\": \"03eb15811419d1078afa25bc275284bb2e28f075b37165b469b0ec5db4d85c08bb\",\r\n---\r\n>           \"EvaluatedElement\": \"03097efc62ea5f0bdbcf71e19d6c630bc13c000422de21c8f24c8b716ea0d68279\",\r\n331,332c331,332\r\n<             \"c\": \"4b39883ef13d59aa9749e85289bac85de0b3c49d5164d7e471d5b67333ee10fd\",\r\n<             \"s\": \"edea1d89c69e9bff8afd43210dae6525abcc09d9f483e69e9397dd8f20dc9e5\"\r\n---\r\n>             \"c\": \"d2ab25a4705bfea630371c2624543576f487bb8015dac1a6a5672fbac0b61745\",\r\n>             \"s\": \"3bd6330058ab4284f8667e497be24d874668e09c11d2614a2bb040635f16167f\"\r\n339c339\r\n<           \"IssuedToken\": \"02cc38fc453c721970236881d477295f0d043b6c69a3c191bd2bf3d3ac0b12ce25\"\r\n---\r\n>           \"IssuedToken\": \"026f4e5683d6016d5d0e374a4ec5c2364276cab0a4a919e3a7511ab0913b85241e\"\r\n346c346\r\n<     \"skS\": \"23f4a0e6a39eef47b0d4ca4c64825ba085de242042b84d9ebe3b2e9de07678ff96713dfe16f40f2c662a56ed2db95e2\",\r\n---\r\n>     \"skS\": \"954e16c0b9ceed3ce992b198be1ebfba9ba970dbd75beefbfc6d056b7f7ba1ef79f4facbf2d912c26ce2ecc5bb8d6642\",\r\n351,352c351,352\r\n<           \"BlindedElement\": \"02f09f4d54f3d5c2cd6eea8f68ebb801750f877cb01722b20ad2e8c92b04663fc02a7c75c14353128973f5198b12f1edd1\",\r\n<           \"Token\": \"2d20d7e4ec77617a4238835743037876080d2e3e27bc3ce7b5fb6a1107ffedeaedb371767432b68bbea293aa8a69353c\"\r\n---\r\n>           \"BlindedElement\": \"029b87dcdd2fb024f316449c12d8b41d7c67cd3fd9ef7eeeff0696cd98801edbe69e1e7db91bcc9b42351c47b2942a8aab\",\r\n>           \"Token\": \"3f1d8f2f6b92a02a32d5eb06f81de7960470f06169bee12cf47965b72a59946ca387966f5d8331eab82117c88bbd91b9\"\r\n354c354\r\n<         \"ClientOutput\": \"7494a3e62a43118a1ec49527174ebf31e25a85cc28c457d4b107b6549563300561727ce9210ad19a93e31e0a0ad0438ef72511be4f78f104f2dd37fb9d872838\",\r\n---\r\n>         \"ClientOutput\": \"db5f42cfcc94f73607b57882222c01b18e7b484a5c29f46e2ca6a0b8ce0d8cb8d34566a75fb93c8ad5b034bfe41696c89f4c5939051786191ef434f6d512da8f\",\r\n356c356\r\n<           \"EvaluatedElement\": \"0392e11aed26a42180325f878cd3424e6f33bcd24742f9679e162ef39c2d1e67e3ba076b590386f89a864914f873c2d14c\",\r\n---\r\n>           \"EvaluatedElement\": \"02f6e4c018db1e869a6d399e88e3f3f840b7df1eda64e9550d3682cc67cad489c6da294b8ab541f904e771fbd6c52a7f8f\",\r\n358,359c358,359\r\n<             \"c\": \"62041b3d0d7558ec5fb568e5137599e2892661e863159307c7114f576695cc5b6003a94e1a592c7007ed801d6ac4dafc\",\r\n<             \"s\": \"d880aeab9a2e856e67cf1ecd40c24b11511b2c5fcda08c48524ccae966642a995ccb525d2e8cb4672886587b8e1f6f34\"\r\n---\r\n>             \"c\": \"caef380ccc7f4f5b0781f7483c5fb5345edd510bba0f54d840baa95e9208ebb78af132254755e81083ceb97508c8060e\",\r\n>             \"s\": \"86c9a30d538d177499f433dd54ede8d9f2c7e5a332dc8ce0df6a4043804f3145b83f08a7853a2fc53d64ec9b8c57dd91\"\r\n366c366\r\n<           \"IssuedToken\": \"03a36359d78171768a743ead7420a1b004778198fc78e9b30f5805296bea9c9ff43bfc0b0904f43fd09d926547fca4e852\"\r\n---\r\n>           \"IssuedToken\": \"0220db7309e324d643089a3e6dfd79af5001cab762119499d84c6252c25fdfb236199cce941778ee9cd0bff8abdc5bb6ba\"\r\n371,372c371,372\r\n<           \"BlindedElement\": \"03de06d158219744d679e721d7de567a1f9d578577ca3deff3a28de7d8e1d92abca232760d8681def0cbd9a83b7f4c2dd9\",\r\n<           \"Token\": \"be5f5eb4a34dcb73609c6693f28cd3d57ed77bf66e0ab7d86c6990f0fcd9a655f77ff0b2ebcfe21e1a1ca4a84361e9f2\"\r\n---\r\n>           \"BlindedElement\": \"03a503d57666b43d077bee86437995f379f31edcb8ab5e99556a67af473fd2902cc9d2d89d0e17296d6f5f7c4f53fa113e\",\r\n>           \"Token\": \"9a38546f74b6d688f70cf205f782fa11a0d61b2f5a8a2a1143368327f3077c68a1545e9aafbba6a90dc0d4094ba42833\"\r\n374c374\r\n<         \"ClientOutput\": \"bd99e774312520ddad2944a56be8fbd530cfa385e9c03276029029a3ee51fa9bc9e565b87e4dcb60349c3e50c8028e1621c2af29941e241c3467eef597ac3e70\",\r\n---\r\n>         \"ClientOutput\": \"a3307f00056737e76f1daa55da5cdd980825612027f1124856c78ef2c116ad58e79f05ddd01c1e2b04e81fc40bada244031a5b8085b72a73ca7f63ed9a6986d5\",\r\n376c376\r\n<           \"EvaluatedElement\": \"0370caee681c5afdae1c8947c8d34370a50a8c2dd9679552176f32e10e2d971f611a4ed051de74e48ad4bc4f20a9a40a65\",\r\n---\r\n>           \"EvaluatedElement\": \"03fec62cecf9b426901f685cb9a5c810e85c0775101a41b71d26fdfa4966e04ca24e4108cf8ec5ee945c6a5a6a920e19fe\",\r\n378,379c378,379\r\n<             \"c\": \"4511a24768304e197290dd0cf1181f0c1ce2037e874f9cd7d1defae5d12946a45bbbf5c06a4a01cc37718a51968e5345\",\r\n<             \"s\": \"580aa191fe1642e60f52f505770f167311574d850d1531759a411c6e7aecaea3021759c513ab8b5c64f2efb02c8d2d0b\"\r\n---\r\n>             \"c\": \"754752279ebf37833f5425ad3011615ebc4b44e7b30e2b8998fbe6641f082ad6a1faffc80ede78ed1ea8494462c8e051\",\r\n>             \"s\": \"caee6091c1aec0f86d7071d5f0aad9b1c8aeb2959d32bdeb4f939ca72f44ea31d126020e35b2ee8c4fbf231ab233382a\"\r\n386c386\r\n<           \"IssuedToken\": \"0369755f9ba7329ffd88f51f1d7745dff10158a3c3ffd2e57d1f1755b54f614551aaaa4348c6119c6790185b12d74bc0d8\"\r\n---\r\n>           \"IssuedToken\": \"0222c51683914fbe652fa8819430292e3d4bc602182ffd0086425c32585aed81e71e6a47f4709814f3541e6fa9da0631ed\"\r\n391,392c391,392\r\n<           \"BlindedElement\": \"026227ffce6710530d33be90b3d0fbf05953d37a82468c6041ee65b3ac99e72f3378f411bcbab719a2acadceb0ee543142\",\r\n<           \"Token\": \"31ade30669dbae98fb0879524fb9234e93a8bd048ad9f44b428026396a810328c405a354e666f086fa0ea4754fb56528\"\r\n---\r\n>           \"BlindedElement\": \"039f50fda00acef24afdf30b00d7744dfcefe7f00fa6a4489ff115eb11b8205812193e27fa9b924b05dba3f4bd2031ad91\",\r\n>           \"Token\": \"84580de0f95f8e06aa6f6663d48b1a4b998a539380ed73cafefa2709f67bd38be70f0ffdc309b401029d3c6016057a8f\"\r\n394c394\r\n<         \"ClientOutput\": \"193ab8e39ad1968c69872f759498e27313d70d45f68a28ebd3d3a2a55a221ba6394b11f26aac93389348f59059d3f87ac4fb37542a44c99a42bdb7d6ae525695\",\r\n---\r\n>         \"ClientOutput\": \"2135ddfac70a861e2746ef6ee2f9d5ab7ed8b9d71fe9f6955fdda69c73274a27046fa4fb132a542b8ddb05bf1d9481be812e5608619b584bbe98d2421d671570\",\r\n396c396\r\n<           \"EvaluatedElement\": \"02e3b1433b20e84722db65d4bb75a8e69f029fd443baa846860e3da46cfefdba21ada5347f757b765c01a49bbf86a8ef43\",\r\n---\r\n>           \"EvaluatedElement\": \"032862c65c9e19fc126810b7108075a057299713ff1af00cf0978038bc3df621833ddb3f27f09436ed536d2bdcbce8405d\",\r\n398,399c398,399\r\n<             \"c\": \"9e1b75e2dbf9e24d21b5e75a2fc5af2debf50613564141f40ac65a6d95f77103c9b648f12fc7750a90a7346e921cb0dd\",\r\n<             \"s\": \"9588050d6cfad623c9e17062e78446e6daa6c6086a31e18b210484abcd9816eed22d929c394a66d0cdcba2927a12dbf5\"\r\n---\r\n>             \"c\": \"c707150e9601bf5c47c0363ae75964d3fa4c0e63d9363ad7adb1f9c2e282a23dd94a57b9b0b24af45a1186f762c0292b\",\r\n>             \"s\": \"ec1ef324c70a11273271a6ed52931891deafc8b3639bfba29d814ff09380dcf4fcb6461f27fea2c2221ce66bc83a0fed\"\r\n406c406\r\n<           \"IssuedToken\": \"037a243146bd1abc529498ee991886ab4e907cca669a380ec5b1c7fad7d8405494db54aca13b5d214f1e906a7e3785b7e8\"\r\n---\r\n>           \"IssuedToken\": \"030a07a24e81757605bbd1568c27deae193322e89e53e4a0ac18d39a9202c909f2c26dddcfadf3cab947fdb9f0068c2a1e\"\r\n413c413\r\n<     \"skS\": \"10a2022e9c9fd6a1695bbabe8add48bcd149ff3b840dc8a5d2483705fcc9a39607288b935b0797ac6b3c4b2e848823ac9ae16b3a3b5816be03432370deb7c3c17da\",\r\n---\r\n>     \"skS\": \"1578d11782429bff296102f6338df84c9602bfa9e7d690b1f7a173d07e6d54a419db4a6308f8b09589e4283efb9cd1ee4061c6bf884e60a877321ece4f9b6ffd01d\",\r\n418,419c418,419\r\n<           \"BlindedElement\": \"02019ccfd445bb38833c255603e9203031bc4b89b28eccb802b3c20a4e35f3edd9852b9f090dbf94a66a2d2e2e6d5d098f00d70eea123bbf3086c95164cbcf8536e94a\",\r\n<           \"Token\": \"f3f2d912c26ce2ecc5bb8d66419b379952e96bd6f4d0262d7e3b1096b0316bc8567c89bd70267d35c8ddcb2be2cdc867089a2eb5cf471b1e6eb4b043b9644c853a\"\r\n---\r\n>           \"BlindedElement\": \"020148afa375437a07519284f369ae27a8580cf05ab8231976027c9aa21f5587588c86249aa9f3de69066bc10b516a4ff691060b18b6f8ad073559b61a2e57d2b7e714\",\r\n>           \"Token\": \"9707cb131d51cf1324c123869859b596174a682828f3934d510217ce7890f67cafc0ffaa7a1e1d1ced3c477fea691e696032c8709c86cbcda2b184ad0029d29abf\"\r\n421c421\r\n<         \"ClientOutput\": \"501dda1139a6140655b78f509415c7535363f532251d1dfa420f1f7d0af03052b61672e1aba4fdecfdc917def6e19f578ad9fbe278f5421ce0c9c681bd211678\",\r\n---\r\n>         \"ClientOutput\": \"cae082e0293e6d0b601b87ac9c4b3c3381d78c77abf95f354f1749b04e485a07d0f2d985b5b0cb701aeb620a2b9a7b168a5e6cf2792e156d4e2d3a000617f8ff\",\r\n423c423\r\n<           \"EvaluatedElement\": \"0300fc7c3d043822a9d739075e727a4aaf88ce1f4c4bbb2a8ccf723e8e2e2086356e51b3a974340853e02ab3c3314a746e05ab563ca14ece93d1e103f16ab0bbda11a2\",\r\n---\r\n>           \"EvaluatedElement\": \"03018c3c4464b0e38cd2802043354b163e84e8395a9642a29e7140fba85716f8c234be68b042913ce15d506fb1bb281376caca679630c2e1f80485edd3af66cff3b835\",\r\n425,426c425,426\r\n<             \"c\": \"6b6efce5eba3b2b1dbca79e022afffe216a9c734aa19ae8a782b534504392524b49f1d93e7c279119752d24cd11d1032db035529d04058380b69439cd65c39167d\",\r\n<             \"s\": \"42f9faed13057f18387ec5c04a11dd2faa5b3c3d3f04d4f79d2d583514ae7c174a9e474103a88a6d46090daa91741931ee133c4381b6ec57f4fb9c982efb41c878\"\r\n---\r\n>             \"c\": \"7c2514ce293a67928637f8748f7e1f613d2b3f42db2e3537fc420725f9561f2edd5b8cd928ec6bd72772c48eba4bc0ee6ef9241328a90d526f7420951f0380bfa\",\r\n>             \"s\": \"139405048f4eb06ac8a2f44c6e3917b1f84dba911a35cfc46a3b39d3a386c5597b133c178d35b7cfabe5396f616b8ee375a4c69ed3433b420209f026d7cda1c8990\"\r\n433c433\r\n<           \"IssuedToken\": \"0201c622e68159a21e5d2425145c30ba80496473447395d73e1ac4b7a853e69ade150fee3ce98f484354b465b6606f3f50c1558370c29bde448790c199752efa7734c6\"\r\n---\r\n>           \"IssuedToken\": \"0201e724d23cb2badbfd056ccd7f715c958e3abd581efa1b4f2c9c64f56722d8827ac4afb2cc04ab2a327555e43fc85c81e124a2f09ddee9205cbe2617ba40fb5d6b34\"\r\n438,439c438,439\r\n<           \"BlindedElement\": \"0301139ac465d6da1590cedf48e11879a0d6f6021f1a02a94f87394edfe704ac8dd5382bf4df7cdb1d715da42929680f1134357bea0c5e5d54c6a59bd4392fd7ec66fc\",\r\n<           \"Token\": \"b543368327f3077c68a1545e9aafbba6a90dc0d4094ba4283237211e139f306fc904c2d4fe4cc69c0a15c1b9ee1e66339439e3925cf8ce21ce8659f22523b6ce78\"\r\n---\r\n>           \"BlindedElement\": \"030136e9be08dc7265b0c171cfb47f34abde819a6bcf450206d7282c755d2b04b1e805ed7b148fc301c6ecd13d7a1471cd1c3c83a8cd565a6c666208e98ef6b42bdcdf\",\r\n>           \"Token\": \"45d858051ce9ad1a533176a862c697b2c392aff2aeb77eb20c2ae6ba52fe31e13e03bf1d9f39878b22e5c4833d34c486a8510e7cca4c1b81ece04f47e8d2554a5f\"\r\n441c441\r\n<         \"ClientOutput\": \"6e4494f49037d2a90667866daf7b60302bed9770bdd7db70f9cb1755e3037a35c5927125d8c0788cac0e86c326566331ac358fb87c8cbfa978042d8dada862f6\",\r\n---\r\n>         \"ClientOutput\": \"c63331eb2c504e9985ac1134b3f660075e89dce5d471d30c95613a7328f811071427eadd003973b520cb4540e46fa0e158c07375667aba4fd429744c7d71d25f\",\r\n443c443\r\n<           \"EvaluatedElement\": \"0300db7319402a48e810b1ff6c762dd9b70e0cb72ad105f40cc6d43eeb3d456675b8891213ad099944782550cbe88955d8451e485c5ff8f2592e7442dede5cc57de1f8\",\r\n---\r\n>           \"EvaluatedElement\": \"0300abe02e56737b6ba3641a4064e5b6e6a4355667438ebebf3a4f27e3c81cb37fe53f1444e6b8ff3ede0a965d99956d55cd9d6cdb82da3bbb895ff85391eb37efd4a8\",\r\n445,446c445,446\r\n<             \"c\": \"3d45b7a231eb8bcc8977f3b8888eecbe0c1dcaf2813d03882a2df59bff6c874380ce696fa6063a277254fcb6ba69af19cdff6b2c8abe379251e5a0fb71c725ba28\",\r\n<             \"s\": \"15d0b519a12b22b4166e73bbde21df4874eb41f4c77581047eec5d0f71f1b3dadbb39031aa514914bd5e535f1906941739889c606292b3e05ec1760906659ae8e4e\"\r\n---\r\n>             \"c\": \"18c6a1b794aae68d714613ba03f66c0353f46804cb4ee3c188190599908028c3fc51b06648a6908f56e2582843b871162fb3ae08176d3a362f1f3db850b53673818\",\r\n>             \"s\": \"6ff3d8d55188c16f5ac8577101197fbff5615714d309477221e5d80571c4e577a702f609666037b15afb615308e1f47411a7a77767b96639c1e087f83dde8c2e12\"\r\n453c453\r\n<           \"IssuedToken\": \"03013ebfe9a208ca5a15c0ea34cc77838ce579872d10d24928c69bcc341738a543c49fe5d072fe192a3bbf54c27fd54ff055dd9e2a4a93b73a9d032c2da66b38208bcd\"\r\n---\r\n>           \"IssuedToken\": \"0300084c3d41e902b79a1227e55f7cbe0d7295dc37f4101ecf86c72862f11ba9f82f45ed8c18dcb69a29d1b267fa07c8759c40bd0311151fddc3f9743321beb380f3b3\"\r\n458,459c458,459\r\n<           \"BlindedElement\": \"0200ae76378cbbd40181f0a68135d373c1386090c30fd587b11385983014397bb1d98f91de7747b1729ac7c2aba4691da0c586b36a398cef89465593d49956237f416f\",\r\n<           \"Token\": \"9f6c175f11a827452672b60d4e9f89eba281046e2839dd2c7a98309b06dfe89ac0cdd6b74684580de0f95f8e06aa6f6663d48b1a4b998a539380ed73cafefa270a\"\r\n---\r\n>           \"BlindedElement\": \"0201a3e6259a2591a2ab5ec912d8ba71131689529cf9663fe6a66e41f78174e2e44481a1611bf01ce4ca2ae57eef9621785a4588052e1737b8e6cbb9b987e8ca1af43b\",\r\n>           \"Token\": \"1daa8b5d6253d35895f4cff282d86b2358d89a82ee6523eff8db014d9b8b53ad7b0e149b0938b45f65717a40c38f671d326e196e8a21bf6cfd40327a95f1ccfc82b\"\r\n461c461\r\n<         \"ClientOutput\": \"1e926cf08ed78a6952ee5ce31c7699720c54b6dfa8d2fd706a47c882f58272e870f169da874f2d9cdcd3fce6c827c568777579627910ced485ef167dcf4e317a\",\r\n---\r\n>         \"ClientOutput\": \"c0eca0a9db3f6a33380d8920a5be6f3baff1c3e82e42ea686ad924e745a9f4d20c5d989d3b3c6199909720a2d30b849c6221dbbb6eb5aae1b29b13b475745838\",\r\n463c463\r\n<           \"EvaluatedElement\": \"0301b07568e659cb1a3c9f606eed3109cc2bc365404cba45a7e81c0a5ba51dce32efcf9937f8175c0b570b98eb0bccd42a884313bcafa6f1406ad4486a828bb6a3bf38\",\r\n---\r\n>           \"EvaluatedElement\": \"0201dbb68001e5ce6bffcc6eb48508270c51eb613454a8a318b29a3bb1b285b80d3bf176f2f62daef2f8bd5b18e8922bbff15dd1386073598dea04246f8115687423d7\",\r\n465,466c465,466\r\n<             \"c\": \"2fa5eb370309bd906dbf620c0b934494399fb4924110992ba8427117a7861cb25c7ee5da4250b69d12c41309a9372058277e7cbefe99a4b157aa2864c6e0ab7629\",\r\n<             \"s\": \"49184800c3122d0282425c85e623f03ead0597df3b89d42cfc4ecb5dafd5c8aea9a685a0c717fde3aad00ca2c020536506dadf5a83dad1e1c8d8151e888a394993\"\r\n---\r\n>             \"c\": \"12f157afa77ff10aea0e6540856481d609c9d1166fddf2cbfbcd367690e393d42f5db46ba513c97757ab317ee717e988d177566e86b68f50fae695b9ad7b1f4834d\",\r\n>             \"s\": \"afb69a132769a9ebd41847c8418df7989e48dffb8ac40422a9f9b4eadf4753af5b8774a8723ecca9f45281c7e54b7813f6ca64d4052341e4466a8f1c1c3f889933\"\r\n473c473\r\n<           \"IssuedToken\": \"0201ea63b758515d53daca035e023a74f34908a9a1bc346b35455b7df8ebbdaf9d0d71f32f3cdc09208050ce69168f87f0da4af467db099f5b5b0d5cd64e8b97781150\"\r\n---\r\n>           \"IssuedToken\": \"02005ee2531da70027d8717ac0749a945941627c177ce47acc796a2cb65648263dc7369398a7a6304d8c486efaa5e247756e67874dd55f3bf4ff0ff5532ecaf48a2259\"\r\n480c480\r\n<     \"skS\": \"3dacfa42bdb38e3c626a939e19daca653b9217801b5d51cef66d9fdbd94a53533e7c5057e09e220065ea8c257c0dd6055c4b401063eff0c0\",\r\n---\r\n>     \"skS\": \"19763038a1ba1a337759061965a423d9d3d6e1e1006dc8984ad28a4c93ecfc36fc2171046b3c4284855cfa2434ed98db9e68a597db2c1473\",\r\n485,486c485,486\r\n<           \"BlindedElement\": \"de5ae64474051ee82ddd666afdc5e89e91a0fd2146b341140270da4b0a9bff2a4b2ed3b6d490ed1909c5696ee51e9d37cbde2e4fbfaebf1e\",\r\n<           \"Token\": \"c965dcec686956af0c7822ba317fb5e86028c44b92bd3aedcf6744d388ca013ef33edd369304ed96fc56c7c6c0bd369f8e926ffe4854a59\"\r\n---\r\n>           \"BlindedElement\": \"c2e6fe7576456669a32b5f93315bc7d130101296ef40fd6706f63b687ce245ee88de3657fddaa9919131dda3ee0387a615d29853936b820a\",\r\n>           \"Token\": \"2177890042b84d9ebe3b2e9de07678ff96713dfe16f40f2c662a56ed2db95e1e7bf2dea02bd1fa76e953a630772f68b53baade9962d1646\"\r\n488c488\r\n<         \"ClientOutput\": \"580176db69e927eb90d448c0929d3799eb8e3a0f4f1d554a1db62ce773711d43740cf400d27fcd91e2d9aad4accf3e95d0324ab52f1793e993ef79104076951a\",\r\n---\r\n>         \"ClientOutput\": \"f0913fb43f41ac7ef886f635e34b589f071008f795fa70f073c070fa54ae4d00510b95b7ca0915581cbe61b1c50b039bb1f3eb09bf5b35fc0e5a2beb2ae110dc\",\r\n490c490\r\n<           \"EvaluatedElement\": \"2cf19a8a1310ffef2f79fa1663d0301d70fba29f3c5a4164a66459e4bb557af53ab8b2cbc5cc275717a9b5f9d819d48252f0460040b99507\",\r\n---\r\n>           \"EvaluatedElement\": \"8ad803185e2074a7b02207c8b714d71dd5cbb0fb0d13442133a1ce03de3b5b4c65129f8219f3bad02295851484010848bec667ca57e85fcf\",\r\n492,493c492,493\r\n<             \"c\": \"18b28d5a5ab89f8ecc237793723b3c083e4aeddde07e4993f80244f15193533c77d5d53d8394bab4cb28d30e4854e5e6462de9ecc06bd39c\",\r\n<             \"s\": \"fb572f885f43f07d592837e03ca67884c88560928f8cf01ffe757415c2326059d28ffb3647575286ca52cc5e1b03919097dc18692fcb4ee\"\r\n---\r\n>             \"c\": \"3bc5d7606548270a0b42d80917af61fbb71f86343bed712eb2d5c9b32ecc619dd5c71a42106eab67179f24f55d6b7894122844199b3f0008\",\r\n>             \"s\": \"d85e516072d66fcfdd0d78d0b2ca91aaf01ccdd84f5934d21d4aa104d971d13c63263884252faa74cb1dab528fe209be5397d4446195f69\"\r\n500c500\r\n<           \"IssuedToken\": \"5445b2d1e14d4dff76c27141ffacc3f85d78b812e447db36a49eec426ab8cba4bc3e872caac8d8fa90e076d080bf759e09ce98a1ac8f82ae\"\r\n---\r\n>           \"IssuedToken\": \"4210bb0b15faafda2cd9499a4c1aa0bbbd40bd1a13789462e691bf2c515c3e9a810236c726d536ccb0ac36f804d50dfa57ad1e8908f58d65\"\r\n505,506c505,506\r\n<           \"BlindedElement\": \"d28d374007ddafb026cd397ba63aa951232a1e13e07acb8a74f087ad6eae10007eef7ab0746c487ee82e85e7594f6b982ed99ddbf3f3667e\",\r\n<           \"Token\": \"d641cf015b92d15450f7fb395bf52c6ea98384c491fe4e4d423b59de7b0df382902c13bdc9993d3717bda68fc080b9802ae4effd5dc972e\"\r\n---\r\n>           \"BlindedElement\": \"7a50a5be94767b5db417d04cbafbb62b10459b593d028e2a8463b73f7bc8f590d5998cfce17a2f8dd76d532cc05227b2a78b170da543aca5\",\r\n>           \"Token\": \"687292a4361e9f1b18e24c9a40ed5eec262bf51dc970d63acb5ab74318e54223c759e9747f59c0d4ecbc087302667fabefa647b1766accc\"\r\n508c508\r\n<         \"ClientOutput\": \"8b2bbb7fe01aaf90c3ba2357896ca69398441dcf767d567f8223758f5a3e53032040d6c55d23de23b7c4968e762ec01f9339c526466a49af2e652adf136439f4\",\r\n---\r\n>         \"ClientOutput\": \"a2cb8dc517289e2b432858cc2f6187e36d04ae1a2a9645ba10c3c7f1a4683058e5988a3f9bb5e06b728c7a17bcb41d683cdbfc32e2ab7907442720a1d4e05d51\",\r\n510c510\r\n<           \"EvaluatedElement\": \"0296e34ca96da0b3e1f683f39f4132048dd7550b44239053698b417991bfecf6147b1ec15f17bbd6aae9f7325e39cfe847ae94e7d8462c2a\",\r\n---\r\n>           \"EvaluatedElement\": \"2cd362caf43f5681361697050f57273220755aa7f73b28f00ed91d5053a4db14902edd9adefdf06b820cee8ec31f46d5bab60cfbc00f80c8\",\r\n512,513c512,513\r\n<             \"c\": \"32390be54fc5d4e44a8d2ec81de8a736777a33ebf67d29a357a3712d9e34f49864ba080d5d115a9f58587de676f5c6af9fa58fce13936722\",\r\n<             \"s\": \"1591e387a8325c54983fc41222635169f4109bc6e031716400fc1fe2952a47a6309d885317ab71e349d42739f20a412284f4e6cf51e836da\"\r\n---\r\n>             \"c\": \"5ee35b8478610a14955bd32791e189cd4144247e67357b733fbd97a32de2cd62f88b2f5061a1fb21cb53d68daf0744b0c77bbe6ad8be4bc\",\r\n>             \"s\": \"3275973bd8b1124d1a9c847d87a1f1625c1a0a07d4c51e2d4b4423a9bad183128b3dabd86749dbbe587ff4b65164cf4305fb5cb0f3f63b26\"\r\n520c520\r\n<           \"IssuedToken\": \"3032343f8390556150b81891da093c6205151a55a5926c593da647709b0c1bb6a7f81fafe11c1320388ad1c7eaa24c2887e0cc166fa57be3\"\r\n---\r\n>           \"IssuedToken\": \"58b4f8056c3e0cbc336914bf2791241e87d7658752c6152d3beda62021ccdabd46035a436f391397cb450f137fcdc64d67a19abf5751693f\"\r\n525,526c525,526\r\n<           \"BlindedElement\": \"a00c226777540438ff0607d3eb40c8e843ec03f7f35fb91122c3f4936a992057738d95d29fec452a610eaf4cde056483dc30ffa0b7af62fc\",\r\n<           \"Token\": \"1473c4c9c123869859b596174a682828f3934d510217ce7890f67cafc0ffaa7a1e1d1ced3c477fea691e696032c8709c86cbcda2b184ad01\"\r\n---\r\n>           \"BlindedElement\": \"40f5657ee71245f8f0a32e65a5f736c3210190a4df95739a07f8b9cb44a34463e2ee17e3e9bd40c0e21f4f04f12b5f55a29efe39ee8c7866\",\r\n>           \"Token\": \"24ea2f418ad9f44b428026396a810328c405a354e666f086fa0ea4754fb56527be010296ea880e1c6a4dbbc9ede543a2ad0f83fd60fdacb6\"\r\n528c528\r\n<         \"ClientOutput\": \"b3b3016ce42e3ccad4ab2a6ac8c6d9cdf1136bd719f44a6de49cc398fa460ae9b77f2f265b8df99cbcfb2db921b74084eb78b30b1f4de9102bc0090e037f8de7\",\r\n---\r\n>         \"ClientOutput\": \"1f615cddfe138372b15b9dca7bba648362c5b6e160f9ae0d310e43baacb7aa57b059f0c31c35b9f9c309508759e8b9ab19918ec4bfce0f34ca77c978d2395ccb\",\r\n530c530\r\n<           \"EvaluatedElement\": \"de5a12ce33d5ed7382d04fc2c57a85c9ff1366de1e1f229bdfbb1ce883b17f51171b15b5ac9290843d56f889d2a496ecb6b8b43945342913\",\r\n---\r\n>           \"EvaluatedElement\": \"802dcc649435f2ed6403a0216e948e8e3084552be0fb8063dd346a22d7a3ebd070e1db5ec21f5812991e6c019d2852b21cecf6ffa90cd8d2\",\r\n532,533c532,533\r\n<             \"c\": \"6a6ae91d30234b0a4dae9923f24c37447248421193d58746d22d7d23d182673c107900e1ce85d6bf50f755567752a09e49eff5c74cd6a88\",\r\n<             \"s\": \"224f058494a6936779d38249103998f302d81b4ed88e90f26e355119eac461bc3b1d8002704141c63ba8364aeb1834df70369bda551ecb6e\"\r\n---\r\n>             \"c\": \"22a7f84c6cffa2313deef8bfbc03fa4938c68722dbc87913d5afb00028c5610d2f7f246226c32d37490fc3855c7815a20d95d3e259e75a0a\",\r\n>             \"s\": \"17aea24052fd9ffbbbdee0c8419fc3827a0b4d543d2d477bfc7ac4800fee6145e3bb5b4ef9f5304a107840a9807609b4554370ebd616a3e1\"\r\n540c540\r\n<           \"IssuedToken\": \"887f2b4d97266247ac364d23f68ee39de2c0403ac20dca35ea065055fea89a9dec7b6da37830cd9462a159e5315eedd9b6b2d8af2b91d4f0\"\r\n---\r\n>           \"IssuedToken\": \"c0e19c5762bfb2bbb12904d2abccf6cd7e4371f307db5e3a42d0853f8627f858d0b2ed83b7d2ac49edbdec0490ef8f22bd395b703c31708a\"\r\n```\r\n\r\nlet me know what I'm doing wrong here.",
          "createdAt": "2020-11-04T23:01:14Z",
          "updatedAt": "2020-11-04T23:01:14Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "And to note, in my machine:\r\n\r\n```\r\npython: aliased to /usr/local/bin/python3\r\nsage -v                       \r\nSageMath version 9.1, Release Date: 2020-05-20\r\n```",
          "createdAt": "2020-11-04T23:02:47Z",
          "updatedAt": "2020-11-04T23:02:47Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> let me know what I'm doing wrong here.\r\n\r\nI don't know what's different, but that's not behavior I'm seeing. ",
          "createdAt": "2020-11-04T23:04:10Z",
          "updatedAt": "2020-11-04T23:04:10Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@armfazh, I'll use that then, and keep this PR for removing the ristretto and decaf in the tests. ",
          "createdAt": "2020-11-04T23:06:36Z",
          "updatedAt": "2020-11-04T23:06:36Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood I'll check then what is wrong with my machine, as I ran it again, and it created new vectors. ",
          "createdAt": "2020-11-04T23:07:04Z",
          "updatedAt": "2020-11-04T23:07:04Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNTMxMDU2",
          "commit": {
            "abbreviatedOid": "5a7d45f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-04T16:30:06Z",
          "updatedAt": "2020-11-04T16:30:07Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "Why doesn't `to_hex` work here?",
              "createdAt": "2020-11-04T16:30:07Z",
              "updatedAt": "2020-11-04T16:30:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNTMxMzcy",
          "commit": {
            "abbreviatedOid": "5a7d45f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-04T16:30:26Z",
          "updatedAt": "2020-11-04T16:30:27Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Same here.",
              "createdAt": "2020-11-04T16:30:26Z",
              "updatedAt": "2020-11-04T16:30:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNTMxOTUz",
          "commit": {
            "abbreviatedOid": "5a7d45f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "LGTM modulo one nit :) ",
          "createdAt": "2020-11-04T16:31:07Z",
          "updatedAt": "2020-11-04T16:31:07Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNzk3Njcx",
          "commit": {
            "abbreviatedOid": "5a7d45f"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-04T22:58:46Z",
          "updatedAt": "2020-11-04T22:58:46Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "Because server.skS is an int: \r\n\r\n``class 'sage.rings.integer.Integer'>`, which is not accepted by `to_hex` as it checks: `assert isinstance(octet_string, (bytes, bytearray))`. That is the reason why, as it can be seen in the code, it was previously using `hex`.\r\n\r\nBut it can be added to `to_hex`, if that is what is wanted.\r\n\r\n",
              "createdAt": "2020-11-04T22:58:46Z",
              "updatedAt": "2020-11-04T22:58:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 186,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE1NjYxNDMw",
      "title": "defines two varibles after ComputeComposites",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/186",
      "state": "OPEN",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Adds two variables, and fixes some typos.",
      "createdAt": "2020-11-04T21:55:51Z",
      "updatedAt": "2020-11-04T21:55:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "e02cf3466fbf033f1e9e92c04b069a8072b31072",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "addTwoVariables",
      "headRefOid": "4705574cce0c3271b0a539da370787ee1bfadeb3",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 187,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE1Njk4Nzkw",
      "title": "Optimization of compute composites",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/187",
      "state": "OPEN",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\r\nImplements a server-side optimization reported.\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/cfrg/dt8TUtTD-JVgVxjpEL9lz5wUTb8/\r\n\r\nMerge after #186 \r\n",
      "createdAt": "2020-11-04T23:36:03Z",
      "updatedAt": "2020-11-04T23:36:03Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "e02cf3466fbf033f1e9e92c04b069a8072b31072",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "optComputeComposites",
      "headRefOid": "8368e9b6c18c29b405b01a384a5719332601b6e2",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    }
  ]
}